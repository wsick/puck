{"version":3,"sources":["_version.ts","BrushMappingMode.ts","Color.ts","element/DirtyFlags.ts","Element.ts","Container.ts","puck.js","Visual.ts","stencil/visual.ts","Ellipse.ts","enums.ts","Font.ts","FrameDebug.ts","GradientBrush.ts","GradientSpreadMethod.ts","GradientStop.ts","PuckArray.ts","GradientStops.ts","Image.ts","Layer.ts","LinearGradientBrush.ts","Path.ts","Points.ts","Polyline.ts","RadialGradientBrush.ts","Rectangle.ts","SolidColorBrush.ts","Stretch.ts","Text.ts","Timer.ts","element/ElementComposite.ts","container/ContainerComposite.ts","element/ElementState.ts","container/ContainerState.ts","engine/hit.ts","engine/process.ts","render/RenderContext.ts","engine/render.ts","fit/extents.ts","fit/transform.ts","font/toString.ts","image/ImageComposite.ts","image/ImageSource.ts","image/ImageState.ts","internal/WatchChanger.ts","linearGradient/interpolator.ts","linearGradient/metrics.ts","path/Bounder.ts","path/PathComposite.ts","visual/VisualState.ts","path/PathState.ts","polyline/PolylineState.ts","radialGradient/extender.ts","render/natural.ts","render/RenderContextSize.ts","render/zoom.ts","stencil/IStencil.ts","stencil/path.ts","text/TextState.ts","visual/VisualComposite.ts","walk/IWalker.ts","element/down/Processor.ts","container/down/Processor.ts","element/hit/Processor.ts","container/hit/Processor.ts","element/render/Processor.ts","container/render/Processor.ts","container/up/extents.ts","container/up/invalidate.ts","element/up/Processor.ts","element/up/newbounds.ts","container/up/Processor.ts","element/down/opacity.ts","element/down/transform.ts","element/down/visible.ts","element/render/narrow.ts","element/render/prepare.ts","element/render/should.ts","element/render/validate.ts","element/up/extents.ts","font/height/get.ts","font/height/measure.ts","font/width/measure.ts","image/down/Processor.ts","image/down/stretch.ts","image/hit/Processor.ts","image/up/extents.ts","image/up/Processor.ts","path/down/natural.ts","path/down/Processor.ts","path/down/stretch.ts","visual/hit/Processor.ts","path/hit/Processor.ts","visual/render/Processor.ts","path/render/Processor.ts","path/up/extents.ts","path/up/Processor.ts","polyfill/CanvasRenderingContext2D/backingStorePixelRatio.ts","polyfill/CanvasRenderingContext2D/ellipse.ts","polyfill/CanvasRenderingContext2D/isPointInStroke.ts","polyline/down/points.ts","polyline/down/Processor.ts","text/hit/Processor.ts","text/render/Processor.ts","text/up/font.ts","text/up/Processor.ts"],"names":["puck","puck.BrushMappingMode","puck.parse","puck.parseHex","puck.Color","puck.Color.constructor","puck.Color.add","puck.Color.subtract","puck.Color.multiply","puck.Color.toString","puck.Color.toHexString","puck.Color.toHexStringNoAlpha","puck.Color.equals","puck.Color.lerp","puck.Color.fromRgba","puck.Color.fromHex","puck.element","puck.element.DirtyFlags","puck.Element","puck.Element.constructor","puck.Element.init","puck.Element.opacity","puck.Element.visible","puck.Element.transformOriginX","puck.Element.transformOriginY","puck.Element.resetTransform","puck.Element.setTransform","puck.Element.applyTransform","puck.Container","puck.Container.constructor","puck.Container.init","puck.Container.walk","puck.Container.walk.next","puck.Container.opacity","puck.Container.visible","puck.Container.transformOriginX","puck.Container.transformOriginY","puck.Container.x","puck.Container.y","puck.Container.resetTransform","puck.Container.setTransform","puck.Container.applyTransform","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","puck.Visual","puck.Visual.constructor","puck.Visual.init","puck.Visual.fill","puck.Visual.stroke","puck.Visual.strokeThickness","puck.Visual.sub","puck.stencil","puck.stencil.draft","puck.stencil.draw","puck.Ellipse","puck.Ellipse.constructor","puck.Ellipse.init","puck.Ellipse.x","puck.Ellipse.y","puck.Ellipse.width","puck.Ellipse.height","puck.draw","puck.FillRule","puck.PenLineJoin","puck.PenLineCap","puck.FontWeight","puck.toString","puck.FrameDebug","puck.FrameDebug.constructor","puck.FrameDebug.onBeginProcess","puck.FrameDebug.onEndProcess","puck.FrameDebug.onBeginRender","puck.FrameDebug.onEndRender","puck.FrameDebug.beginProcess","puck.FrameDebug.endProcess","puck.FrameDebug.beginRender","puck.FrameDebug.endRender","puck.GradientBrush","puck.GradientBrush.constructor","puck.GradientBrush.spreadMethod","puck.GradientBrush.mappingMode","puck.GradientBrush.stops","puck.GradientBrush.sub","puck.GradientBrush.watch","puck.GradientBrush.setup","puck.GradientBrush.toHtml5Object","puck.GradientBrush.createBrush","puck.GradientBrush.mapPoint","puck.GradientSpreadMethod","puck.GradientStop","puck.GradientStop.constructor","puck.PuckArray","puck.PuckArray.constructor","get","puck.PuckArray.length","enumerable","configurable","puck.PuckArray.clear","puck.PuckArray.add","puck.PuckArray.addMany","puck.PuckArray.insert","puck.PuckArray.insertMany","puck.PuckArray.edit","puck.PuckArray.editAt","puck.PuckArray.remove","puck.PuckArray.removeAt","puck.PuckArray.watch","puck.PuckArray.iter","puck.PuckArray.arrayIter","puck.PuckArray.arrayIter.next","puck.GradientStops","puck.GradientStops.constructor","puck.GradientStops.paddedIter","puck.Image","puck.Image.constructor","puck.Image.init","puck.Image.x","puck.Image.y","puck.Image.width","puck.Image.height","puck.Image.stretch","puck.Image.sourceUri","puck.Image.onSourceChanged","puck.Image.onSourceErrored","puck.Image.onSourceLoaded","puck.Image.setNaturalSize","puck.Layer","puck.Layer.constructor","puck.Layer.width","puck.Layer.height","puck.Layer.init","puck.Layer.attach","puck.Layer.activate","puck.Layer.deactivate","puck.Layer.process","puck.Layer.render","puck.Layer.onTick","puck.addColorStop","puck.LinearGradientBrush","puck.LinearGradientBrush.constructor","puck.LinearGradientBrush.start","puck.LinearGradientBrush.end","puck.LinearGradientBrush.createPad","puck.LinearGradientBrush.createReflect","puck.LinearGradientBrush.createRepeat","puck.LinearGradientBrush.createInterpolated","puck.Path","puck.Path.constructor","puck.Path.init","puck.Path.x","puck.Path.y","puck.Path.width","puck.Path.height","puck.Path.stretch","puck.Path.path","puck.Path.fillRule","puck.Path.strokeLineCap","puck.Path.strokeLineJoin","puck.Path.strokeMiterLimit","puck.Points","puck.Points.constructor","puck.Polyline","puck.Polyline.constructor","puck.Polyline.init","puck.Polyline.points","puck.Polyline.closed","puck.Polyline.x","puck.Polyline.y","puck.Polyline.width","puck.Polyline.height","puck.Polyline.stretch","puck.Polyline.path","puck.Polyline.fillRule","puck.Polyline.strokeLineCap","puck.Polyline.strokeLineJoin","puck.Polyline.strokeMiterLimit","puck.RadialGradientBrush","puck.RadialGradientBrush.constructor","puck.RadialGradientBrush.center","puck.RadialGradientBrush.origin","puck.RadialGradientBrush.radiusX","puck.RadialGradientBrush.radiusY","puck.RadialGradientBrush.createPad","puck.RadialGradientBrush.createReflect","puck.RadialGradientBrush.createRepeat","puck.RadialGradientBrush.createInterpolated","puck.RadialGradientBrush.getPointData","puck.RadialGradientBrush.fit","puck.Rectangle","puck.Rectangle.constructor","puck.Rectangle.init","puck.Rectangle.x","puck.Rectangle.y","puck.Rectangle.width","puck.Rectangle.height","puck.SolidColorBrush","puck.SolidColorBrush.constructor","puck.SolidColorBrush.color","puck.SolidColorBrush.watch","puck.SolidColorBrush.toHtml5Object","puck.Stretch","puck.Text","puck.Text.constructor","puck.Text.init","puck.Text.fill","puck.Text.stroke","puck.Text.strokeThickness","puck.Text.x","puck.Text.y","puck.Text.text","puck.Text.fontFamily","puck.Text.fontSize","puck.Text.fontStretch","puck.Text.fontStyle","puck.Text.fontWeight","puck.Timer","puck.Timer.constructor","puck.Timer.enable","puck.Timer.disable","puck.Timer.onFrame","puck.animate","puck.animate.request","puck.animate.cancel","puck.element.ElementComposite","puck.element.ElementComposite.constructor","puck.element.ElementComposite.hasDirt","puck.element.ElementComposite.taint","puck.element.ElementComposite.untaint","puck.element.ElementComposite.reset","puck.element.ElementComposite.invalidate","puck.container","puck.container.ContainerComposite","puck.container.ContainerComposite.constructor","puck.element.ElementState","puck.element.ElementState.constructor","puck.element.ElementState.reset","puck.element.ElementState.mapTransformOrigin","puck.container.ContainerState","puck.container.ContainerState.constructor","puck.engine","puck.engine.hit","puck.engine.process","puck.engine.doDown","puck.engine.doUp","puck.engine.hasDirt","puck.render","puck.render.getIEVersion","puck.render.RenderContext","puck.render.RenderContext.constructor","puck.render.RenderContext.hasFillRule","puck.render.RenderContext.init","puck.render.RenderContext.applyDpiRatio","puck.render.RenderContext.save","puck.render.RenderContext.restore","puck.render.RenderContext.setTransform","puck.render.RenderContext.resetTransform","puck.render.RenderContext.transform","puck.render.RenderContext.scale","puck.render.RenderContext.rotate","puck.render.RenderContext.translate","puck.render.RenderContext.apply","puck.render.RenderContext.preapply","puck.render.RenderContext.clipRect","puck.render.RenderContext.fillEx","puck.render.RenderContext.strokeEx","puck.render.RenderContext.isPointInStrokeEx","puck.render.RenderContext.setStrokeExtras","puck.engine.render","puck.fit","puck.fit.extents","puck.fit.extents.calc","puck.fit.transform","puck.fit.transform.calc","puck.font","puck.font.toString","puck.image","puck.image.ImageComposite","puck.image.ImageComposite.constructor","puck.image.ImageComposite.reset","puck.image.ImageSource","puck.image.ImageSource.constructor","puck.image.ImageSource.reset","puck.image.ImageSource.uri","set","puck.image.ImageSource.naturalWidth","puck.image.ImageSource.naturalHeight","puck.image.ImageSource.draw","puck.image.ImageSource.watch","puck.image.ImageSource.onChanged","puck.image.ImageSource.onErrored","puck.image.ImageSource.onLoaded","puck.image.ImageState","puck.image.ImageState.constructor","puck.image.ImageState.reset","puck.image.ImageState.getEffectiveStretch","puck.internal","puck.internal.WatchChanger","puck.internal.WatchChanger.constructor","puck.internal.WatchChanger.watch","puck.internal.WatchChanger.on","puck.linearGradient","puck.linearGradient.createRepeatInterpolator","puck.linearGradient.createRepeatInterpolator.step","puck.linearGradient.createRepeatInterpolator.interpolate","puck.linearGradient.createReflectInterpolator","puck.linearGradient.createReflectInterpolator.step","puck.linearGradient.createReflectInterpolator.interpolate","puck.linearGradient.calcMetrics","puck.linearGradient.E","puck.linearGradient.W","puck.linearGradient.S","puck.linearGradient.N","puck.linearGradient.NW","puck.linearGradient.SW","puck.linearGradient.NE","puck.linearGradient.SE","puck.path","puck.path.Bounder","puck.path.Bounder.constructor","puck.path.Bounder.getPath","puck.path.Bounder.setPath","puck.path.Bounder.reset","puck.path.Bounder.getFillRect","puck.path.Bounder.getStrokeRect","puck.path.Bounder.calc","puck.path.Bounder.setStroke","puck.path.PathComposite","puck.path.PathComposite.constructor","puck.path.PathComposite.reset","puck.visual","puck.visual.VisualState","puck.visual.VisualState.constructor","puck.visual.VisualState.reset","puck.path.PathState","puck.path.PathState.constructor","puck.path.PathState.reset","puck.path.PathState.getEffectiveStretch","puck.path.PathState.mapTransformOrigin","puck.polyline","puck.polyline.PolylineState","puck.polyline.PolylineState.constructor","puck.polyline.PolylineState.reset","puck.radialGradient","puck.radialGradient.createExtender","puck.radialGradient.createExtender.step","puck.radialGradient.createExtender.createGradient","puck.radialGradient.exceedBounds","puck.radialGradient.len","puck.render.getNaturalCanvasSize","puck.render.RenderContextSize","puck.render.RenderContextSize.constructor","puck.render.RenderContextSize.desiredWidth","puck.render.RenderContextSize.desiredHeight","puck.render.RenderContextSize.paintWidth","puck.render.RenderContextSize.paintHeight","puck.render.RenderContextSize.dpiRatio","puck.render.RenderContextSize.init","puck.render.RenderContextSize.queueResize","puck.render.RenderContextSize.commitResize","puck.render.RenderContextSize.updateDpiRatio","puck.render.RenderContextSize.$adjustCanvas","puck.render.zoom","puck.render.zoom.ie","puck.render.zoom.chrome","puck.render.zoom.chrome.memoizeSvg","puck.text","puck.text.TextState","puck.text.TextState.constructor","puck.text.TextState.reset","puck.text.TextState.reset.toString","puck.visual.VisualComposite","puck.visual.VisualComposite.constructor","puck.walk","puck.walk.getWalker","puck.element.down","puck.element.down.Processor","puck.element.down.Processor.isTainted","puck.element.down.Processor.process","puck.element.down.Processor.clear","puck.container.down","puck.container.down.Processor","puck.container.down.Processor.constructor","puck.container.down.Processor.process","puck.element.hit","puck.element.hit.Processor","puck.element.hit.Processor.process","puck.element.hit.Processor.prehit","puck.element.hit.Processor.hit","puck.element.hit.Processor.draw","puck.container.hit","puck.container.hit.Processor","puck.container.hit.Processor.constructor","puck.container.hit.Processor.hit","puck.element.render","puck.element.render.SkipResult","puck.element.render.Processor","puck.element.render.Processor.process","puck.element.render.Processor.clear","puck.element.render.Processor.prerender","puck.element.render.Processor.render","puck.element.render.Processor.postrender","puck.element.render.Processor.createStencilBag","puck.container.render","puck.container.render.Processor","puck.container.render.Processor.constructor","puck.container.render.Processor.render","puck.container.up","puck.container.up.extents","puck.container.up.extents.process","puck.container.up.invalidate","puck.container.up.invalidate.process","puck.element.up","puck.element.up.Processor","puck.element.up.Processor.isTainted","puck.element.up.Processor.process","puck.element.up.Processor.clear","puck.element.up.newbounds","puck.element.up.newbounds.process","puck.container.up.Processor","puck.container.up.Processor.constructor","puck.container.up.Processor.process","puck.element.down.opacity","puck.element.down.opacity.process","puck.element.down.transform","puck.element.down.transform.process","puck.element.down.visible","puck.element.down.visible.process","puck.element.render.narrow","puck.element.render.prepare","puck.element.render.prepare.process","puck.element.render.should","puck.element.render.should.process","puck.element.render.validate","puck.element.render.validate.process","puck.element.up.extents","puck.element.up.extents.process","puck.font.height","puck.font.height.get","puck.font.height.measure","puck.font.width","puck.font.width.measure","puck.image.down","puck.image.down.Processor","puck.image.down.Processor.constructor","puck.image.down.Processor.process","puck.image.down.stretch","puck.image.down.stretch.process","puck.image.hit","puck.image.hit.Processor","puck.image.hit.Processor.constructor","puck.image.hit.Processor.hit","puck.image.up","puck.image.up.extents","puck.image.up.extents.process","puck.image.up.Processor","puck.image.up.Processor.constructor","puck.image.up.Processor.process","puck.path.down","puck.path.down.natural","puck.path.down.natural.process","puck.path.down.Processor","puck.path.down.Processor.constructor","puck.path.down.Processor.process","puck.path.down.stretch","puck.path.down.stretch.process","puck.visual.hit","puck.visual.hit.Processor","puck.visual.hit.Processor.constructor","puck.visual.hit.Processor.prehit","puck.visual.hit.Processor.hit","puck.path.hit","puck.path.hit.Processor","puck.path.hit.Processor.constructor","puck.path.hit.Processor.hit","puck.path.hit.Processor.transformLocal","puck.visual.render","puck.visual.render.Processor","puck.visual.render.Processor.constructor","puck.visual.render.Processor.render","puck.visual.render.Processor.fill","puck.visual.render.Processor.stroke","puck.path.render","puck.path.render.Processor","puck.path.render.Processor.constructor","puck.path.render.Processor.transformLocal","puck.path.render.Processor.fill","puck.path.render.Processor.stroke","puck.path.up","puck.path.up.extents","puck.path.up.extents.process","puck.path.up.Processor","puck.path.up.Processor.constructor","puck.path.up.Processor.process","CanvasRenderingContext2D","defineProperty","ctx","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","ellipse","x","y","radiusX","radiusY","rotation","startAngle","endAngle","antiClockwise","save","translate","rotate","scale","arc","restore","isPointInStroke","puck.polyline.down","puck.polyline.down.points","puck.polyline.down.points.process","puck.polyline.down.Processor","puck.polyline.down.Processor.constructor","puck.polyline.down.Processor.process","puck.text.hit","puck.text.hit.Processor","puck.text.hit.Processor.constructor","puck.text.hit.Processor.prehit","puck.text.hit.Processor.hit","puck.text.render","puck.text.render.Processor","puck.text.render.Processor.constructor","puck.text.render.Processor.render","puck.text.render.Processor.fill","puck.text.render.Processor.stroke","puck.text.up","puck.text.up.font","puck.text.up.font.process","puck.text.up.Processor","puck.text.up.Processor.constructor","puck.text.up.Processor.process"],"mappings":"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","file":"puck.min.js","sourcesContent":["module puck {\n    export var version = '0.1.0';\n}","namespace puck {\n    export enum BrushMappingMode {\n        relativeToBounds = 0,\n        absolute = 1,\n    }\n}","namespace puck {\n    var NoAlphaRegex = /#([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}/;\n    var AlphaRegex = /#([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}/;\n\n    export class Color {\n        r: number = 0;\n        g: number = 0;\n        b: number = 0;\n        a: number = 1.0;\n\n        constructor(color?: Color|string) {\n            if (color instanceof Color) {\n                this.r = color.r;\n                this.g = color.g;\n                this.b = color.b;\n                this.a = color.a;\n            } else if (typeof color === \"string\") {\n                parse(this, color);\n            }\n        }\n\n        add(color2: Color) {\n            var c = new Color();\n            c.r = this.r + color2.r;\n            c.g = this.g + color2.g;\n            c.b = this.b + color2.b;\n            c.a = this.a + color2.a;\n            return c;\n        }\n\n        subtract(color2: Color) {\n            var c = new Color();\n            c.r = this.r - color2.r;\n            c.g = this.g - color2.g;\n            c.b = this.b - color2.b;\n            c.a = this.a - color2.a;\n            return c;\n        }\n\n        multiply(factor: number) {\n            var c = new Color();\n            c.r = this.r * factor;\n            c.g = this.g * factor;\n            c.b = this.b * factor;\n            c.a = this.a * factor;\n            return c;\n        }\n\n        toString() {\n            var r = Math.round(this.r) || 0;\n            var g = Math.round(this.g) || 0;\n            var b = Math.round(this.b) || 0;\n            var a = this.a || 0;\n            return `rgba(${r}, ${g}, ${b}, ${a})`;\n        }\n\n        toHexString(): string {\n            var ah = (this.a * 255).toString(16),\n                rh = this.r.toString(16),\n                gh = this.g.toString(16),\n                bh = this.b.toString(16);\n            return `#${ah}${rh}${gh}${bh}`;\n        }\n\n        toHexStringNoAlpha(): string {\n            var rh = this.r.toString(16),\n                gh = this.g.toString(16),\n                bh = this.b.toString(16);\n            return `#${rh}${gh}${bh}`;\n        }\n\n        static equals(color1: Color, color2: Color): boolean {\n            if (!color1) {\n                return !color2;\n            }\n            if (!color2) {\n                return false;\n            }\n            return color1.r === color2.r\n                && color1.g === color2.g\n                && color1.b === color2.b\n                && color1.a === color2.a;\n        }\n\n        static lerp(start: Color, end: Color, p: number): Color {\n            var c = new Color();\n            c.r = start.r + (end.r - start.r) * p;\n            c.g = start.g + (end.g - start.g) * p;\n            c.b = start.b + (end.b - start.b) * p;\n            c.a = start.a + (end.a - start.a) * p;\n            return c;\n        }\n\n        static fromRgba(r: number, g: number, b: number, a: number): Color {\n            var c = new Color();\n            c.r = r;\n            c.g = g;\n            c.b = b;\n            c.a = a;\n            return c;\n        }\n\n        static fromHex(hex: string): Color {\n            var c = new Color();\n            parseHex(c, hex);\n            return c;\n        }\n    }\n\n    export var KnownColors = {\n        AliceBlue: Color.fromHex(\"#FFF0F8FF\"),\n        AntiqueWhite: Color.fromHex(\"#FFFAEBD7\"),\n        Aqua: Color.fromHex(\"#FF00FFFF\"),\n        Aquamarine: Color.fromHex(\"#FF7FFFD4\"),\n        Azure: Color.fromHex(\"#FFF0FFFF\"),\n        Beige: Color.fromHex(\"#FFF5F5DC\"),\n        Bisque: Color.fromHex(\"#FFFFE4C4\"),\n        Black: Color.fromHex(\"#FF000000\"),\n        BlanchedAlmond: Color.fromHex(\"#FFFFEBCD\"),\n        Blue: Color.fromHex(\"#FF0000FF\"),\n        BlueViolet: Color.fromHex(\"#FF8A2BE2\"),\n        Brown: Color.fromHex(\"#FFA52A2A\"),\n        BurlyWood: Color.fromHex(\"#FFDEB887\"),\n        CadetBlue: Color.fromHex(\"#FF5F9EA0\"),\n        Chartreuse: Color.fromHex(\"#FF7FFF00\"),\n        Chocolate: Color.fromHex(\"#FFD2691E\"),\n        Coral: Color.fromHex(\"#FFFF7F50\"),\n        CornflowerBlue: Color.fromHex(\"#FF6495ED\"),\n        Cornsilk: Color.fromHex(\"#FFFFF8DC\"),\n        Crimson: Color.fromHex(\"#FFDC143C\"),\n        Cyan: Color.fromHex(\"#FF00FFFF\"),\n        DarkBlue: Color.fromHex(\"#FF00008B\"),\n        DarkCyan: Color.fromHex(\"#FF008B8B\"),\n        DarkGoldenrod: Color.fromHex(\"#FFB8860B\"),\n        DarkGray: Color.fromHex(\"#FFA9A9A9\"),\n        DarkGreen: Color.fromHex(\"#FF006400\"),\n        DarkKhaki: Color.fromHex(\"#FFBDB76B\"),\n        DarkMagenta: Color.fromHex(\"#FF8B008B\"),\n        DarkOliveGreen: Color.fromHex(\"#FF556B2F\"),\n        DarkOrange: Color.fromHex(\"#FFFF8C00\"),\n        DarkOrchid: Color.fromHex(\"#FF9932CC\"),\n        DarkRed: Color.fromHex(\"#FF8B0000\"),\n        DarkSalmon: Color.fromHex(\"#FFE9967A\"),\n        DarkSeaGreen: Color.fromHex(\"#FF8FBC8F\"),\n        DarkSlateBlue: Color.fromHex(\"#FF483D8B\"),\n        DarkSlateGray: Color.fromHex(\"#FF2F4F4F\"),\n        DarkTurquoise: Color.fromHex(\"#FF00CED1\"),\n        DarkViolet: Color.fromHex(\"#FF9400D3\"),\n        DeepPink: Color.fromHex(\"#FFFF1493\"),\n        DeepSkyBlue: Color.fromHex(\"#FF00BFFF\"),\n        DimGray: Color.fromHex(\"#FF696969\"),\n        DodgerBlue: Color.fromHex(\"#FF1E90FF\"),\n        Firebrick: Color.fromHex(\"#FFB22222\"),\n        FloralWhite: Color.fromHex(\"#FFFFFAF0\"),\n        ForestGreen: Color.fromHex(\"#FF228B22\"),\n        Fuchsia: Color.fromHex(\"#FFFF00FF\"),\n        Gainsboro: Color.fromHex(\"#FFDCDCDC\"),\n        GhostWhite: Color.fromHex(\"#FFF8F8FF\"),\n        Gold: Color.fromHex(\"#FFFFD700\"),\n        Goldenrod: Color.fromHex(\"#FFDAA520\"),\n        Gray: Color.fromHex(\"#FF808080\"),\n        Green: Color.fromHex(\"#FF008000\"),\n        GreenYellow: Color.fromHex(\"#FFADFF2F\"),\n        Honeydew: Color.fromHex(\"#FFF0FFF0\"),\n        HotPink: Color.fromHex(\"#FFFF69B4\"),\n        IndianRed: Color.fromHex(\"#FFCD5C5C\"),\n        Indigo: Color.fromHex(\"#FF4B0082\"),\n        Ivory: Color.fromHex(\"#FFFFFFF0\"),\n        Khaki: Color.fromHex(\"#FFF0E68C\"),\n        Lavender: Color.fromHex(\"#FFE6E6FA\"),\n        LavenderBlush: Color.fromHex(\"#FFFFF0F5\"),\n        LawnGreen: Color.fromHex(\"#FF7CFC00\"),\n        LemonChiffon: Color.fromHex(\"#FFFFFACD\"),\n        LightBlue: Color.fromHex(\"#FFADD8E6\"),\n        LightCoral: Color.fromHex(\"#FFF08080\"),\n        LightCyan: Color.fromHex(\"#FFE0FFFF\"),\n        LightGoldenrodYellow: Color.fromHex(\"#FFFAFAD2\"),\n        LightGray: Color.fromHex(\"#FFD3D3D3\"),\n        LightGreen: Color.fromHex(\"#FF90EE90\"),\n        LightPink: Color.fromHex(\"#FFFFB6C1\"),\n        LightSalmon: Color.fromHex(\"#FFFFA07A\"),\n        LightSeaGreen: Color.fromHex(\"#FF20B2AA\"),\n        LightSkyBlue: Color.fromHex(\"#FF87CEFA\"),\n        LightSlateGray: Color.fromHex(\"#FF778899\"),\n        LightSteelBlue: Color.fromHex(\"#FFB0C4DE\"),\n        LightYellow: Color.fromHex(\"#FFFFFFE0\"),\n        Lime: Color.fromHex(\"#FF00FF00\"),\n        LimeGreen: Color.fromHex(\"#FF32CD32\"),\n        Linen: Color.fromHex(\"#FFFAF0E6\"),\n        Magenta: Color.fromHex(\"#FFFF00FF\"),\n        Maroon: Color.fromHex(\"#FF800000\"),\n        MediumAquamarine: Color.fromHex(\"#FF66CDAA\"),\n        MediumBlue: Color.fromHex(\"#FF0000CD\"),\n        MediumOrchid: Color.fromHex(\"#FFBA55D3\"),\n        MediumPurple: Color.fromHex(\"#FF9370DB\"),\n        MediumSeaGreen: Color.fromHex(\"#FF3CB371\"),\n        MediumSlateBlue: Color.fromHex(\"#FF7B68EE\"),\n        MediumSpringGreen: Color.fromHex(\"#FF00FA9A\"),\n        MediumTurquoise: Color.fromHex(\"#FF48D1CC\"),\n        MediumVioletRed: Color.fromHex(\"#FFC71585\"),\n        MidnightBlue: Color.fromHex(\"#FF191970\"),\n        MintCream: Color.fromHex(\"#FFF5FFFA\"),\n        MistyRose: Color.fromHex(\"#FFFFE4E1\"),\n        Moccasin: Color.fromHex(\"#FFFFE4B5\"),\n        NavajoWhite: Color.fromHex(\"#FFFFDEAD\"),\n        Navy: Color.fromHex(\"#FF000080\"),\n        OldLace: Color.fromHex(\"#FFFDF5E6\"),\n        Olive: Color.fromHex(\"#FF808000\"),\n        OliveDrab: Color.fromHex(\"#FF6B8E23\"),\n        Orange: Color.fromHex(\"#FFFFA500\"),\n        OrangeRed: Color.fromHex(\"#FFFF4500\"),\n        Orchid: Color.fromHex(\"#FFDA70D6\"),\n        PaleGoldenrod: Color.fromHex(\"#FFEEE8AA\"),\n        PaleGreen: Color.fromHex(\"#FF98FB98\"),\n        PaleTurquoise: Color.fromHex(\"#FFAFEEEE\"),\n        PaleVioletRed: Color.fromHex(\"#FFDB7093\"),\n        PapayaWhip: Color.fromHex(\"#FFFFEFD5\"),\n        PeachPuff: Color.fromHex(\"#FFFFDAB9\"),\n        Peru: Color.fromHex(\"#FFCD853F\"),\n        Pink: Color.fromHex(\"#FFFFC0CB\"),\n        Plum: Color.fromHex(\"#FFDDA0DD\"),\n        PowderBlue: Color.fromHex(\"#FFB0E0E6\"),\n        Purple: Color.fromHex(\"#FF800080\"),\n        Red: Color.fromHex(\"#FFFF0000\"),\n        RosyBrown: Color.fromHex(\"#FFBC8F8F\"),\n        RoyalBlue: Color.fromHex(\"#FF4169E1\"),\n        SaddleBrown: Color.fromHex(\"#FF8B4513\"),\n        Salmon: Color.fromHex(\"#FFFA8072\"),\n        SandyBrown: Color.fromHex(\"#FFF4A460\"),\n        SeaGreen: Color.fromHex(\"#FF2E8B57\"),\n        SeaShell: Color.fromHex(\"#FFFFF5EE\"),\n        Sienna: Color.fromHex(\"#FFA0522D\"),\n        Silver: Color.fromHex(\"#FFC0C0C0\"),\n        SkyBlue: Color.fromHex(\"#FF87CEEB\"),\n        SlateBlue: Color.fromHex(\"#FF6A5ACD\"),\n        SlateGray: Color.fromHex(\"#FF708090\"),\n        Snow: Color.fromHex(\"#FFFFFAFA\"),\n        SpringGreen: Color.fromHex(\"#FF00FF7F\"),\n        SteelBlue: Color.fromHex(\"#FF4682B4\"),\n        Tan: Color.fromHex(\"#FFD2B48C\"),\n        Teal: Color.fromHex(\"#FF008080\"),\n        Thistle: Color.fromHex(\"#FFD8BFD8\"),\n        Tomato: Color.fromHex(\"#FFFF6347\"),\n        Transparent: Color.fromHex(\"#00FFFFFF\"),\n        Turquoise: Color.fromHex(\"#FF40E0D0\"),\n        Violet: Color.fromHex(\"#FFEE82EE\"),\n        Wheat: Color.fromHex(\"#FFF5DEB3\"),\n        White: Color.fromHex(\"#FFFFFFFF\"),\n        WhiteSmoke: Color.fromHex(\"#FFF5F5F5\"),\n        Yellow: Color.fromHex(\"#FFFFFF00\"),\n        YellowGreen: Color.fromHex(\"#FF9ACD32\")\n    };\n\n    function parse(c: Color, s: string) {\n        if (s[0] === \"#\") {\n            parseHex(c, s);\n        } else {\n            var known = KnownColors[s];\n            c.r = known.r;\n            c.g = known.g;\n            c.b = known.b;\n            c.a = known.a;\n        }\n    }\n\n    function parseHex(c: Color, hex: string) {\n        var match;\n        if ((match = AlphaRegex.exec(hex)) != null) {\n            c.a = parseInt(match[1], 16) / 255.0;\n            c.r = parseInt(match[2], 16);\n            c.g = parseInt(match[3], 16);\n            c.b = parseInt(match[4], 16);\n        } else if ((match = NoAlphaRegex.exec(hex)) != null) {\n            c.a = 1.0;\n            c.r = parseInt(match[1], 16);\n            c.g = parseInt(match[2], 16);\n            c.b = parseInt(match[3], 16);\n        }\n    }\n}","namespace puck.element {\n    export enum DirtyFlags {\n        none = 0,\n        opacity = 1 << 0,\n        visible = 1 << 1,\n        stretch = 1 << 2,\n        transform = 1 << 3,\n\n        font = 1 << 4,\n        padding = 1 << 5,\n        extents = 1 << 6,\n        newbounds = 1 << 7,\n        invalidate = 1 << 8,\n\n        down = DirtyFlags.opacity | DirtyFlags.visible | DirtyFlags.stretch | DirtyFlags.transform,\n        up = DirtyFlags.font | DirtyFlags.padding | DirtyFlags.extents | DirtyFlags.newbounds | DirtyFlags.invalidate,\n    }\n}","/// <reference path=\"element/DirtyFlags\" />\n\nnamespace puck {\n    import IElement = puck.element.IElement;\n    import IElementState = puck.element.IElementState;\n    import IElementComposite = puck.element.IElementComposite;\n    import IElementProcessor = puck.element.IElementProcessor;\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    export class Element implements IElement {\n        state: IElementState;\n        composite: IElementComposite;\n        processor: IElementProcessor;\n        stencil: stencil.IStencil;\n\n        constructor(state?: IElementState, composite?: IElementComposite) {\n            this.init(state, composite);\n            Object.freeze(this);\n        }\n\n        init(state?: IElementState, composite?: IElementComposite) {\n            this.state = (state || new element.ElementState()).reset();\n            this.composite = (composite || new element.ElementComposite()).reset();\n            this.processor = {\n                down: element.down.Processor.instance,\n                up: element.up.Processor.instance,\n                render: element.render.Processor.instance,\n                hit: element.hit.Processor.instance,\n            };\n            this.stencil = stencil.empty;\n        }\n\n        opacity(): number;\n        opacity(value: number): this;\n        opacity(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.opacity;\n            if (this.state.opacity !== value) {\n                this.state.opacity = value;\n                this.composite.taint(DirtyFlags.opacity);\n            }\n            return this;\n        }\n\n        visible(): boolean;\n        visible(value: boolean): this;\n        visible(value?: boolean): any {\n            if (arguments.length < 1)\n                return this.state.visible;\n            if (this.state.visible !== value) {\n                this.state.visible = value;\n                this.composite.taint(DirtyFlags.visible);\n            }\n            return this;\n        }\n\n        transformOriginX(): number;\n        transformOriginX(value: number): this;\n        transformOriginX(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.transformOrigin.x;\n            if (this.state.transformOrigin.x !== value) {\n                this.state.transformOrigin.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        transformOriginY(): number;\n        transformOriginY(value: number): this;\n        transformOriginY(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.transformOrigin.y;\n            if (this.state.transformOrigin.y !== value) {\n                this.state.transformOrigin.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        resetTransform(): this {\n            la.mat3.identity(this.state.transform);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        }\n\n        setTransform(mat: Float32Array): this {\n            la.mat3.copyTo(mat, this.state.transform);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        }\n\n        applyTransform(mat: Float32Array): this {\n            la.mat3.apply(this.state.transform, mat);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        }\n    }\n}","/// <reference path=\"Element\" />\n\nnamespace puck {\n    import IContainer = puck.container.IContainer;\n    import IElement = puck.element.IElement;\n    import IContainerState = puck.container.IContainerState;\n    import IContainerComposite = puck.container.IContainerComposite;\n    import IContainerProcessor = puck.container.IContainerProcessor;\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    export class Container implements IContainer {\n        state: IContainerState;\n        composite: IContainerComposite;\n        elements: IElement[];\n        processor: IContainerProcessor;\n\n        constructor(state?: IContainerState, composite?: IContainerComposite) {\n            this.init(state, composite);\n            Object.freeze(this);\n        }\n\n        init(state?: IContainerState, composite?: IContainerComposite) {\n            this.elements = [];\n            this.state = (state || new container.ContainerState()).reset();\n            this.composite = (composite || new container.ContainerComposite()).reset();\n            this.processor = {\n                down: container.down.Processor.instance,\n                up: container.up.Processor.instance,\n                render: container.render.Processor.instance,\n                hit: container.hit.Processor.instance,\n            };\n        }\n\n        walk(reverse?: boolean): walk.IWalker<element.IElement> {\n            var els = this.elements;\n            var i = -1;\n            if (!reverse) {\n                return <walk.IWalker<element.IElement>>{\n                    next(): element.IElement {\n                        i++;\n                        return els[i];\n                    }\n                };\n            }\n\n            i = els.length;\n            return <walk.IWalker<element.IElement>>{\n                next(): element.IElement {\n                    i--;\n                    return els[i];\n                }\n            };\n        }\n\n        opacity(): number;\n        opacity(value: number): this;\n        opacity(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.opacity;\n            if (this.state.opacity !== value) {\n                this.state.opacity = value;\n                this.composite.taint(DirtyFlags.opacity);\n            }\n            return this;\n        }\n\n        visible(): boolean;\n        visible(value: boolean): this;\n        visible(value?: boolean): any {\n            if (arguments.length < 1)\n                return this.state.visible;\n            if (this.state.visible !== value) {\n                this.state.visible = value;\n                this.composite.taint(DirtyFlags.visible);\n            }\n            return this;\n        }\n\n        transformOriginX(): number;\n        transformOriginX(value: number): this;\n        transformOriginX(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.transformOrigin.x;\n            if (this.state.transformOrigin.x !== value) {\n                this.state.transformOrigin.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        transformOriginY(): number;\n        transformOriginY(value: number): this;\n        transformOriginY(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.transformOrigin.y;\n            if (this.state.transformOrigin.y !== value) {\n                this.state.transformOrigin.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        x(): number;\n        x(value: number): this;\n        x(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.offset.x;\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        y(): number;\n        y(value: number): this;\n        y(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.offset.y;\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        resetTransform(): this {\n            la.mat3.identity(this.state.transform);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        }\n\n        setTransform(mat: Float32Array): this {\n            la.mat3.copyTo(mat, this.state.transform);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        }\n\n        applyTransform(mat: Float32Array): this {\n            la.mat3.apply(this.state.transform, mat);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        }\n    }\n}","var puck;\n(function (puck) {\n    puck.version = '0.1.0';\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    (function (BrushMappingMode) {\n        BrushMappingMode[BrushMappingMode[\"relativeToBounds\"] = 0] = \"relativeToBounds\";\n        BrushMappingMode[BrushMappingMode[\"absolute\"] = 1] = \"absolute\";\n    })(puck.BrushMappingMode || (puck.BrushMappingMode = {}));\n    var BrushMappingMode = puck.BrushMappingMode;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var NoAlphaRegex = /#([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}/;\n    var AlphaRegex = /#([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}/;\n    var Color = (function () {\n        function Color(color) {\n            this.r = 0;\n            this.g = 0;\n            this.b = 0;\n            this.a = 1.0;\n            if (color instanceof Color) {\n                this.r = color.r;\n                this.g = color.g;\n                this.b = color.b;\n                this.a = color.a;\n            }\n            else if (typeof color === \"string\") {\n                parse(this, color);\n            }\n        }\n        Color.prototype.add = function (color2) {\n            var c = new Color();\n            c.r = this.r + color2.r;\n            c.g = this.g + color2.g;\n            c.b = this.b + color2.b;\n            c.a = this.a + color2.a;\n            return c;\n        };\n        Color.prototype.subtract = function (color2) {\n            var c = new Color();\n            c.r = this.r - color2.r;\n            c.g = this.g - color2.g;\n            c.b = this.b - color2.b;\n            c.a = this.a - color2.a;\n            return c;\n        };\n        Color.prototype.multiply = function (factor) {\n            var c = new Color();\n            c.r = this.r * factor;\n            c.g = this.g * factor;\n            c.b = this.b * factor;\n            c.a = this.a * factor;\n            return c;\n        };\n        Color.prototype.toString = function () {\n            var r = Math.round(this.r) || 0;\n            var g = Math.round(this.g) || 0;\n            var b = Math.round(this.b) || 0;\n            var a = this.a || 0;\n            return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n        };\n        Color.prototype.toHexString = function () {\n            var ah = (this.a * 255).toString(16), rh = this.r.toString(16), gh = this.g.toString(16), bh = this.b.toString(16);\n            return \"#\" + ah + rh + gh + bh;\n        };\n        Color.prototype.toHexStringNoAlpha = function () {\n            var rh = this.r.toString(16), gh = this.g.toString(16), bh = this.b.toString(16);\n            return \"#\" + rh + gh + bh;\n        };\n        Color.equals = function (color1, color2) {\n            if (!color1) {\n                return !color2;\n            }\n            if (!color2) {\n                return false;\n            }\n            return color1.r === color2.r\n                && color1.g === color2.g\n                && color1.b === color2.b\n                && color1.a === color2.a;\n        };\n        Color.lerp = function (start, end, p) {\n            var c = new Color();\n            c.r = start.r + (end.r - start.r) * p;\n            c.g = start.g + (end.g - start.g) * p;\n            c.b = start.b + (end.b - start.b) * p;\n            c.a = start.a + (end.a - start.a) * p;\n            return c;\n        };\n        Color.fromRgba = function (r, g, b, a) {\n            var c = new Color();\n            c.r = r;\n            c.g = g;\n            c.b = b;\n            c.a = a;\n            return c;\n        };\n        Color.fromHex = function (hex) {\n            var c = new Color();\n            parseHex(c, hex);\n            return c;\n        };\n        return Color;\n    })();\n    puck.Color = Color;\n    puck.KnownColors = {\n        AliceBlue: Color.fromHex(\"#FFF0F8FF\"),\n        AntiqueWhite: Color.fromHex(\"#FFFAEBD7\"),\n        Aqua: Color.fromHex(\"#FF00FFFF\"),\n        Aquamarine: Color.fromHex(\"#FF7FFFD4\"),\n        Azure: Color.fromHex(\"#FFF0FFFF\"),\n        Beige: Color.fromHex(\"#FFF5F5DC\"),\n        Bisque: Color.fromHex(\"#FFFFE4C4\"),\n        Black: Color.fromHex(\"#FF000000\"),\n        BlanchedAlmond: Color.fromHex(\"#FFFFEBCD\"),\n        Blue: Color.fromHex(\"#FF0000FF\"),\n        BlueViolet: Color.fromHex(\"#FF8A2BE2\"),\n        Brown: Color.fromHex(\"#FFA52A2A\"),\n        BurlyWood: Color.fromHex(\"#FFDEB887\"),\n        CadetBlue: Color.fromHex(\"#FF5F9EA0\"),\n        Chartreuse: Color.fromHex(\"#FF7FFF00\"),\n        Chocolate: Color.fromHex(\"#FFD2691E\"),\n        Coral: Color.fromHex(\"#FFFF7F50\"),\n        CornflowerBlue: Color.fromHex(\"#FF6495ED\"),\n        Cornsilk: Color.fromHex(\"#FFFFF8DC\"),\n        Crimson: Color.fromHex(\"#FFDC143C\"),\n        Cyan: Color.fromHex(\"#FF00FFFF\"),\n        DarkBlue: Color.fromHex(\"#FF00008B\"),\n        DarkCyan: Color.fromHex(\"#FF008B8B\"),\n        DarkGoldenrod: Color.fromHex(\"#FFB8860B\"),\n        DarkGray: Color.fromHex(\"#FFA9A9A9\"),\n        DarkGreen: Color.fromHex(\"#FF006400\"),\n        DarkKhaki: Color.fromHex(\"#FFBDB76B\"),\n        DarkMagenta: Color.fromHex(\"#FF8B008B\"),\n        DarkOliveGreen: Color.fromHex(\"#FF556B2F\"),\n        DarkOrange: Color.fromHex(\"#FFFF8C00\"),\n        DarkOrchid: Color.fromHex(\"#FF9932CC\"),\n        DarkRed: Color.fromHex(\"#FF8B0000\"),\n        DarkSalmon: Color.fromHex(\"#FFE9967A\"),\n        DarkSeaGreen: Color.fromHex(\"#FF8FBC8F\"),\n        DarkSlateBlue: Color.fromHex(\"#FF483D8B\"),\n        DarkSlateGray: Color.fromHex(\"#FF2F4F4F\"),\n        DarkTurquoise: Color.fromHex(\"#FF00CED1\"),\n        DarkViolet: Color.fromHex(\"#FF9400D3\"),\n        DeepPink: Color.fromHex(\"#FFFF1493\"),\n        DeepSkyBlue: Color.fromHex(\"#FF00BFFF\"),\n        DimGray: Color.fromHex(\"#FF696969\"),\n        DodgerBlue: Color.fromHex(\"#FF1E90FF\"),\n        Firebrick: Color.fromHex(\"#FFB22222\"),\n        FloralWhite: Color.fromHex(\"#FFFFFAF0\"),\n        ForestGreen: Color.fromHex(\"#FF228B22\"),\n        Fuchsia: Color.fromHex(\"#FFFF00FF\"),\n        Gainsboro: Color.fromHex(\"#FFDCDCDC\"),\n        GhostWhite: Color.fromHex(\"#FFF8F8FF\"),\n        Gold: Color.fromHex(\"#FFFFD700\"),\n        Goldenrod: Color.fromHex(\"#FFDAA520\"),\n        Gray: Color.fromHex(\"#FF808080\"),\n        Green: Color.fromHex(\"#FF008000\"),\n        GreenYellow: Color.fromHex(\"#FFADFF2F\"),\n        Honeydew: Color.fromHex(\"#FFF0FFF0\"),\n        HotPink: Color.fromHex(\"#FFFF69B4\"),\n        IndianRed: Color.fromHex(\"#FFCD5C5C\"),\n        Indigo: Color.fromHex(\"#FF4B0082\"),\n        Ivory: Color.fromHex(\"#FFFFFFF0\"),\n        Khaki: Color.fromHex(\"#FFF0E68C\"),\n        Lavender: Color.fromHex(\"#FFE6E6FA\"),\n        LavenderBlush: Color.fromHex(\"#FFFFF0F5\"),\n        LawnGreen: Color.fromHex(\"#FF7CFC00\"),\n        LemonChiffon: Color.fromHex(\"#FFFFFACD\"),\n        LightBlue: Color.fromHex(\"#FFADD8E6\"),\n        LightCoral: Color.fromHex(\"#FFF08080\"),\n        LightCyan: Color.fromHex(\"#FFE0FFFF\"),\n        LightGoldenrodYellow: Color.fromHex(\"#FFFAFAD2\"),\n        LightGray: Color.fromHex(\"#FFD3D3D3\"),\n        LightGreen: Color.fromHex(\"#FF90EE90\"),\n        LightPink: Color.fromHex(\"#FFFFB6C1\"),\n        LightSalmon: Color.fromHex(\"#FFFFA07A\"),\n        LightSeaGreen: Color.fromHex(\"#FF20B2AA\"),\n        LightSkyBlue: Color.fromHex(\"#FF87CEFA\"),\n        LightSlateGray: Color.fromHex(\"#FF778899\"),\n        LightSteelBlue: Color.fromHex(\"#FFB0C4DE\"),\n        LightYellow: Color.fromHex(\"#FFFFFFE0\"),\n        Lime: Color.fromHex(\"#FF00FF00\"),\n        LimeGreen: Color.fromHex(\"#FF32CD32\"),\n        Linen: Color.fromHex(\"#FFFAF0E6\"),\n        Magenta: Color.fromHex(\"#FFFF00FF\"),\n        Maroon: Color.fromHex(\"#FF800000\"),\n        MediumAquamarine: Color.fromHex(\"#FF66CDAA\"),\n        MediumBlue: Color.fromHex(\"#FF0000CD\"),\n        MediumOrchid: Color.fromHex(\"#FFBA55D3\"),\n        MediumPurple: Color.fromHex(\"#FF9370DB\"),\n        MediumSeaGreen: Color.fromHex(\"#FF3CB371\"),\n        MediumSlateBlue: Color.fromHex(\"#FF7B68EE\"),\n        MediumSpringGreen: Color.fromHex(\"#FF00FA9A\"),\n        MediumTurquoise: Color.fromHex(\"#FF48D1CC\"),\n        MediumVioletRed: Color.fromHex(\"#FFC71585\"),\n        MidnightBlue: Color.fromHex(\"#FF191970\"),\n        MintCream: Color.fromHex(\"#FFF5FFFA\"),\n        MistyRose: Color.fromHex(\"#FFFFE4E1\"),\n        Moccasin: Color.fromHex(\"#FFFFE4B5\"),\n        NavajoWhite: Color.fromHex(\"#FFFFDEAD\"),\n        Navy: Color.fromHex(\"#FF000080\"),\n        OldLace: Color.fromHex(\"#FFFDF5E6\"),\n        Olive: Color.fromHex(\"#FF808000\"),\n        OliveDrab: Color.fromHex(\"#FF6B8E23\"),\n        Orange: Color.fromHex(\"#FFFFA500\"),\n        OrangeRed: Color.fromHex(\"#FFFF4500\"),\n        Orchid: Color.fromHex(\"#FFDA70D6\"),\n        PaleGoldenrod: Color.fromHex(\"#FFEEE8AA\"),\n        PaleGreen: Color.fromHex(\"#FF98FB98\"),\n        PaleTurquoise: Color.fromHex(\"#FFAFEEEE\"),\n        PaleVioletRed: Color.fromHex(\"#FFDB7093\"),\n        PapayaWhip: Color.fromHex(\"#FFFFEFD5\"),\n        PeachPuff: Color.fromHex(\"#FFFFDAB9\"),\n        Peru: Color.fromHex(\"#FFCD853F\"),\n        Pink: Color.fromHex(\"#FFFFC0CB\"),\n        Plum: Color.fromHex(\"#FFDDA0DD\"),\n        PowderBlue: Color.fromHex(\"#FFB0E0E6\"),\n        Purple: Color.fromHex(\"#FF800080\"),\n        Red: Color.fromHex(\"#FFFF0000\"),\n        RosyBrown: Color.fromHex(\"#FFBC8F8F\"),\n        RoyalBlue: Color.fromHex(\"#FF4169E1\"),\n        SaddleBrown: Color.fromHex(\"#FF8B4513\"),\n        Salmon: Color.fromHex(\"#FFFA8072\"),\n        SandyBrown: Color.fromHex(\"#FFF4A460\"),\n        SeaGreen: Color.fromHex(\"#FF2E8B57\"),\n        SeaShell: Color.fromHex(\"#FFFFF5EE\"),\n        Sienna: Color.fromHex(\"#FFA0522D\"),\n        Silver: Color.fromHex(\"#FFC0C0C0\"),\n        SkyBlue: Color.fromHex(\"#FF87CEEB\"),\n        SlateBlue: Color.fromHex(\"#FF6A5ACD\"),\n        SlateGray: Color.fromHex(\"#FF708090\"),\n        Snow: Color.fromHex(\"#FFFFFAFA\"),\n        SpringGreen: Color.fromHex(\"#FF00FF7F\"),\n        SteelBlue: Color.fromHex(\"#FF4682B4\"),\n        Tan: Color.fromHex(\"#FFD2B48C\"),\n        Teal: Color.fromHex(\"#FF008080\"),\n        Thistle: Color.fromHex(\"#FFD8BFD8\"),\n        Tomato: Color.fromHex(\"#FFFF6347\"),\n        Transparent: Color.fromHex(\"#00FFFFFF\"),\n        Turquoise: Color.fromHex(\"#FF40E0D0\"),\n        Violet: Color.fromHex(\"#FFEE82EE\"),\n        Wheat: Color.fromHex(\"#FFF5DEB3\"),\n        White: Color.fromHex(\"#FFFFFFFF\"),\n        WhiteSmoke: Color.fromHex(\"#FFF5F5F5\"),\n        Yellow: Color.fromHex(\"#FFFFFF00\"),\n        YellowGreen: Color.fromHex(\"#FF9ACD32\")\n    };\n    function parse(c, s) {\n        if (s[0] === \"#\") {\n            parseHex(c, s);\n        }\n        else {\n            var known = puck.KnownColors[s];\n            c.r = known.r;\n            c.g = known.g;\n            c.b = known.b;\n            c.a = known.a;\n        }\n    }\n    function parseHex(c, hex) {\n        var match;\n        if ((match = AlphaRegex.exec(hex)) != null) {\n            c.a = parseInt(match[1], 16) / 255.0;\n            c.r = parseInt(match[2], 16);\n            c.g = parseInt(match[3], 16);\n            c.b = parseInt(match[4], 16);\n        }\n        else if ((match = NoAlphaRegex.exec(hex)) != null) {\n            c.a = 1.0;\n            c.r = parseInt(match[1], 16);\n            c.g = parseInt(match[2], 16);\n            c.b = parseInt(match[3], 16);\n        }\n    }\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        (function (DirtyFlags) {\n            DirtyFlags[DirtyFlags[\"none\"] = 0] = \"none\";\n            DirtyFlags[DirtyFlags[\"opacity\"] = 1] = \"opacity\";\n            DirtyFlags[DirtyFlags[\"visible\"] = 2] = \"visible\";\n            DirtyFlags[DirtyFlags[\"stretch\"] = 4] = \"stretch\";\n            DirtyFlags[DirtyFlags[\"transform\"] = 8] = \"transform\";\n            DirtyFlags[DirtyFlags[\"font\"] = 16] = \"font\";\n            DirtyFlags[DirtyFlags[\"padding\"] = 32] = \"padding\";\n            DirtyFlags[DirtyFlags[\"extents\"] = 64] = \"extents\";\n            DirtyFlags[DirtyFlags[\"newbounds\"] = 128] = \"newbounds\";\n            DirtyFlags[DirtyFlags[\"invalidate\"] = 256] = \"invalidate\";\n            DirtyFlags[DirtyFlags[\"down\"] = 15] = \"down\";\n            DirtyFlags[DirtyFlags[\"up\"] = 496] = \"up\";\n        })(element.DirtyFlags || (element.DirtyFlags = {}));\n        var DirtyFlags = element.DirtyFlags;\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var DirtyFlags = puck.element.DirtyFlags;\n    var Element = (function () {\n        function Element(state, composite) {\n            this.init(state, composite);\n            Object.freeze(this);\n        }\n        Element.prototype.init = function (state, composite) {\n            this.state = (state || new puck.element.ElementState()).reset();\n            this.composite = (composite || new puck.element.ElementComposite()).reset();\n            this.processor = {\n                down: puck.element.down.Processor.instance,\n                up: puck.element.up.Processor.instance,\n                render: puck.element.render.Processor.instance,\n                hit: puck.element.hit.Processor.instance,\n            };\n            this.stencil = puck.stencil.empty;\n        };\n        Element.prototype.opacity = function (value) {\n            if (arguments.length < 1)\n                return this.state.opacity;\n            if (this.state.opacity !== value) {\n                this.state.opacity = value;\n                this.composite.taint(DirtyFlags.opacity);\n            }\n            return this;\n        };\n        Element.prototype.visible = function (value) {\n            if (arguments.length < 1)\n                return this.state.visible;\n            if (this.state.visible !== value) {\n                this.state.visible = value;\n                this.composite.taint(DirtyFlags.visible);\n            }\n            return this;\n        };\n        Element.prototype.transformOriginX = function (value) {\n            if (arguments.length < 1)\n                return this.state.transformOrigin.x;\n            if (this.state.transformOrigin.x !== value) {\n                this.state.transformOrigin.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Element.prototype.transformOriginY = function (value) {\n            if (arguments.length < 1)\n                return this.state.transformOrigin.y;\n            if (this.state.transformOrigin.y !== value) {\n                this.state.transformOrigin.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Element.prototype.resetTransform = function () {\n            la.mat3.identity(this.state.transform);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        };\n        Element.prototype.setTransform = function (mat) {\n            la.mat3.copyTo(mat, this.state.transform);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        };\n        Element.prototype.applyTransform = function (mat) {\n            la.mat3.apply(this.state.transform, mat);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        };\n        return Element;\n    })();\n    puck.Element = Element;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var DirtyFlags = puck.element.DirtyFlags;\n    var Container = (function () {\n        function Container(state, composite) {\n            this.init(state, composite);\n            Object.freeze(this);\n        }\n        Container.prototype.init = function (state, composite) {\n            this.elements = [];\n            this.state = (state || new puck.container.ContainerState()).reset();\n            this.composite = (composite || new puck.container.ContainerComposite()).reset();\n            this.processor = {\n                down: puck.container.down.Processor.instance,\n                up: puck.container.up.Processor.instance,\n                render: puck.container.render.Processor.instance,\n                hit: puck.container.hit.Processor.instance,\n            };\n        };\n        Container.prototype.walk = function (reverse) {\n            var els = this.elements;\n            var i = -1;\n            if (!reverse) {\n                return {\n                    next: function () {\n                        i++;\n                        return els[i];\n                    }\n                };\n            }\n            i = els.length;\n            return {\n                next: function () {\n                    i--;\n                    return els[i];\n                }\n            };\n        };\n        Container.prototype.opacity = function (value) {\n            if (arguments.length < 1)\n                return this.state.opacity;\n            if (this.state.opacity !== value) {\n                this.state.opacity = value;\n                this.composite.taint(DirtyFlags.opacity);\n            }\n            return this;\n        };\n        Container.prototype.visible = function (value) {\n            if (arguments.length < 1)\n                return this.state.visible;\n            if (this.state.visible !== value) {\n                this.state.visible = value;\n                this.composite.taint(DirtyFlags.visible);\n            }\n            return this;\n        };\n        Container.prototype.transformOriginX = function (value) {\n            if (arguments.length < 1)\n                return this.state.transformOrigin.x;\n            if (this.state.transformOrigin.x !== value) {\n                this.state.transformOrigin.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Container.prototype.transformOriginY = function (value) {\n            if (arguments.length < 1)\n                return this.state.transformOrigin.y;\n            if (this.state.transformOrigin.y !== value) {\n                this.state.transformOrigin.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Container.prototype.x = function (value) {\n            if (arguments.length < 1)\n                return this.state.offset.x;\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Container.prototype.y = function (value) {\n            if (arguments.length < 1)\n                return this.state.offset.y;\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Container.prototype.resetTransform = function () {\n            la.mat3.identity(this.state.transform);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        };\n        Container.prototype.setTransform = function (mat) {\n            la.mat3.copyTo(mat, this.state.transform);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        };\n        Container.prototype.applyTransform = function (mat) {\n            la.mat3.apply(this.state.transform, mat);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        };\n        return Container;\n    })();\n    puck.Container = Container;\n})(puck || (puck = {}));\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar puck;\n(function (puck) {\n    var DirtyFlags = puck.element.DirtyFlags;\n    var Visual = (function (_super) {\n        __extends(Visual, _super);\n        function Visual(state, composite) {\n            _super.call(this, state, composite);\n            this.$fillwatch = null;\n            this.$strokewatch = null;\n        }\n        Visual.prototype.init = function (state, composite) {\n            this.state = (state || new puck.visual.VisualState()).reset();\n            this.composite = (composite || new puck.visual.VisualComposite()).reset();\n            this.processor = {\n                down: puck.element.down.Processor.instance,\n                up: puck.element.up.Processor.instance,\n                render: puck.visual.render.Processor.instance,\n                hit: puck.visual.hit.Processor.instance,\n            };\n            this.stencil = puck.stencil.visual;\n        };\n        Visual.prototype.fill = function (value) {\n            var _this = this;\n            if (arguments.length < 1)\n                return this.state.fill;\n            if (this.$fillwatch) {\n                this.$fillwatch.unwatch();\n                this.$fillwatch = null;\n            }\n            if ((!value) === (!this.state.fill)) {\n                this.composite.taint(DirtyFlags.extents).invalidate();\n            }\n            if (value !== this.state.fill) {\n                this.state.fill = value;\n                this.composite.invalidate();\n            }\n            if (value) {\n                this.$fillwatch = value.watch(function () { return _this.composite.invalidate(); });\n            }\n            return this;\n        };\n        Visual.prototype.stroke = function (value) {\n            var _this = this;\n            if (arguments.length < 1)\n                return this.state.stroke;\n            if (this.$strokewatch) {\n                this.$strokewatch.unwatch();\n                this.$strokewatch = null;\n            }\n            if ((!value) === (!this.state.stroke)) {\n                this.composite.taint(DirtyFlags.padding).invalidate();\n            }\n            if (value !== this.state.stroke) {\n                this.state.stroke = value;\n                this.composite.invalidate();\n            }\n            if (value) {\n                this.$strokewatch = value.watch(function () { return _this.composite.invalidate(); });\n            }\n            return this;\n        };\n        Visual.prototype.strokeThickness = function (value) {\n            if (arguments.length < 1)\n                return this.state.strokeThickness;\n            if (value !== this.state.strokeThickness) {\n                this.state.strokeThickness = value;\n                this.composite.taint(DirtyFlags.padding);\n            }\n            return this;\n        };\n        Visual.prototype.sub = function (attr, func) {\n            var getFunc = this[attr];\n            if (typeof getFunc !== \"function\") {\n                throw new Error(\"cannot modify sub-property, unknown attribute: \" + attr);\n            }\n            func(getFunc.call(this));\n            return this;\n        };\n        return Visual;\n    })(puck.Element);\n    puck.Visual = Visual;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var stencil;\n    (function (stencil) {\n        stencil.visual = {\n            draft: function (bag) {\n                var state = bag.state, size = state.size;\n                la.rect.init(0, 0, size.width, size.height, bag.fillRect);\n                la.rect.init(0, 0, size.width, size.height, bag.strokeRect);\n                if (state.stroke && state.strokeThickness > 0) {\n                    var ht = state.strokeThickness / 2;\n                    la.rect.shrink(bag.fillRect, la.padding.init(ht, ht, ht, ht));\n                }\n            },\n            draw: function (ctx, bag) {\n                ctx.raw.beginPath();\n                ctx.raw.closePath();\n            },\n        };\n    })(stencil = puck.stencil || (puck.stencil = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var DirtyFlags = puck.element.DirtyFlags;\n    var PI2 = Math.PI * 2;\n    var Ellipse = (function (_super) {\n        __extends(Ellipse, _super);\n        function Ellipse() {\n            _super.apply(this, arguments);\n        }\n        Ellipse.prototype.init = function (state, composite) {\n            _super.prototype.init.call(this, state, composite);\n            this.stencil = ellipseStencil;\n        };\n        Ellipse.prototype.x = function (value) {\n            if (arguments.length < 1)\n                return this.state.offset.x;\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Ellipse.prototype.y = function (value) {\n            if (arguments.length < 1)\n                return this.state.offset.y;\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Ellipse.prototype.width = function (value) {\n            if (arguments.length < 1)\n                return this.state.size.width;\n            if (this.state.size.width !== value) {\n                this.state.size.width = value;\n                this.composite.taint(DirtyFlags.transform | DirtyFlags.extents);\n            }\n            return this;\n        };\n        Ellipse.prototype.height = function (value) {\n            if (arguments.length < 1)\n                return this.state.size.height;\n            if (this.state.size.height !== value) {\n                this.state.size.height = value;\n                this.composite.taint(DirtyFlags.transform | DirtyFlags.extents);\n            }\n            return this;\n        };\n        return Ellipse;\n    })(puck.Visual);\n    puck.Ellipse = Ellipse;\n    var ellipseStencil = {\n        draft: puck.stencil.visual.draft,\n        draw: function (ctx, bag) {\n            var fr = bag.fillRect;\n            if (fr.width <= 0 || fr.height <= 0) {\n                return;\n            }\n            var rx = fr.width / 2, ry = fr.height / 2;\n            var raw = ctx.raw;\n            raw.beginPath();\n            raw.ellipse(fr.x + rx, fr.y + ry, rx, ry, 0, 0, PI2, false);\n            raw.closePath();\n        }\n    };\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    (function (FillRule) {\n        FillRule[FillRule[\"evenodd\"] = 0] = \"evenodd\";\n        FillRule[FillRule[\"nonzero\"] = 1] = \"nonzero\";\n    })(puck.FillRule || (puck.FillRule = {}));\n    var FillRule = puck.FillRule;\n    (function (PenLineJoin) {\n        PenLineJoin[PenLineJoin[\"miter\"] = 0] = \"miter\";\n        PenLineJoin[PenLineJoin[\"bevel\"] = 1] = \"bevel\";\n        PenLineJoin[PenLineJoin[\"round\"] = 2] = \"round\";\n    })(puck.PenLineJoin || (puck.PenLineJoin = {}));\n    var PenLineJoin = puck.PenLineJoin;\n    (function (PenLineCap) {\n        PenLineCap[PenLineCap[\"flat\"] = 0] = \"flat\";\n        PenLineCap[PenLineCap[\"square\"] = 1] = \"square\";\n        PenLineCap[PenLineCap[\"round\"] = 2] = \"round\";\n        PenLineCap[PenLineCap[\"triangle\"] = 3] = \"triangle\";\n    })(puck.PenLineCap || (puck.PenLineCap = {}));\n    var PenLineCap = puck.PenLineCap;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    puck.FontStyle = {\n        normal: \"normal\",\n        italic: \"italic\",\n        oblique: \"oblique\"\n    };\n    puck.FontStretch = {\n        ultraCondensed: \"ultra-condensed\",\n        extraCondensed: \"extra-condensed\",\n        condensed: \"condensed\",\n        semiCondensed: \"semi-condensed\",\n        normal: \"normal\",\n        semiExpanded: \"semi-expanded\",\n        expanded: \"expanded\",\n        extraExpanded: \"extra-expanded\",\n        ultraExpanded: \"ultra-expanded\"\n    };\n    (function (FontWeight) {\n        FontWeight[FontWeight[\"thin\"] = 100] = \"thin\";\n        FontWeight[FontWeight[\"extraLight\"] = 200] = \"extraLight\";\n        FontWeight[FontWeight[\"light\"] = 300] = \"light\";\n        FontWeight[FontWeight[\"normal\"] = 400] = \"normal\";\n        FontWeight[FontWeight[\"medium\"] = 500] = \"medium\";\n        FontWeight[FontWeight[\"semiBold\"] = 600] = \"semiBold\";\n        FontWeight[FontWeight[\"bold\"] = 700] = \"bold\";\n        FontWeight[FontWeight[\"extraBold\"] = 800] = \"extraBold\";\n        FontWeight[FontWeight[\"black\"] = 900] = \"black\";\n        FontWeight[FontWeight[\"extraBlack\"] = 950] = \"extraBlack\";\n    })(puck.FontWeight || (puck.FontWeight = {}));\n    var FontWeight = puck.FontWeight;\n    puck.defaultFont = {\n        family: \"\\\"Segoe UI\\\",Roboto,Helvetica,Arial,sans-serif\",\n        size: 14,\n        stretch: puck.FontStretch.normal,\n        style: puck.FontStyle.normal,\n        weight: FontWeight.normal,\n        toString: function () {\n            return puck.font.toString(puck.defaultFont);\n        },\n    };\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var FrameDebug = (function () {\n        function FrameDebug() {\n            this.$onBeginProcess = null;\n            this.$onEndProcess = null;\n            this.$onBeginRender = null;\n            this.$onEndRender = null;\n        }\n        FrameDebug.prototype.onBeginProcess = function (cb) {\n            this.$onBeginProcess = cb;\n            return this;\n        };\n        FrameDebug.prototype.onEndProcess = function (cb) {\n            this.$onEndProcess = cb;\n            return this;\n        };\n        FrameDebug.prototype.onBeginRender = function (cb) {\n            this.$onBeginRender = cb;\n            return this;\n        };\n        FrameDebug.prototype.onEndRender = function (cb) {\n            this.$onEndRender = cb;\n            return this;\n        };\n        FrameDebug.prototype.beginProcess = function () {\n            this.$onBeginProcess && this.$onBeginProcess();\n        };\n        FrameDebug.prototype.endProcess = function () {\n            this.$onEndProcess && this.$onEndProcess();\n        };\n        FrameDebug.prototype.beginRender = function () {\n            this.$onBeginRender && this.$onBeginRender();\n        };\n        FrameDebug.prototype.endRender = function () {\n            this.$onEndRender && this.$onEndRender();\n        };\n        return FrameDebug;\n    })();\n    puck.FrameDebug = FrameDebug;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var GradientBrush = (function () {\n        function GradientBrush() {\n            var _this = this;\n            this.$cachedBrush = null;\n            this.$cachedBounds = la.rect.init(0, 0, 0, 0);\n            this.$changer = new puck.internal.WatchChanger();\n            this.$stops = new puck.GradientStops();\n            this.$spreadMethod = puck.GradientSpreadMethod.pad;\n            this.$mappingMode = puck.BrushMappingMode.relativeToBounds;\n            this.$stops.watch(function () { return _this.$changer.on(); });\n        }\n        GradientBrush.prototype.spreadMethod = function (value) {\n            if (arguments.length < 1)\n                return this.$spreadMethod;\n            if (this.$spreadMethod !== value) {\n                this.$spreadMethod = value;\n                this.$changer.on();\n            }\n            return this;\n        };\n        GradientBrush.prototype.mappingMode = function (value) {\n            if (arguments.length < 1)\n                return this.$mappingMode;\n            if (this.$mappingMode !== value) {\n                this.$mappingMode = value;\n                this.$changer.on();\n            }\n            return this;\n        };\n        GradientBrush.prototype.stops = function () {\n            return this.$stops;\n        };\n        GradientBrush.prototype.sub = function (attr, func) {\n            var getFunc = this[attr];\n            if (typeof getFunc !== \"function\") {\n                throw new Error(\"cannot modify sub-property, unknown attribute: \" + attr);\n            }\n            func(getFunc.call(this));\n            return this;\n        };\n        GradientBrush.prototype.watch = function (onChanged) {\n            return this.$changer.watch(onChanged);\n        };\n        GradientBrush.prototype.setup = function (ctx, region) {\n            if (this.$cachedBrush && la.rect.equal(this.$cachedBounds, region))\n                return;\n            la.rect.copyTo(region, this.$cachedBounds);\n            this.$cachedBrush = this.createBrush(ctx, region);\n        };\n        GradientBrush.prototype.toHtml5Object = function () {\n            return this.$cachedBrush;\n        };\n        GradientBrush.prototype.createBrush = function (ctx, region) {\n            switch (this.$spreadMethod) {\n                case puck.GradientSpreadMethod.pad:\n                    return this.createPad(ctx, region);\n                default:\n                case puck.GradientSpreadMethod.reflect:\n                    return this.createReflect(ctx, region);\n                case puck.GradientSpreadMethod.repeat:\n                    return this.createRepeat(ctx, region);\n            }\n        };\n        GradientBrush.prototype.mapPoint = function (region, point) {\n            var mapped = { x: point.x, y: point.y };\n            if (this.$mappingMode === puck.BrushMappingMode.relativeToBounds) {\n                mapped.x *= region.width;\n                mapped.y *= region.height;\n            }\n            mapped.x += region.x;\n            mapped.y += region.y;\n            return mapped;\n        };\n        return GradientBrush;\n    })();\n    puck.GradientBrush = GradientBrush;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    (function (GradientSpreadMethod) {\n        GradientSpreadMethod[GradientSpreadMethod[\"pad\"] = 0] = \"pad\";\n        GradientSpreadMethod[GradientSpreadMethod[\"reflect\"] = 1] = \"reflect\";\n        GradientSpreadMethod[GradientSpreadMethod[\"repeat\"] = 2] = \"repeat\";\n    })(puck.GradientSpreadMethod || (puck.GradientSpreadMethod = {}));\n    var GradientSpreadMethod = puck.GradientSpreadMethod;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var GradientStop = (function () {\n        function GradientStop(color, offset) {\n            this.color = color;\n            this.offset = offset;\n            Object.freeze(this);\n        }\n        return GradientStop;\n    })();\n    puck.GradientStop = GradientStop;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var PuckArray = (function () {\n        function PuckArray() {\n            this.$backing = [];\n            this.$changer = new puck.internal.WatchChanger();\n        }\n        Object.defineProperty(PuckArray.prototype, \"length\", {\n            get: function () {\n                return this.$backing.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PuckArray.prototype.clear = function () {\n            this.$backing.length = 0;\n            this.$changer.on();\n            return this;\n        };\n        PuckArray.prototype.add = function (item) {\n            this.$backing.push(item);\n            Object.freeze(item);\n            this.$changer.on();\n            return this;\n        };\n        PuckArray.prototype.addMany = function (items) {\n            var backing = this.$backing;\n            for (var i = 0; i < items.length; i++) {\n                Object.freeze(items[i]);\n            }\n            backing.push.apply(backing, items);\n            this.$changer.on();\n            return this;\n        };\n        PuckArray.prototype.insert = function (index, item) {\n            this.$backing.splice(index, 0, item);\n            Object.freeze(item);\n            this.$changer.on();\n            return this;\n        };\n        PuckArray.prototype.insertMany = function (index, items) {\n            for (var i = 0; i < items.length; i++) {\n                Object.freeze(items[i]);\n            }\n            var backing = this.$backing;\n            for (var i = items.length - 1; i >= 0; i--) {\n                backing.splice(index, 0, items[i]);\n            }\n            this.$changer.on();\n            return this;\n        };\n        PuckArray.prototype.edit = function (oldItem, newItem) {\n            return this.editAt(this.$backing.indexOf(oldItem), newItem);\n        };\n        PuckArray.prototype.editAt = function (index, newItem) {\n            var backing = this.$backing;\n            if (index < 0 && index >= backing.length)\n                return this;\n            backing[index] = newItem;\n            Object.freeze(newItem);\n            this.$changer.on();\n            return this;\n        };\n        PuckArray.prototype.remove = function (item) {\n            return this.removeAt(this.$backing.indexOf(item));\n        };\n        PuckArray.prototype.removeAt = function (index) {\n            var backing = this.$backing;\n            if (index < 0 && index >= backing.length)\n                return this;\n            backing.splice(index, 1);\n            this.$changer.on();\n            return this;\n        };\n        PuckArray.prototype.watch = function (onChanged) {\n            return this.$changer.watch(onChanged);\n        };\n        PuckArray.prototype.iter = function () {\n            return PuckArray.arrayIter(this.$backing);\n        };\n        PuckArray.arrayIter = function (arr) {\n            var i = -1;\n            return {\n                next: function () {\n                    i++;\n                    if (i >= arr.length)\n                        return { done: true };\n                    return { done: false, value: arr[i] };\n                }\n            };\n        };\n        return PuckArray;\n    })();\n    puck.PuckArray = PuckArray;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var GradientStops = (function (_super) {\n        __extends(GradientStops, _super);\n        function GradientStops() {\n            _super.apply(this, arguments);\n        }\n        GradientStops.prototype.paddedIter = function () {\n            var min = null;\n            var max = null;\n            var tmp = this.$backing.slice(0);\n            for (var i = 0; i < tmp.length; i++) {\n                var cur = tmp[i];\n                tmp.push(cur);\n                if (!min || cur.offset < min.offset)\n                    min = cur;\n                if (!max || cur.offset > max.offset)\n                    max = cur;\n            }\n            if (!!min)\n                tmp.unshift({ offset: 0, color: min.color });\n            if (!!max)\n                tmp.push({ offset: 1, color: max.color });\n            return puck.PuckArray.arrayIter(tmp);\n        };\n        return GradientStops;\n    })(puck.PuckArray);\n    puck.GradientStops = GradientStops;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var DirtyFlags = puck.element.DirtyFlags;\n    var Image = (function (_super) {\n        __extends(Image, _super);\n        function Image(state, composite) {\n            _super.call(this, state, composite);\n        }\n        Image.prototype.init = function (state, composite) {\n            var _this = this;\n            this.state = (state || new puck.image.ImageState()).reset();\n            this.composite = (composite || new puck.image.ImageComposite()).reset();\n            this.processor = {\n                down: puck.image.down.Processor.instance,\n                up: puck.image.up.Processor.instance,\n                render: puck.element.render.Processor.instance,\n                hit: puck.image.hit.Processor.instance,\n            };\n            this.stencil = imageStencil;\n            this.state.source.watch(function () { return _this.onSourceChanged(); }, function (e) { return _this.onSourceErrored(e); }, function () { return _this.onSourceLoaded(); });\n        };\n        Image.prototype.x = function (value) {\n            if (arguments.length < 1)\n                return this.state.offset.x;\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Image.prototype.y = function (value) {\n            if (arguments.length < 1)\n                return this.state.offset.y;\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Image.prototype.width = function (value) {\n            if (arguments.length < 1)\n                return this.state.size.width;\n            if (this.state.size.width !== value) {\n                this.state.size.width = value;\n                this.composite.taint(DirtyFlags.stretch | DirtyFlags.transform);\n            }\n            return this;\n        };\n        Image.prototype.height = function (value) {\n            if (arguments.length < 1)\n                return this.state.size.height;\n            if (this.state.size.height !== value) {\n                this.state.size.height = value;\n                this.composite.taint(DirtyFlags.stretch | DirtyFlags.transform);\n            }\n            return this;\n        };\n        Image.prototype.stretch = function (value) {\n            if (arguments.length < 1)\n                return this.state.stretch;\n            if (this.state.stretch !== value) {\n                this.state.stretch = value;\n                this.composite.taint(DirtyFlags.stretch);\n            }\n            return this;\n        };\n        Image.prototype.sourceUri = function (value) {\n            if (arguments.length < 1)\n                return this.state.source.uri;\n            this.state.source.uri = value;\n            return this;\n        };\n        Image.prototype.onSourceChanged = function () {\n            this.setNaturalSize(0, 0);\n        };\n        Image.prototype.onSourceErrored = function (err) {\n            console.error(\"error loading image\", err);\n        };\n        Image.prototype.onSourceLoaded = function () {\n            var source = this.state.source;\n            this.setNaturalSize(source.naturalWidth, source.naturalHeight);\n        };\n        Image.prototype.setNaturalSize = function (width, height) {\n            var naturalSize = this.state.natural;\n            naturalSize.width = width;\n            naturalSize.height = height;\n            this.composite.taint(DirtyFlags.stretch | DirtyFlags.extents).invalidate();\n        };\n        return Image;\n    })(puck.Element);\n    puck.Image = Image;\n    var imageStencil = {\n        draft: function (bag) {\n        },\n        draw: function (ctx, bag) {\n            var state = bag.state, comp = bag.composite;\n            ctx.preapply(comp.stretchTransform);\n            state.source.draw(ctx.raw);\n        },\n    };\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var Layer = (function (_super) {\n        __extends(Layer, _super);\n        function Layer() {\n            _super.apply(this, arguments);\n        }\n        Layer.prototype.width = function () {\n            return this.$ctx.raw.canvas.width;\n        };\n        Layer.prototype.height = function () {\n            return this.$ctx.raw.canvas.height;\n        };\n        Layer.prototype.init = function (state, composite) {\n            var _this = this;\n            _super.prototype.init.call(this, state, composite);\n            this.frameDebug = new puck.FrameDebug();\n            this.$ctx = new puck.render.RenderContext();\n            this.$timer = new puck.Timer(function (now) { return _this.onTick(now); });\n        };\n        Layer.prototype.attach = function (ctx) {\n            this.$ctx.init(ctx);\n            return this;\n        };\n        Layer.prototype.activate = function () {\n            this.$timer.enable();\n            return this;\n        };\n        Layer.prototype.deactivate = function () {\n            this.$timer.disable();\n            return this;\n        };\n        Layer.prototype.process = function () {\n            this.frameDebug.beginProcess();\n            puck.engine.process(this);\n            this.frameDebug.endProcess();\n            return this;\n        };\n        Layer.prototype.render = function () {\n            var ctx = this.$ctx, paint = this.composite.paint, raw = ctx.raw;\n            this.frameDebug.beginRender();\n            raw.fillStyle = \"#ffffff\";\n            raw.fillRect(paint.x, paint.y, paint.width, paint.height);\n            puck.engine.render(this, ctx, paint);\n            this.frameDebug.endRender();\n            return this;\n        };\n        Layer.prototype.onTick = function (now) {\n            this.process()\n                .render();\n        };\n        return Layer;\n    })(puck.Container);\n    puck.Layer = Layer;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var fallbackColor = puck.Color.fromHex(\"#FF000000\");\n    var LinearGradientBrush = (function (_super) {\n        __extends(LinearGradientBrush, _super);\n        function LinearGradientBrush() {\n            _super.apply(this, arguments);\n            this.$start = { x: 0, y: 0 };\n            this.$end = { x: 0, y: 1 };\n        }\n        LinearGradientBrush.prototype.start = function (value) {\n            if (arguments.length < 1)\n                return this.$start;\n            if (this.$start !== value) {\n                this.$start = value;\n                Object.freeze(value);\n                this.$changer.on();\n            }\n            return this;\n        };\n        LinearGradientBrush.prototype.end = function (value) {\n            if (arguments.length < 1)\n                return this.$end;\n            if (this.$end !== value) {\n                this.$end = value;\n                Object.freeze(value);\n                this.$changer.on();\n            }\n            return this;\n        };\n        LinearGradientBrush.prototype.createPad = function (ctx, region) {\n            var mstart = this.mapPoint(region, this.$start);\n            var mend = this.mapPoint(region, this.$end);\n            var grd = ctx.createLinearGradient(mstart.x, mstart.y, mend.x, mend.y);\n            for (var it = this.stops().iter(), result = it.next(); !result.done; result = it.next()) {\n                addColorStop(grd, result.value);\n            }\n            return grd;\n        };\n        LinearGradientBrush.prototype.createReflect = function (ctx, region) {\n            var mstart = this.mapPoint(region, this.$start);\n            var mend = this.mapPoint(region, this.$end);\n            return this.createInterpolated(ctx, puck.linearGradient.createRepeatInterpolator(mstart, mend, region));\n        };\n        LinearGradientBrush.prototype.createRepeat = function (ctx, region) {\n            var mstart = this.mapPoint(region, this.$start);\n            var mend = this.mapPoint(region, this.$end);\n            return this.createInterpolated(ctx, puck.linearGradient.createReflectInterpolator(mstart, mend, region));\n        };\n        LinearGradientBrush.prototype.createInterpolated = function (ctx, interpolator) {\n            var grd = ctx.createLinearGradient(interpolator.x0, interpolator.y0, interpolator.x1, interpolator.y1);\n            var allStops = this.stops().paddedIter();\n            for (; interpolator.step();) {\n                for (var result = allStops.next(); !result.done; result = allStops.next()) {\n                    var cur = result.value;\n                    var inter = {\n                        color: cur.color,\n                        offset: interpolator.interpolate(cur.offset)\n                    };\n                    if (inter.offset >= 0 && inter.offset <= 1)\n                        addColorStop(grd, inter);\n                }\n            }\n            return grd;\n        };\n        return LinearGradientBrush;\n    })(puck.GradientBrush);\n    puck.LinearGradientBrush = LinearGradientBrush;\n    function addColorStop(grd, stop) {\n        var offset = Math.min(1.0, Math.max(0.0, stop.offset));\n        var color = (stop.color || fallbackColor).toString();\n        grd.addColorStop(offset, color);\n    }\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var DirtyFlags = puck.element.DirtyFlags;\n    var Path = (function (_super) {\n        __extends(Path, _super);\n        function Path(state, composite) {\n            _super.call(this, state, composite);\n        }\n        Path.prototype.init = function (state, composite) {\n            this.state = (state || new puck.path.PathState()).reset();\n            this.composite = (composite || new puck.path.PathComposite()).reset();\n            this.processor = {\n                down: puck.path.down.Processor.instance,\n                up: puck.path.up.Processor.instance,\n                render: puck.path.render.Processor.instance,\n                hit: puck.path.hit.Processor.instance,\n            };\n            this.stencil = puck.stencil.path;\n        };\n        Path.prototype.x = function (value) {\n            if (arguments.length < 1)\n                return this.state.offset.x;\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Path.prototype.y = function (value) {\n            if (arguments.length < 1)\n                return this.state.offset.y;\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Path.prototype.width = function (value) {\n            if (arguments.length < 1)\n                return this.state.size.width;\n            if (this.state.size.width !== value) {\n                this.state.size.width = value;\n                this.composite.taint(DirtyFlags.stretch | DirtyFlags.transform);\n            }\n            return this;\n        };\n        Path.prototype.height = function (value) {\n            if (arguments.length < 1)\n                return this.state.size.height;\n            if (this.state.size.height !== value) {\n                this.state.size.height = value;\n                this.composite.taint(DirtyFlags.stretch | DirtyFlags.transform);\n            }\n            return this;\n        };\n        Path.prototype.stretch = function (value) {\n            if (arguments.length < 1)\n                return this.state.stretch;\n            if (this.state.stretch !== value) {\n                this.state.stretch = value;\n                this.composite.taint(DirtyFlags.stretch);\n            }\n            return this;\n        };\n        Path.prototype.path = function (value) {\n            if (arguments.length < 1)\n                return this.state.path;\n            if (this.state.path !== value) {\n                this.state.path = value;\n                this.composite.bounder.setPath(value);\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        };\n        Path.prototype.fillRule = function (value) {\n            if (arguments.length < 1)\n                return this.state.fillRule;\n            if (this.state.fillRule !== value) {\n                this.state.fillRule = value;\n                this.composite.invalidate();\n            }\n            return this;\n        };\n        Path.prototype.strokeLineCap = function (value) {\n            if (arguments.length < 1)\n                return this.state.strokeLineCap;\n            if (this.state.strokeLineCap !== value) {\n                this.state.strokeLineCap = value;\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        };\n        Path.prototype.strokeLineJoin = function (value) {\n            if (arguments.length < 1)\n                return this.state.strokeLineJoin;\n            if (this.state.strokeLineJoin !== value) {\n                this.state.strokeLineJoin = value;\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        };\n        Path.prototype.strokeMiterLimit = function (value) {\n            if (arguments.length < 1)\n                return this.state.strokeMiterLimit;\n            if (this.state.strokeMiterLimit !== value) {\n                this.state.strokeMiterLimit = value;\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        };\n        return Path;\n    })(puck.Visual);\n    puck.Path = Path;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var Points = (function (_super) {\n        __extends(Points, _super);\n        function Points() {\n            _super.apply(this, arguments);\n        }\n        return Points;\n    })(puck.PuckArray);\n    puck.Points = Points;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var DirtyFlags = puck.element.DirtyFlags;\n    var Polyline = (function (_super) {\n        __extends(Polyline, _super);\n        function Polyline(state, composite) {\n            _super.call(this, state, composite);\n        }\n        Polyline.prototype.init = function (state, composite) {\n            var _this = this;\n            this.state = (state || new puck.polyline.PolylineState()).reset();\n            this.composite = (composite || new puck.path.PathComposite()).reset();\n            this.processor = {\n                down: puck.polyline.down.Processor.instance,\n                up: puck.path.up.Processor.instance,\n                render: puck.path.render.Processor.instance,\n                hit: puck.path.hit.Processor.instance,\n            };\n            this.stencil = puck.stencil.path;\n            this.state.points.watch(function () {\n                if (_this.state.path)\n                    _this.state.path.reset();\n            });\n        };\n        Polyline.prototype.points = function () {\n            return this.state.points;\n        };\n        Polyline.prototype.closed = function (value) {\n            if (arguments.length < 1)\n                return this.state.closed;\n            if (this.state.closed !== value) {\n                this.state.closed = value;\n                this.composite.invalidate();\n            }\n            return this;\n        };\n        Polyline.prototype.x = function (value) {\n            if (arguments.length < 1)\n                return this.state.offset.x;\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Polyline.prototype.y = function (value) {\n            if (arguments.length < 1)\n                return this.state.offset.y;\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Polyline.prototype.width = function (value) {\n            if (arguments.length < 1)\n                return this.state.size.width;\n            if (this.state.size.width !== value) {\n                this.state.size.width = value;\n                this.composite.taint(DirtyFlags.stretch | DirtyFlags.transform);\n            }\n            return this;\n        };\n        Polyline.prototype.height = function (value) {\n            if (arguments.length < 1)\n                return this.state.size.height;\n            if (this.state.size.height !== value) {\n                this.state.size.height = value;\n                this.composite.taint(DirtyFlags.stretch | DirtyFlags.transform);\n            }\n            return this;\n        };\n        Polyline.prototype.stretch = function (value) {\n            if (arguments.length < 1)\n                return this.state.stretch;\n            if (this.state.stretch !== value) {\n                this.state.stretch = value;\n                this.composite.taint(DirtyFlags.stretch);\n            }\n            return this;\n        };\n        Polyline.prototype.path = function (value) {\n            if (arguments.length < 1)\n                return this.state.path;\n            if (this.state.path !== value) {\n                this.state.path = value;\n                this.composite.bounder.setPath(value);\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        };\n        Polyline.prototype.fillRule = function (value) {\n            if (arguments.length < 1)\n                return this.state.fillRule;\n            if (this.state.fillRule !== value) {\n                this.state.fillRule = value;\n                this.composite.invalidate();\n            }\n            return this;\n        };\n        Polyline.prototype.strokeLineCap = function (value) {\n            if (arguments.length < 1)\n                return this.state.strokeLineCap;\n            if (this.state.strokeLineCap !== value) {\n                this.state.strokeLineCap = value;\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        };\n        Polyline.prototype.strokeLineJoin = function (value) {\n            if (arguments.length < 1)\n                return this.state.strokeLineJoin;\n            if (this.state.strokeLineJoin !== value) {\n                this.state.strokeLineJoin = value;\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        };\n        Polyline.prototype.strokeMiterLimit = function (value) {\n            if (arguments.length < 1)\n                return this.state.strokeMiterLimit;\n            if (this.state.strokeMiterLimit !== value) {\n                this.state.strokeMiterLimit = value;\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        };\n        return Polyline;\n    })(puck.Visual);\n    puck.Polyline = Polyline;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var tmpCanvas = document.createElement('canvas');\n    var tmpCtx = tmpCanvas.getContext('2d');\n    var epsilon = 1E-10;\n    var fallbackColor = puck.Color.fromHex(\"#FF000000\");\n    var RadialGradientBrush = (function (_super) {\n        __extends(RadialGradientBrush, _super);\n        function RadialGradientBrush() {\n            _super.apply(this, arguments);\n            this.$center = { x: 0.5, y: 0.5 };\n            this.$origin = { x: 0.5, y: 0.5 };\n            this.$radius = { x: 0.5, y: 0.5 };\n        }\n        RadialGradientBrush.prototype.center = function (value) {\n            if (arguments.length < 1)\n                return this.$center;\n            if (this.$center !== value) {\n                this.$center = value;\n                Object.freeze(value);\n                this.$changer.on();\n            }\n            return this;\n        };\n        RadialGradientBrush.prototype.origin = function (value) {\n            if (arguments.length < 1)\n                return this.$origin;\n            if (this.$origin !== value) {\n                this.$origin = value;\n                Object.freeze(value);\n                this.$changer.on();\n            }\n            return this;\n        };\n        RadialGradientBrush.prototype.radiusX = function (value) {\n            if (arguments.length < 1)\n                return this.$radius.x;\n            if (this.$radius.x !== value) {\n                this.$radius.x = value;\n                this.$changer.on();\n            }\n            return this;\n        };\n        RadialGradientBrush.prototype.radiusY = function (value) {\n            if (arguments.length < 1)\n                return this.$radius.y;\n            if (this.$radius.y !== value) {\n                this.$radius.y = value;\n                this.$changer.on();\n            }\n            return this;\n        };\n        RadialGradientBrush.prototype.createPad = function (ctx, region) {\n            var data = this.getPointData(region);\n            var grd = (!data.balanced ? tmpCtx : ctx).createRadialGradient(data.x0, data.y0, 0, data.x1, data.y1, data.r1);\n            for (var it = this.stops().iter(), result = it.next(); !result.done; result = it.next()) {\n                addColorStop(grd, result.value);\n            }\n            return this.fit(ctx, grd, data, region);\n        };\n        RadialGradientBrush.prototype.createReflect = function (ctx, region) {\n            var data = this.getPointData(region);\n            return this.createInterpolated(data, region, false);\n        };\n        RadialGradientBrush.prototype.createRepeat = function (ctx, region) {\n            var data = this.getPointData(region);\n            return this.createInterpolated(data, region, true);\n        };\n        RadialGradientBrush.prototype.createInterpolated = function (data, bounds, reflect) {\n            tmpCanvas.width = bounds.width;\n            tmpCanvas.height = bounds.height;\n            tmpCtx.save();\n            if (!data.balanced)\n                tmpCtx.scale(data.sx, data.sy);\n            tmpCtx.globalCompositeOperation = \"destination-over\";\n            var inverted = false;\n            var allStops = this.stops().paddedIter();\n            for (var extender = puck.radialGradient.createExtender(data, bounds); extender.step(); inverted = !inverted) {\n                var grd = extender.createGradient(tmpCtx);\n                for (var result = allStops.next(); !result.done; result = allStops.next()) {\n                    var cur = result.value;\n                    var inter = {\n                        color: cur.color,\n                        offset: (reflect && inverted) ? 1 - cur.offset : cur.offset,\n                    };\n                    addColorStop(grd, inter);\n                }\n                tmpCtx.fillStyle = grd;\n                tmpCtx.beginPath();\n                tmpCtx.arc(extender.x1, extender.y1, extender.r1, 0, 2 * Math.PI, false);\n                tmpCtx.closePath();\n                tmpCtx.fill();\n            }\n            var pattern = tmpCtx.createPattern(tmpCanvas, \"no-repeat\");\n            tmpCtx.restore();\n            return pattern;\n        };\n        RadialGradientBrush.prototype.getPointData = function (bounds) {\n            var mcenter = this.mapPoint(bounds, this.$center);\n            var morigin = this.mapPoint(bounds, this.$origin);\n            var mradius = this.mapPoint(bounds, this.$radius);\n            var rad = Math.max(mradius.x, mradius.y);\n            var side = Math.max(bounds.width, bounds.height), sx = bounds.width / side, sy = bounds.height / side;\n            return {\n                x0: morigin.x / sx,\n                y0: morigin.y / sy,\n                x1: mcenter.x / sx,\n                y1: mcenter.y / sy,\n                r1: rad,\n                side: side,\n                sx: bounds.width / side,\n                sy: bounds.height / side,\n                balanced: Math.abs(mradius.x - mradius.y) < epsilon\n            };\n        };\n        RadialGradientBrush.prototype.fit = function (ctx, fill, data, bounds) {\n            if (data.balanced)\n                return fill;\n            tmpCanvas.width = bounds.width;\n            tmpCanvas.height = bounds.height;\n            tmpCtx.save();\n            tmpCtx.scale(data.sx, data.sy);\n            tmpCtx.fillStyle = fill;\n            tmpCtx.fillRect(0, 0, data.side, data.side);\n            var pattern = ctx.createPattern(tmpCanvas, \"no-repeat\");\n            tmpCtx.restore();\n            return pattern;\n        };\n        return RadialGradientBrush;\n    })(puck.GradientBrush);\n    puck.RadialGradientBrush = RadialGradientBrush;\n    function addColorStop(grd, stop) {\n        var offset = Math.min(1.0, Math.max(0.0, stop.offset));\n        var color = (stop.color || fallbackColor).toString();\n        grd.addColorStop(offset, color);\n    }\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var DirtyFlags = puck.element.DirtyFlags;\n    var Rectangle = (function (_super) {\n        __extends(Rectangle, _super);\n        function Rectangle() {\n            _super.apply(this, arguments);\n        }\n        Rectangle.prototype.init = function (state, composite) {\n            _super.prototype.init.call(this, state, composite);\n            this.stencil = rectangleStencil;\n        };\n        Rectangle.prototype.x = function (value) {\n            if (arguments.length < 1)\n                return this.state.offset.x;\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Rectangle.prototype.y = function (value) {\n            if (arguments.length < 1)\n                return this.state.offset.y;\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Rectangle.prototype.width = function (value) {\n            if (arguments.length < 1)\n                return this.state.size.width;\n            if (this.state.size.width !== value) {\n                this.state.size.width = value;\n                this.composite.taint(DirtyFlags.transform | DirtyFlags.extents);\n            }\n            return this;\n        };\n        Rectangle.prototype.height = function (value) {\n            if (arguments.length < 1)\n                return this.state.size.height;\n            if (this.state.size.height !== value) {\n                this.state.size.height = value;\n                this.composite.taint(DirtyFlags.transform | DirtyFlags.extents);\n            }\n            return this;\n        };\n        return Rectangle;\n    })(puck.Visual);\n    puck.Rectangle = Rectangle;\n    var rectangleStencil = {\n        draft: puck.stencil.visual.draft,\n        draw: function (ctx, bag) {\n            var fr = bag.fillRect;\n            if (fr.width <= 0 || fr.height <= 0) {\n                return;\n            }\n            var raw = ctx.raw;\n            raw.beginPath();\n            raw.rect(fr.x, fr.y, fr.width, fr.height);\n            raw.closePath();\n        }\n    };\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var SolidColorBrush = (function () {\n        function SolidColorBrush(color) {\n            this.$color = null;\n            this.$changer = new puck.internal.WatchChanger();\n            this.color(new puck.Color(color));\n        }\n        SolidColorBrush.prototype.color = function (value) {\n            if (arguments.length < 1)\n                return this.$color;\n            if (!puck.Color.equals(this.$color, value)) {\n                this.$changer.on();\n            }\n            this.$color = value;\n            return this;\n        };\n        SolidColorBrush.prototype.watch = function (onChanged) {\n            return this.$changer.watch(onChanged);\n        };\n        SolidColorBrush.prototype.setup = function (ctx, region) {\n        };\n        SolidColorBrush.prototype.toHtml5Object = function () {\n            return this.color().toString();\n        };\n        return SolidColorBrush;\n    })();\n    puck.SolidColorBrush = SolidColorBrush;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    (function (Stretch) {\n        Stretch[Stretch[\"none\"] = 0] = \"none\";\n        Stretch[Stretch[\"fill\"] = 1] = \"fill\";\n        Stretch[Stretch[\"uniform\"] = 2] = \"uniform\";\n        Stretch[Stretch[\"uniformToFill\"] = 3] = \"uniformToFill\";\n    })(puck.Stretch || (puck.Stretch = {}));\n    var Stretch = puck.Stretch;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var DirtyFlags = puck.element.DirtyFlags;\n    var Text = (function (_super) {\n        __extends(Text, _super);\n        function Text(state, composite) {\n            _super.call(this, state, composite);\n            this.$fillwatch = null;\n            this.$strokewatch = null;\n        }\n        Text.prototype.init = function (state, composite) {\n            this.state = (state || new puck.text.TextState()).reset();\n            this.composite = (composite || new puck.element.ElementComposite()).reset();\n            this.processor = {\n                down: puck.element.down.Processor.instance,\n                up: puck.text.up.Processor.instance,\n                render: puck.text.render.Processor.instance,\n                hit: puck.text.hit.Processor.instance,\n            };\n            this.stencil = puck.stencil.empty;\n        };\n        Text.prototype.fill = function (value) {\n            var _this = this;\n            if (arguments.length < 1)\n                return this.state.fill;\n            if (this.$fillwatch) {\n                this.$fillwatch.unwatch();\n                this.$fillwatch = null;\n            }\n            if ((!value) === (!this.state.fill)) {\n                this.composite.taint(DirtyFlags.extents).invalidate();\n            }\n            if (value !== this.state.fill) {\n                this.state.fill = value;\n                this.composite.invalidate();\n            }\n            if (value) {\n                this.$fillwatch = value.watch(function () { return _this.composite.invalidate(); });\n            }\n            return this;\n        };\n        Text.prototype.stroke = function (value) {\n            var _this = this;\n            if (arguments.length < 1)\n                return this.state.stroke;\n            if (this.$strokewatch) {\n                this.$strokewatch.unwatch();\n                this.$strokewatch = null;\n            }\n            if ((!value) === (!this.state.stroke)) {\n                this.composite.taint(DirtyFlags.padding).invalidate();\n            }\n            if (value !== this.state.stroke) {\n                this.state.stroke = value;\n                this.composite.invalidate();\n            }\n            if (value) {\n                this.$strokewatch = value.watch(function () { return _this.composite.invalidate(); });\n            }\n            return this;\n        };\n        Text.prototype.strokeThickness = function (value) {\n            if (arguments.length < 1)\n                return this.state.strokeThickness;\n            if (value !== this.state.strokeThickness) {\n                this.state.strokeThickness = value;\n                this.composite.taint(DirtyFlags.padding);\n            }\n            return this;\n        };\n        Text.prototype.x = function (value) {\n            if (arguments.length < 1)\n                return this.state.offset.x;\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Text.prototype.y = function (value) {\n            if (arguments.length < 1)\n                return this.state.offset.y;\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        };\n        Text.prototype.text = function (value) {\n            if (arguments.length < 1)\n                return this.state.text;\n            this.state.text = value;\n            this.composite.taint(DirtyFlags.font);\n            return this;\n        };\n        Text.prototype.fontFamily = function (value) {\n            if (arguments.length < 1)\n                return this.state.font.family;\n            if (this.state.font.family !== value) {\n                this.state.font.family = value;\n                this.composite.taint(DirtyFlags.font);\n            }\n            return this;\n        };\n        Text.prototype.fontSize = function (value) {\n            if (arguments.length < 1)\n                return this.state.font.size;\n            if (this.state.font.size !== value) {\n                this.state.font.size = value;\n                this.composite.taint(DirtyFlags.font);\n            }\n            return this;\n        };\n        Text.prototype.fontStretch = function (value) {\n            if (arguments.length < 1)\n                return this.state.font.stretch;\n            if (this.state.font.stretch !== value) {\n                this.state.font.stretch = value;\n                this.composite.taint(DirtyFlags.font);\n            }\n            return this;\n        };\n        Text.prototype.fontStyle = function (value) {\n            if (arguments.length < 1)\n                return this.state.font.style;\n            if (this.state.font.style !== value) {\n                this.state.font.style = value;\n                this.composite.taint(DirtyFlags.font);\n            }\n            return this;\n        };\n        Text.prototype.fontWeight = function (value) {\n            if (arguments.length < 1)\n                return this.state.font.weight;\n            if (this.state.font.weight !== value) {\n                this.state.font.weight = value;\n                this.composite.taint(DirtyFlags.font);\n            }\n            return this;\n        };\n        return Text;\n    })(puck.Element);\n    puck.Text = Text;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var Timer = (function () {\n        function Timer(callback) {\n            this.callback = callback;\n            this.enabled = false;\n            this.active = 0;\n        }\n        Timer.prototype.enable = function () {\n            var _this = this;\n            this.enabled = true;\n            this.active = animate.request(function (now) { return _this.onFrame(now); });\n        };\n        Timer.prototype.disable = function () {\n            this.enabled = false;\n            if (this.active) {\n                animate.cancel(this.active);\n                this.active = 0;\n            }\n        };\n        Timer.prototype.onFrame = function (now) {\n            var _this = this;\n            this.callback && this.callback(now);\n            this.active = animate.request(function (now) { return _this.onFrame(now); });\n        };\n        return Timer;\n    })();\n    puck.Timer = Timer;\n    var animate;\n    (function (animate) {\n        var req = window.requestAnimationFrame\n            || window.webkitRequestAnimationFrame\n            || window.mozRequestAnimationFrame\n            || window.oRequestAnimationFrame\n            || window.msRequestAnimationFrame\n            || (function (callback) { return window.setTimeout(callback, 1000 / 200); });\n        var can = window.cancelAnimationFrame\n            || window.webkitCancelAnimationFrame\n            || window.mozCancelAnimationFrame\n            || window.oCancelAnimationFrame\n            || window.msCancelAnimationFrame\n            || (function (handle) { return window.clearTimeout(handle); });\n        function request(callback) {\n            return req(callback);\n        }\n        animate.request = request;\n        function cancel(handle) {\n            return can(handle);\n        }\n        animate.cancel = cancel;\n    })(animate || (animate = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var ElementComposite = (function () {\n            function ElementComposite() {\n                this.$$dirt = element.DirtyFlags.none;\n                this.transform = la.mat3.identity();\n                this.padding = la.padding.init(0, 0, 0, 0);\n                this.extents = la.rect.init(0, 0, 0, 0);\n                this.paint = la.rect.init(0, 0, 0, 0);\n            }\n            ElementComposite.prototype.hasDirt = function (match) {\n                return (this.$$dirt & match) > 0;\n            };\n            ElementComposite.prototype.taint = function (newDirt) {\n                this.$$dirt |= newDirt;\n                return this;\n            };\n            ElementComposite.prototype.untaint = function (oldDirt) {\n                this.$$dirt &= ~oldDirt;\n                return this;\n            };\n            ElementComposite.prototype.reset = function () {\n                this.opacity = 1.0;\n                this.visible = true;\n                la.mat3.identity(this.transform);\n                la.padding.init(0, 0, 0, 0, this.padding);\n                la.rect.init(0, 0, 0, 0, this.extents);\n                la.rect.init(0, 0, 0, 0, this.paint);\n                this.$$dirt = element.DirtyFlags.none;\n                return this;\n            };\n            ElementComposite.prototype.invalidate = function () {\n                this.taint(element.DirtyFlags.invalidate);\n                la.rect.union(this.paint, this.extents);\n                return this;\n            };\n            return ElementComposite;\n        })();\n        element.ElementComposite = ElementComposite;\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var container;\n    (function (container) {\n        var ContainerComposite = (function (_super) {\n            __extends(ContainerComposite, _super);\n            function ContainerComposite() {\n                _super.apply(this, arguments);\n            }\n            return ContainerComposite;\n        })(puck.element.ElementComposite);\n        container.ContainerComposite = ContainerComposite;\n    })(container = puck.container || (puck.container = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var ElementState = (function () {\n            function ElementState() {\n                this.opacity = 1.0;\n                this.visible = true;\n                this.offset = { x: 0, y: 0 };\n                this.size = { width: 0, height: 0 };\n                this.transform = la.mat3.identity();\n                this.transformOrigin = { x: 0.5, y: 0.5 };\n            }\n            ElementState.prototype.reset = function () {\n                this.opacity = 1.0;\n                this.visible = true;\n                this.offset.x = 0;\n                this.offset.y = 0;\n                this.size.width = 0;\n                this.size.height = 0;\n                la.mat3.identity(this.transform);\n                this.transformOrigin.x = 0.5;\n                this.transformOrigin.y = 0.5;\n                return this;\n            };\n            ElementState.prototype.mapTransformOrigin = function (comp) {\n                var to = this.transformOrigin, size = this.size;\n                return {\n                    x: to.x * size.width,\n                    y: to.y * size.height\n                };\n            };\n            return ElementState;\n        })();\n        element.ElementState = ElementState;\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var container;\n    (function (container) {\n        var ContainerState = (function (_super) {\n            __extends(ContainerState, _super);\n            function ContainerState() {\n                _super.apply(this, arguments);\n            }\n            return ContainerState;\n        })(puck.element.ElementState);\n        container.ContainerState = ContainerState;\n    })(container = puck.container || (puck.container = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var engine;\n    (function (engine) {\n        function hit(el, ctx, pos, hitlist) {\n            var processor = el.processor.hit;\n            processor.process(el, ctx, pos, hitlist);\n        }\n        engine.hit = hit;\n    })(engine = puck.engine || (puck.engine = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var engine;\n    (function (engine) {\n        function process(el, parent) {\n            doDown(el, parent);\n            var ccomposites = [];\n            for (var walker = puck.walk.getWalker(el), cur = walker.next(); !!cur; cur = walker.next()) {\n                process(cur, el);\n                ccomposites.push(cur.composite);\n            }\n            doUp(el, parent, ccomposites);\n        }\n        engine.process = process;\n        var EMPTY_DOWN_COMPOSITE = {\n            opacity: 1.0,\n            visible: true,\n            transform: la.mat3.identity(),\n            extents: la.rect.init(0, 0, 0, 0),\n            hasDirt: function (match) {\n                return false;\n            },\n            taint: function (newDirt) {\n            },\n            untaint: function (oldDirt) {\n            },\n            reset: function () {\n            }\n        };\n        function doDown(el, parent) {\n            var processor = el.processor.down;\n            var bag = {\n                walker: puck.walk.getWalker(el),\n                state: el.state,\n                composite: el.composite,\n                pcomposite: parent ? parent.composite : EMPTY_DOWN_COMPOSITE\n            };\n            if (processor.isTainted(bag)) {\n                processor.process(bag);\n                processor.clear(bag);\n            }\n        }\n        function doUp(el, parent, ccomposites) {\n            var processor = el.processor.up;\n            var bag = {\n                state: el.state,\n                composite: el.composite,\n                ccomposites: ccomposites\n            };\n            if (processor.isTainted(bag)) {\n                var dirt = processor.process(bag);\n                if (parent)\n                    parent.composite.taint(dirt);\n                processor.clear(bag);\n            }\n        }\n    })(engine = puck.engine || (puck.engine = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var render;\n    (function (render) {\n        var mat3 = la.mat3;\n        var caps = [\n            \"butt\",\n            \"square\",\n            \"round\",\n            \"butt\"\n        ];\n        var joins = [\n            \"miter\",\n            \"bevel\",\n            \"round\"\n        ];\n        var RenderContext = (function () {\n            function RenderContext() {\n                this.$$transforms = [];\n                this.currentTransform = mat3.identity();\n                Object.defineProperties(this, {\n                    \"currentTransform\": { value: mat3.identity(), writable: false },\n                    \"hasFillRule\": { value: RenderContext.hasFillRule, writable: false },\n                    \"size\": { value: new render.RenderContextSize(), writable: false },\n                });\n            }\n            Object.defineProperty(RenderContext, \"hasFillRule\", {\n                get: function () {\n                    if (navigator.appName === \"Microsoft Internet Explorer\") {\n                        var version = getIEVersion();\n                        return version < 0 || version > 10;\n                    }\n                    return true;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            RenderContext.prototype.init = function (ctx) {\n                Object.defineProperties(this, {\n                    \"raw\": { value: ctx, writable: false }\n                });\n                this.size.init(ctx);\n                return this;\n            };\n            RenderContext.prototype.applyDpiRatio = function () {\n                var ratio = this.size.dpiRatio;\n                this.scale(ratio, ratio);\n            };\n            RenderContext.prototype.save = function () {\n                this.$$transforms.push(mat3.create(this.currentTransform));\n                this.raw.save();\n            };\n            RenderContext.prototype.restore = function () {\n                var old = this.$$transforms.pop();\n                if (old)\n                    mat3.copyTo(old, this.currentTransform);\n                this.raw.restore();\n            };\n            RenderContext.prototype.setTransform = function (m11, m12, m21, m22, dx, dy) {\n                mat3.init(this.currentTransform, m11, m12, m21, m22, dx, dy);\n                this.raw.setTransform(m11, m12, m21, m22, dx, dy);\n            };\n            RenderContext.prototype.resetTransform = function () {\n                mat3.identity(this.currentTransform);\n                var raw = this.raw;\n                if (raw.resetTransform)\n                    raw.resetTransform();\n            };\n            RenderContext.prototype.transform = function (m11, m12, m21, m22, dx, dy) {\n                var ct = this.currentTransform;\n                mat3.multiply(ct, mat3.create([m11, m12, m21, m22, dx, dy]), ct);\n                this.raw.transform(m11, m12, m21, m22, dx, dy);\n            };\n            RenderContext.prototype.scale = function (x, y) {\n                mat3.scale(this.currentTransform, x, y);\n                this.raw.scale(x, y);\n            };\n            RenderContext.prototype.rotate = function (angle) {\n                var ct = this.currentTransform;\n                var r = mat3.createRotate(angle);\n                mat3.multiply(ct, r, ct);\n                this.raw.rotate(angle);\n            };\n            RenderContext.prototype.translate = function (x, y) {\n                mat3.translate(this.currentTransform, x, y);\n                this.raw.translate(x, y);\n            };\n            RenderContext.prototype.apply = function (mat) {\n                var ct = mat3.apply(this.currentTransform, mat);\n                this.raw.setTransform(ct[0], ct[1], ct[2], ct[3], ct[4], ct[5]);\n            };\n            RenderContext.prototype.preapply = function (mat) {\n                var ct = mat3.preapply(this.currentTransform, mat);\n                this.raw.setTransform(ct[0], ct[1], ct[2], ct[3], ct[4], ct[5]);\n            };\n            RenderContext.prototype.clipRect = function (rect) {\n                var raw = this.raw;\n                raw.beginPath();\n                raw.rect(rect.x, rect.y, rect.width, rect.height);\n                raw.clip();\n            };\n            RenderContext.prototype.fillEx = function (region, brush, fillRule) {\n                var raw = this.raw;\n                brush.setup(raw, region);\n                raw.fillStyle = brush.toHtml5Object();\n                if (fillRule == null) {\n                    raw.fillRule = raw.msFillRule = \"nonzero\";\n                    raw.fill();\n                }\n                else {\n                    var fr = fillRule === puck.FillRule.evenodd ? \"evenodd\" : \"nonzero\";\n                    raw.fillRule = raw.msFillRule = fr;\n                    raw.fill(fr);\n                }\n            };\n            RenderContext.prototype.strokeEx = function (region, brush, thickness) {\n                var raw = this.raw;\n                brush.setup(raw, region);\n                raw.strokeStyle = brush.toHtml5Object();\n                raw.lineWidth = thickness;\n                raw.stroke();\n            };\n            RenderContext.prototype.isPointInStrokeEx = function (x, y, thickness) {\n                var raw = this.raw;\n                raw.lineWidth = thickness;\n                return raw.isPointInStroke(x, y);\n            };\n            RenderContext.prototype.setStrokeExtras = function (lineCap, lineJoin, miterLimit) {\n                var raw = this.raw;\n                raw.lineCap = caps[lineCap || 0] || caps[0];\n                raw.lineJoin = joins[lineJoin || 0] || joins[0];\n                raw.miterLimit = miterLimit;\n            };\n            return RenderContext;\n        })();\n        render.RenderContext = RenderContext;\n        function getIEVersion() {\n            var re = new RegExp(\"MSIE ([0-9]{1,}[\\.0-9]{0,})\");\n            if (re.exec(navigator.userAgent) != null)\n                return parseFloat(RegExp.$1);\n            return -1;\n        }\n    })(render = puck.render || (puck.render = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var engine;\n    (function (engine) {\n        function render(el, ctx, region) {\n            var processor = el.processor.render;\n            var bag = {\n                walker: puck.walk.getWalker(el, true),\n                state: el.state,\n                composite: el.composite,\n                stencil: el.stencil,\n                ctx: ctx,\n                inregion: region,\n                curregion: la.rect.init(0, 0, 0, 0),\n            };\n            processor.process(bag);\n            processor.clear(bag);\n        }\n        engine.render = render;\n    })(engine = puck.engine || (puck.engine = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var fit;\n    (function (fit) {\n        var extents;\n        (function (extents_1) {\n            var rect = la.rect;\n            function calc(extents, stretch, natural, size) {\n                if (rect.isEmpty(natural))\n                    size.width = size.height = 0;\n                var fitter = fits[stretch];\n                fitter && fitter(extents, natural, size);\n            }\n            extents_1.calc = calc;\n            var fits = {};\n            fits[puck.Stretch.none] = function (final, natural, size) {\n                la.rect.copyTo(natural, final);\n            };\n            fits[puck.Stretch.fill] = function (final, natural, size) {\n                final.width = size.width;\n                final.height = size.height;\n            };\n            fits[puck.Stretch.uniform] = function (final, natural, size) {\n                var sx = size.width / natural.width, sy = size.height / natural.height;\n                final.width = size.width;\n                final.height = size.height;\n                if (sx < sy) {\n                    final.height = natural.height * sx;\n                }\n                else {\n                    final.width = natural.width * sy;\n                }\n            };\n            fits[puck.Stretch.uniformToFill] = function (final, natural, size) {\n                var sx = size.width / natural.width, sy = size.height / natural.height;\n                final.width = size.width;\n                final.height = size.height;\n                if (sx > sy) {\n                    final.height = natural.height * sx;\n                }\n                else {\n                    final.width = natural.width * sy;\n                }\n            };\n        })(extents = fit.extents || (fit.extents = {}));\n    })(fit = puck.fit || (puck.fit = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var fit;\n    (function (fit) {\n        var transform;\n        (function (transform_1) {\n            var mat3 = la.mat3;\n            function calc(transform, stretch, natural, size) {\n                var fitter = fits[stretch];\n                fitter && fitter(transform, natural, size);\n            }\n            transform_1.calc = calc;\n            var fits = {};\n            fits[puck.Stretch.none] = function (mat, natural, size) {\n                mat3.identity(mat);\n            };\n            fits[puck.Stretch.fill] = function (mat, natural, size) {\n                mat3.createTranslate(-natural.x, -natural.y, mat);\n                mat3.scale(mat, size.width / natural.width, size.height / natural.height);\n            };\n            fits[puck.Stretch.uniform] = function (mat, natural, size) {\n                mat3.createTranslate(-natural.x, -natural.y, mat);\n                var smin = Math.min(size.width / natural.width, size.height / natural.height);\n                mat3.scale(mat, smin, smin);\n            };\n            fits[puck.Stretch.uniformToFill] = function (mat, natural, size) {\n                mat3.createTranslate(-natural.x, -natural.y, mat);\n                var smax = Math.max(size.width / natural.width, size.height / natural.height);\n                mat3.scale(mat, smax, smax);\n            };\n        })(transform = fit.transform || (fit.transform = {}));\n    })(fit = puck.fit || (puck.fit = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var font;\n    (function (font_1) {\n        function toString(font) {\n            var s = \"\";\n            s += font.style.toString() + \" \";\n            s += \"normal \";\n            s += font.weight.toString() + \" \";\n            s += font.size + \"px \";\n            s += font.family.toString();\n            return s;\n        }\n        font_1.toString = toString;\n    })(font = puck.font || (puck.font = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var image;\n    (function (image) {\n        var ImageComposite = (function (_super) {\n            __extends(ImageComposite, _super);\n            function ImageComposite() {\n                _super.apply(this, arguments);\n                this.stretchTransform = la.mat3.identity();\n            }\n            ImageComposite.prototype.reset = function () {\n                _super.prototype.reset.call(this);\n                la.mat3.identity(this.stretchTransform);\n                return this;\n            };\n            return ImageComposite;\n        })(puck.element.ElementComposite);\n        image.ImageComposite = ImageComposite;\n    })(image = puck.image || (puck.image = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var image;\n    (function (image) {\n        var ImageSource = (function () {\n            function ImageSource() {\n                var _this = this;\n                this.$el = document.createElement(\"img\");\n                this.$watchers = [];\n                this.$el.onerror = function (e) { return _this.onErrored(e); };\n                this.$el.onload = function (e) { return _this.onLoaded(); };\n            }\n            ImageSource.prototype.reset = function () {\n                this.uri = \"\";\n            };\n            Object.defineProperty(ImageSource.prototype, \"uri\", {\n                get: function () { return this.$el.src; },\n                set: function (value) {\n                    if (this.$el.src !== value) {\n                        this.$el.src = value;\n                        this.onChanged();\n                    }\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(ImageSource.prototype, \"naturalWidth\", {\n                get: function () {\n                    return this.$el.naturalWidth;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(ImageSource.prototype, \"naturalHeight\", {\n                get: function () {\n                    return this.$el.naturalHeight;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            ImageSource.prototype.draw = function (ctx) {\n                ctx.drawImage(this.$el, 0, 0);\n            };\n            ImageSource.prototype.watch = function (onChanged, onErrored, onLoaded) {\n                var _this = this;\n                var watcher = {\n                    change: onChanged,\n                    error: onErrored,\n                    load: onLoaded,\n                    unwatch: function () {\n                        var ind = _this.$watchers.indexOf(watcher);\n                        if (ind > -1)\n                            _this.$watchers.splice(ind, 1);\n                    }\n                };\n                this.$watchers.push(watcher);\n                return watcher;\n            };\n            ImageSource.prototype.onChanged = function () {\n                for (var watchers = this.$watchers, i = 0; i < watchers.length; i++) {\n                    watchers[i].change();\n                }\n            };\n            ImageSource.prototype.onErrored = function (e) {\n                for (var watchers = this.$watchers, i = 0; i < watchers.length; i++) {\n                    watchers[i].error(e.error);\n                }\n            };\n            ImageSource.prototype.onLoaded = function () {\n                for (var watchers = this.$watchers, i = 0; i < watchers.length; i++) {\n                    watchers[i].load();\n                }\n            };\n            return ImageSource;\n        })();\n        image.ImageSource = ImageSource;\n    })(image = puck.image || (puck.image = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var image;\n    (function (image) {\n        var ImageState = (function (_super) {\n            __extends(ImageState, _super);\n            function ImageState() {\n                _super.apply(this, arguments);\n                this.source = new image.ImageSource();\n                this.stretch = puck.Stretch.none;\n                this.natural = la.rect.init(0, 0, 0, 0);\n            }\n            ImageState.prototype.reset = function () {\n                _super.prototype.reset.call(this);\n                this.source.reset();\n                this.stretch = puck.Stretch.none;\n                la.rect.init(0, 0, 0, 0, this.natural);\n                return this;\n            };\n            ImageState.prototype.getEffectiveStretch = function () {\n                var size = this.size, natural = this.natural;\n                if (size.width <= 0 || size.height <= 0) {\n                    return puck.Stretch.none;\n                }\n                if (natural.width <= 0 || natural.height <= 0) {\n                    return puck.Stretch.none;\n                }\n                return this.stretch;\n            };\n            return ImageState;\n        })(puck.element.ElementState);\n        image.ImageState = ImageState;\n    })(image = puck.image || (puck.image = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var internal;\n    (function (internal) {\n        var WatchChanger = (function () {\n            function WatchChanger() {\n                this.$watchers = [];\n            }\n            WatchChanger.prototype.watch = function (onChanged) {\n                var watchers = this.$watchers;\n                var watcher = {\n                    change: onChanged,\n                    unwatch: function () {\n                        var ind = watchers.indexOf(watcher);\n                        if (ind > -1)\n                            watchers.splice(ind, 1);\n                    }\n                };\n                watchers.push(watcher);\n                return watcher;\n            };\n            WatchChanger.prototype.on = function () {\n                for (var watchers = this.$watchers, i = 0; i < watchers.length; i++) {\n                    watchers[i].change();\n                }\n            };\n            return WatchChanger;\n        })();\n        internal.WatchChanger = WatchChanger;\n    })(internal = puck.internal || (puck.internal = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var linearGradient;\n    (function (linearGradient) {\n        function createRepeatInterpolator(start, end, bounds) {\n            var first = { x: start.x, y: start.y };\n            var last = { x: end.x, y: end.y };\n            var dir = { x: end.x - start.x, y: end.y - start.y };\n            linearGradient.calcMetrics(dir, first, last, bounds);\n            var numSteps = (last.x - first.x) / dir.x;\n            var stepSize = 1.0 / numSteps;\n            var cur = -stepSize;\n            return {\n                x0: first.x,\n                y0: first.y,\n                x1: last.x,\n                y1: last.y,\n                step: function () {\n                    cur += stepSize;\n                    return cur < 1;\n                },\n                interpolate: function (offset) {\n                    return cur + (offset / numSteps);\n                }\n            };\n        }\n        linearGradient.createRepeatInterpolator = createRepeatInterpolator;\n        function createReflectInterpolator(start, end, bounds) {\n            var first = { x: start.x, y: start.y };\n            var last = { x: end.x, y: end.y };\n            var dir = { x: end.x - start.x, y: end.y - start.y };\n            linearGradient.calcMetrics(dir, first, last, bounds);\n            var numSteps = (last.x - first.x) / dir.x;\n            var stepSize = 1.0 / numSteps;\n            var cur = -stepSize;\n            var inverted = Math.round((start.x - first.x) / dir.x) % 2 === 0;\n            return {\n                x0: first.x,\n                y0: first.y,\n                x1: last.x,\n                y1: last.y,\n                step: function () {\n                    inverted = !inverted;\n                    cur += stepSize;\n                    return cur < 1;\n                },\n                interpolate: function (offset) {\n                    var norm = offset / numSteps;\n                    return !inverted ? cur + norm : cur + (stepSize - norm);\n                }\n            };\n        }\n        linearGradient.createReflectInterpolator = createReflectInterpolator;\n    })(linearGradient = puck.linearGradient || (puck.linearGradient = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var linearGradient;\n    (function (linearGradient) {\n        function calcMetrics(dir, first, last, bounds) {\n            if (dir.y === 0) {\n                if (dir.x < 0)\n                    W(dir, first, last, bounds);\n                else if (dir.x !== 0)\n                    E(dir, first, last, bounds);\n            }\n            else if (dir.x === 0) {\n                if (dir.y < 0)\n                    N(dir, first, last, bounds);\n                else if (dir.y !== 0)\n                    S(dir, first, last, bounds);\n            }\n            else if (dir.x < 0 && dir.y < 0) {\n                NW(dir, first, last, bounds);\n            }\n            else if (dir.x < 0 && dir.y > 0) {\n                SW(dir, first, last, bounds);\n            }\n            else if (dir.x > 0 && dir.y < 0) {\n                NE(dir, first, last, bounds);\n            }\n            else if (dir.x > 0 && dir.y > 0) {\n                SE(dir, first, last, bounds);\n            }\n        }\n        linearGradient.calcMetrics = calcMetrics;\n        function E(dir, first, last, bounds) {\n            var maxX = bounds.x + bounds.width;\n            while (first.x >= bounds.x)\n                first.x -= dir.x;\n            while (last.x <= maxX)\n                last.x += dir.x;\n        }\n        function W(dir, first, last, bounds) {\n            var maxX = bounds.x + bounds.width;\n            while (first.x <= maxX)\n                first.x -= dir.x;\n            while (last.x >= bounds.x)\n                last.x += dir.x;\n        }\n        function S(dir, first, last, bounds) {\n            var maxY = bounds.y + bounds.height;\n            while (first.y >= bounds.y)\n                first.y -= dir.y;\n            while (last.y <= maxY)\n                last.y += dir.y;\n        }\n        function N(dir, first, last, bounds) {\n            var maxY = bounds.y + bounds.height;\n            while (first.y <= maxY)\n                first.y -= dir.y;\n            while (last.y >= bounds.y)\n                last.y += dir.y;\n        }\n        function NW(dir, first, last, bounds) {\n            var maxX = bounds.x + bounds.width;\n            var maxY = bounds.y + bounds.height;\n            while (first.x <= maxX && first.y <= maxY) {\n                first.x -= dir.x;\n                first.y -= dir.y;\n            }\n            while (last.x >= bounds.x && last.y >= bounds.y) {\n                last.x += dir.x;\n                last.y += dir.y;\n            }\n        }\n        function SW(dir, first, last, bounds) {\n            var maxX = bounds.x + bounds.width;\n            var maxY = bounds.y + bounds.height;\n            while (first.x <= maxX && first.y >= bounds.y) {\n                first.x -= dir.x;\n                first.y -= dir.y;\n            }\n            while (last.x >= bounds.x && last.y <= maxY) {\n                last.x += dir.x;\n                last.y += dir.y;\n            }\n        }\n        function NE(dir, first, last, bounds) {\n            var maxX = bounds.x + bounds.width;\n            var maxY = bounds.y + bounds.height;\n            while (first.x >= bounds.x && first.y <= maxY) {\n                first.x -= dir.x;\n                first.y -= dir.y;\n            }\n            while (last.x <= maxX && last.y >= bounds.y) {\n                last.x += dir.x;\n                last.y += dir.y;\n            }\n        }\n        function SE(dir, first, last, bounds) {\n            var maxX = bounds.x + bounds.width;\n            var maxY = bounds.y + bounds.height;\n            while (first.x >= bounds.x && first.y >= bounds.y) {\n                first.x -= dir.x;\n                first.y -= dir.y;\n            }\n            while (last.x <= maxX && last.y <= maxY) {\n                last.x += dir.x;\n                last.y += dir.y;\n            }\n        }\n    })(linearGradient = puck.linearGradient || (puck.linearGradient = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var path;\n    (function (path_1) {\n        var FillBounds = curve.bounds.fill.FillBounds;\n        var StrokeBounds = curve.bounds.stroke.StrokeBounds;\n        var Bounder = (function () {\n            function Bounder() {\n                this.$path = null;\n                this.$filled = null;\n                this.$stroked = null;\n                this.$pars = {\n                    strokeThickness: 0,\n                    strokeDashArray: null,\n                    strokeDashCap: curve.PenLineCap.Flat,\n                    strokeDashOffset: 0,\n                    strokeEndLineCap: curve.PenLineCap.Flat,\n                    strokeLineJoin: curve.PenLineJoin.Miter,\n                    strokeMiterLimit: 10,\n                    strokeStartLineCap: curve.PenLineCap.Flat,\n                };\n            }\n            Bounder.prototype.getPath = function () {\n                return this.$path;\n            };\n            Bounder.prototype.setPath = function (path) {\n                if (this.$path === path)\n                    return;\n                this.$path = path;\n                if (!path) {\n                    this.$filled = null;\n                    this.$stroked = null;\n                }\n                else {\n                    this.$filled = new FillBounds(path);\n                    this.$stroked = new StrokeBounds(path);\n                    this.$stroked.pars = this.$pars;\n                }\n            };\n            Bounder.prototype.reset = function () {\n                if (this.$filled)\n                    this.$filled.reset();\n                if (this.$stroked)\n                    this.$stroked.reset();\n            };\n            Bounder.prototype.getFillRect = function (dest) {\n                var box = this.$filled;\n                if (!box) {\n                    la.rect.init(0, 0, 0, 0, dest);\n                }\n                else {\n                    dest.x = box.l;\n                    dest.y = box.t;\n                    dest.width = box.r - box.l;\n                    dest.height = box.b - box.t;\n                }\n                return this;\n            };\n            Bounder.prototype.getStrokeRect = function (dest) {\n                var box = this.$stroked;\n                if (!box) {\n                    la.rect.init(0, 0, 0, 0, dest);\n                }\n                else {\n                    dest.x = box.l;\n                    dest.y = box.t;\n                    dest.width = box.r - box.l;\n                    dest.height = box.b - box.t;\n                }\n                return this;\n            };\n            Bounder.prototype.calc = function (state) {\n                var stroked = this.$stroked, filled = this.$filled;\n                if (stroked) {\n                    if (!!state.stroke && state.strokeThickness > 0) {\n                        this.setStroke(state);\n                        stroked.ensure();\n                    }\n                    else {\n                        stroked.reset();\n                    }\n                }\n                if (filled) {\n                    filled.ensure();\n                }\n                return this;\n            };\n            Bounder.prototype.setStroke = function (state) {\n                var pars = this.$pars;\n                pars.strokeThickness = state.strokeThickness;\n                pars.strokeStartLineCap = state.strokeLineCap;\n                pars.strokeLineJoin = state.strokeLineJoin;\n                pars.strokeMiterLimit = state.strokeMiterLimit;\n            };\n            return Bounder;\n        })();\n        path_1.Bounder = Bounder;\n    })(path = puck.path || (puck.path = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var path;\n    (function (path) {\n        var PathComposite = (function (_super) {\n            __extends(PathComposite, _super);\n            function PathComposite() {\n                _super.apply(this, arguments);\n                this.stretchTransform = la.mat3.identity();\n                this.natural = la.rect.init(0, 0, 0, 0);\n                this.bounder = new path.Bounder();\n            }\n            PathComposite.prototype.reset = function () {\n                _super.prototype.reset.call(this);\n                la.mat3.identity(this.stretchTransform);\n                la.rect.init(0, 0, 0, 0, this.natural);\n                this.bounder.reset();\n                return this;\n            };\n            return PathComposite;\n        })(puck.element.ElementComposite);\n        path.PathComposite = PathComposite;\n    })(path = puck.path || (puck.path = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var visual;\n    (function (visual) {\n        var ElementState = puck.element.ElementState;\n        var VisualState = (function (_super) {\n            __extends(VisualState, _super);\n            function VisualState() {\n                _super.apply(this, arguments);\n            }\n            VisualState.prototype.reset = function () {\n                _super.prototype.reset.call(this);\n                this.fill = null;\n                this.stroke = null;\n                this.strokeThickness = 0;\n                return this;\n            };\n            return VisualState;\n        })(ElementState);\n        visual.VisualState = VisualState;\n    })(visual = puck.visual || (puck.visual = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var path;\n    (function (path) {\n        var PathState = (function (_super) {\n            __extends(PathState, _super);\n            function PathState() {\n                _super.apply(this, arguments);\n                this.path = null;\n                this.stretch = puck.Stretch.none;\n                this.fillRule = puck.FillRule.evenodd;\n                this.strokeLineCap = puck.PenLineCap.flat;\n                this.strokeLineJoin = puck.PenLineJoin.miter;\n                this.strokeMiterLimit = 10;\n            }\n            PathState.prototype.reset = function () {\n                _super.prototype.reset.call(this);\n                this.path = null;\n                this.stretch = puck.Stretch.none;\n                this.fillRule = puck.FillRule.evenodd;\n                this.strokeLineCap = puck.PenLineCap.flat;\n                this.strokeLineJoin = puck.PenLineJoin.miter;\n                this.strokeMiterLimit = 10;\n                return this;\n            };\n            PathState.prototype.getEffectiveStretch = function (comp) {\n                var size = this.size, natural = comp.natural;\n                if (size.width <= 0 || size.height <= 0) {\n                    return puck.Stretch.none;\n                }\n                if (natural.width <= 0 || natural.height <= 0) {\n                    return puck.Stretch.none;\n                }\n                return this.stretch;\n            };\n            PathState.prototype.mapTransformOrigin = function (comp) {\n                var to = this.transformOrigin;\n                var final = la.rect.init(0, 0, 0, 0);\n                puck.fit.extents.calc(final, this.getEffectiveStretch(comp), comp.natural, this.size);\n                return {\n                    x: final.x + (to.x * final.width),\n                    y: final.y + (to.y * final.height),\n                };\n            };\n            return PathState;\n        })(puck.visual.VisualState);\n        path.PathState = PathState;\n    })(path = puck.path || (puck.path = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var polyline;\n    (function (polyline) {\n        var PolylineState = (function (_super) {\n            __extends(PolylineState, _super);\n            function PolylineState() {\n                _super.apply(this, arguments);\n                this.points = new puck.Points();\n                this.closed = false;\n            }\n            PolylineState.prototype.reset = function () {\n                _super.prototype.reset.call(this);\n                this.points.clear();\n                this.closed = false;\n                return this;\n            };\n            return PolylineState;\n        })(puck.path.PathState);\n        polyline.PolylineState = PolylineState;\n    })(polyline = puck.polyline || (puck.polyline = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var radialGradient;\n    (function (radialGradient) {\n        function createExtender(data, bounds) {\n            var started = false;\n            var dx = data.x1 - data.x0;\n            var dy = data.y1 - data.y0;\n            var rstep = data.r1;\n            var reached = false;\n            var ext = {\n                x0: data.x0,\n                y0: data.y0,\n                r0: 0,\n                x1: data.x1,\n                y1: data.y1,\n                r1: data.r1,\n                step: function () {\n                    if (!started) {\n                        started = true;\n                        return true;\n                    }\n                    ext.x0 = ext.x1;\n                    ext.y0 = ext.y1;\n                    ext.r0 += rstep;\n                    ext.r1 += rstep;\n                    ext.x1 += dx;\n                    ext.y1 += dy;\n                    if (reached)\n                        return false;\n                    reached = exceedBounds(ext.x1, ext.y1, ext.r1, bounds);\n                    return true;\n                },\n                createGradient: function (ctx) {\n                    return ctx.createRadialGradient(ext.x0, ext.y0, ext.r0, ext.x1, ext.y1, ext.r1);\n                }\n            };\n            return ext;\n        }\n        radialGradient.createExtender = createExtender;\n        function exceedBounds(cx, cy, radius, bounds) {\n            var ne = len(cx, cy, bounds.x, bounds.y);\n            var nw = len(cx, cy, bounds.x + bounds.width, bounds.y);\n            var sw = len(cx, cy, bounds.x + bounds.width, bounds.y + bounds.height);\n            var se = len(cx, cy, bounds.x, bounds.y + bounds.height);\n            return Math.max(ne, nw, sw, se) < radius;\n        }\n        function len(x1, y1, x2, y2) {\n            var dx = x2 - x1;\n            var dy = y2 - y1;\n            return Math.sqrt((dx * dx) + (dy * dy));\n        }\n    })(radialGradient = puck.radialGradient || (puck.radialGradient = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var render;\n    (function (render) {\n        function getNaturalCanvasSize(canvas) {\n            var zoomFactor = render.zoom.calc();\n            return {\n                width: canvas.offsetWidth * zoomFactor,\n                height: canvas.offsetHeight * zoomFactor\n            };\n        }\n        render.getNaturalCanvasSize = getNaturalCanvasSize;\n    })(render = puck.render || (puck.render = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var render;\n    (function (render) {\n        var epsilon = 1e-10;\n        var RenderContextSize = (function () {\n            function RenderContextSize() {\n                this.$$ctx = null;\n                this.$$desiredWidth = 0;\n                this.$$desiredHeight = 0;\n                this.$$changed = null;\n                this.$$lastDpiRatio = 1;\n            }\n            Object.defineProperty(RenderContextSize.prototype, \"desiredWidth\", {\n                get: function () {\n                    return this.$$desiredWidth;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(RenderContextSize.prototype, \"desiredHeight\", {\n                get: function () {\n                    return this.$$desiredHeight;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(RenderContextSize.prototype, \"paintWidth\", {\n                get: function () {\n                    return this.$$desiredWidth * this.dpiRatio;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(RenderContextSize.prototype, \"paintHeight\", {\n                get: function () {\n                    return this.$$desiredHeight * this.dpiRatio;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(RenderContextSize.prototype, \"dpiRatio\", {\n                get: function () {\n                    return (window.devicePixelRatio || 1) / this.$$ctx.backingStorePixelRatio;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            RenderContextSize.prototype.init = function (ctx) {\n                this.$$ctx = ctx;\n                var desired = render.getNaturalCanvasSize(ctx.canvas);\n                this.$$desiredWidth = desired.width;\n                this.$$desiredHeight = desired.height;\n                this.$adjustCanvas();\n            };\n            RenderContextSize.prototype.queueResize = function (width, height) {\n                if (this.$$changed) {\n                    this.$$changed.width = width;\n                    this.$$changed.height = height;\n                }\n                else {\n                    this.$$changed = {\n                        width: width,\n                        height: height\n                    };\n                }\n                return this;\n            };\n            RenderContextSize.prototype.commitResize = function () {\n                if (this.$$changed) {\n                    if (Math.abs(this.$$changed.width - this.$$desiredWidth) < epsilon && Math.abs(this.$$changed.height - this.$$desiredHeight) < epsilon)\n                        return;\n                    this.$$desiredWidth = this.$$changed.width;\n                    this.$$desiredHeight = this.$$changed.height;\n                    this.$$changed = null;\n                    this.$adjustCanvas();\n                }\n                return this;\n            };\n            RenderContextSize.prototype.updateDpiRatio = function () {\n                if (this.$$lastDpiRatio === this.dpiRatio)\n                    return false;\n                this.$adjustCanvas();\n                return true;\n            };\n            RenderContextSize.prototype.$adjustCanvas = function () {\n                var canvas = this.$$ctx.canvas;\n                var dpiRatio = this.dpiRatio;\n                if (Math.abs(dpiRatio - 1) < epsilon) {\n                    canvas.width = this.desiredWidth;\n                    canvas.height = this.desiredHeight;\n                }\n                else {\n                    canvas.width = this.paintWidth;\n                    canvas.height = this.paintHeight;\n                    canvas.style.width = this.desiredWidth.toString() + \"px\";\n                    canvas.style.height = this.desiredHeight.toString() + \"px\";\n                }\n                this.$$lastDpiRatio = dpiRatio;\n            };\n            return RenderContextSize;\n        })();\n        render.RenderContextSize = RenderContextSize;\n    })(render = puck.render || (puck.render = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var render;\n    (function (render) {\n        var zoom;\n        (function (zoom_1) {\n            zoom_1.calc = (function () {\n                if (document.frames)\n                    return ie();\n                return chrome();\n            })();\n            function ie() {\n                return function () {\n                    var screen = document.frames.screen;\n                    var zoom = screen.deviceXDPI / screen.systemXDPI;\n                    return Math.round(zoom * 100) / 100;\n                };\n            }\n            function chrome() {\n                var svg;\n                function memoizeSvg() {\n                    if (!!svg || !document.body)\n                        return;\n                    svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                    svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n                    svg.setAttribute('version', '1.1');\n                    document.body.appendChild(svg);\n                    (function (style) {\n                        style.opacity = \"0.0\";\n                        style.position = \"absolute\";\n                        style.left = \"-300px\";\n                    })(svg.style);\n                }\n                return function () {\n                    memoizeSvg();\n                    return !svg ? 1 : svg.currentScale;\n                };\n            }\n        })(zoom = render.zoom || (render.zoom = {}));\n    })(render = puck.render || (puck.render = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var stencil;\n    (function (stencil) {\n        stencil.empty = {\n            draft: function (bag) {\n            },\n            draw: function (ctx, bag) {\n            },\n        };\n    })(stencil = puck.stencil || (puck.stencil = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var stencil;\n    (function (stencil) {\n        stencil.path = {\n            draft: function (bag) {\n                var comp = bag.composite;\n                comp.bounder\n                    .getFillRect(bag.fillRect)\n                    .getStrokeRect(bag.strokeRect);\n            },\n            draw: function (ctx, bag) {\n                var fr = bag.fillRect;\n                if (fr.width <= 0 || fr.height <= 0) {\n                    return;\n                }\n                var raw = ctx.raw, state = bag.state;\n                raw.beginPath();\n                state.path.draw(raw);\n            },\n        };\n    })(stencil = puck.stencil || (puck.stencil = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var text;\n    (function (text) {\n        var ElementState = puck.element.ElementState;\n        var TextState = (function (_super) {\n            __extends(TextState, _super);\n            function TextState() {\n                _super.apply(this, arguments);\n            }\n            TextState.prototype.reset = function () {\n                _super.prototype.reset.call(this);\n                this.fill = null;\n                this.stroke = null;\n                this.strokeThickness = 0;\n                var f;\n                f = {\n                    family: puck.defaultFont.family,\n                    size: puck.defaultFont.size,\n                    stretch: puck.defaultFont.stretch,\n                    style: puck.defaultFont.style,\n                    weight: puck.defaultFont.weight,\n                    toString: function () {\n                        return puck.font.toString(f);\n                    },\n                };\n                this.font = f;\n                this.text = \"\";\n                return this;\n            };\n            return TextState;\n        })(ElementState);\n        text.TextState = TextState;\n    })(text = puck.text || (puck.text = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var visual;\n    (function (visual) {\n        var ElementComposite = puck.element.ElementComposite;\n        var VisualComposite = (function (_super) {\n            __extends(VisualComposite, _super);\n            function VisualComposite() {\n                _super.apply(this, arguments);\n            }\n            return VisualComposite;\n        })(ElementComposite);\n        visual.VisualComposite = VisualComposite;\n    })(visual = puck.visual || (puck.visual = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var walk;\n    (function (walk) {\n        var EMPTY_WALKER = {\n            next: function () {\n                return undefined;\n            }\n        };\n        function getWalker(el, reverse) {\n            if (typeof el.walk === \"function\")\n                return el.walk(reverse);\n            return EMPTY_WALKER;\n        }\n        walk.getWalker = getWalker;\n    })(walk = puck.walk || (puck.walk = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var down;\n        (function (down) {\n            var Processor = (function () {\n                function Processor() {\n                }\n                Processor.prototype.isTainted = function (bag) {\n                    return bag.composite.hasDirt(element.DirtyFlags.down);\n                };\n                Processor.prototype.process = function (bag) {\n                    var dirt = element.DirtyFlags.none;\n                    if (down.opacity.process(bag))\n                        dirt |= element.DirtyFlags.opacity;\n                    if (down.visible.process(bag))\n                        dirt |= element.DirtyFlags.visible;\n                    if (down.transform.process(bag))\n                        dirt |= element.DirtyFlags.transform;\n                    return dirt;\n                };\n                Processor.prototype.clear = function (bag) {\n                    bag.composite.untaint(element.DirtyFlags.down);\n                    return this;\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })();\n            down.Processor = Processor;\n        })(down = element.down || (element.down = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var container;\n    (function (container) {\n        var down;\n        (function (down) {\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.process = function (bag) {\n                    var dirt = _super.prototype.process.call(this, bag);\n                    for (var cur = bag.walker.next(); !!cur; cur = bag.walker.next()) {\n                        cur.composite.taint(dirt);\n                    }\n                    return dirt;\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.down.Processor);\n            down.Processor = Processor;\n        })(down = container.down || (container.down = {}));\n    })(container = puck.container || (puck.container = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var hit;\n        (function (hit) {\n            var mat3 = la.mat3;\n            var vec2 = la.vec2;\n            var rect = la.rect;\n            var Processor = (function () {\n                function Processor() {\n                }\n                Processor.prototype.process = function (el, ctx, pos, hitlist) {\n                    if (!this.prehit(el, ctx, pos))\n                        return;\n                    ctx.save();\n                    ctx.preapply(el.composite.transform);\n                    var inside = false;\n                    if (this.hit(el, ctx, pos, hitlist)) {\n                        inside = true;\n                        hitlist.unshift(el);\n                    }\n                    ctx.restore();\n                    return inside;\n                };\n                Processor.prototype.prehit = function (el, ctx, pos) {\n                    var comp = el.composite;\n                    if (!comp.visible || (comp.opacity * 255) < 0.5)\n                        return false;\n                    var localpos = mat3.transformVec2(ctx.currentTransform, pos, vec2.create(0, 0));\n                    return rect.containsVec2(comp.extents, localpos);\n                };\n                Processor.prototype.hit = function (el, ctx, pos, hitlist) {\n                    return false;\n                };\n                Processor.prototype.draw = function (el, ctx) {\n                    var sbag = {\n                        state: el.state,\n                        composite: el.composite,\n                        fillRect: null,\n                        strokeRect: null,\n                    };\n                    el.stencil.draw(ctx, sbag);\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })();\n            hit.Processor = Processor;\n        })(hit = element.hit || (element.hit = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var container;\n    (function (container) {\n        var hit;\n        (function (hit) {\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.hit = function (el, ctx, pos, hitlist) {\n                    for (var walker = el.walk(true), cur = walker.next(); !!cur; cur = walker.next()) {\n                        if (puck.engine.hit(el, ctx, pos, hitlist))\n                            return true;\n                    }\n                    return false;\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.hit.Processor);\n            hit.Processor = Processor;\n        })(hit = container.hit || (container.hit = {}));\n    })(container = puck.container || (puck.container = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var render;\n        (function (render) {\n            (function (SkipResult) {\n                SkipResult[SkipResult[\"none\"] = 0] = \"none\";\n                SkipResult[SkipResult[\"render\"] = 2] = \"render\";\n                SkipResult[SkipResult[\"post\"] = 4] = \"post\";\n                SkipResult[SkipResult[\"all\"] = 6] = \"all\";\n            })(render.SkipResult || (render.SkipResult = {}));\n            var SkipResult = render.SkipResult;\n            var Processor = (function () {\n                function Processor() {\n                }\n                Processor.prototype.process = function (bag) {\n                    var result = this.prerender(bag);\n                    if ((result & SkipResult.render) === 0) {\n                        this.render(bag);\n                    }\n                    if ((result & SkipResult.post) === 0) {\n                        this.postrender(bag);\n                    }\n                };\n                Processor.prototype.clear = function (bag) {\n                    bag.composite.untaint(element.DirtyFlags.invalidate);\n                    la.rect.init(0, 0, 0, 0, bag.composite.paint);\n                    return this;\n                };\n                Processor.prototype.prerender = function (bag) {\n                    if (!render.validate.process(bag))\n                        return SkipResult.all;\n                    if (!render.should.process(bag))\n                        return SkipResult.all;\n                    render.prepare.process(bag);\n                    render.narrow.process(bag);\n                    return SkipResult.none;\n                };\n                Processor.prototype.render = function (bag) {\n                    var sbag = this.createStencilBag(bag);\n                    bag.stencil.draft(sbag);\n                    bag.stencil.draw(bag.ctx, sbag);\n                };\n                Processor.prototype.postrender = function (bag) {\n                    bag.ctx.restore();\n                };\n                Processor.prototype.createStencilBag = function (bag) {\n                    return {\n                        state: bag.state,\n                        composite: bag.composite,\n                        fillRect: la.rect.init(0, 0, 0, 0),\n                        strokeRect: la.rect.init(0, 0, 0, 0),\n                    };\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })();\n            render.Processor = Processor;\n        })(render = element.render || (element.render = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var container;\n    (function (container) {\n        var render;\n        (function (render) {\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.render = function (bag) {\n                    for (var cur = bag.walker.next(); !!cur; cur = bag.walker.next()) {\n                        puck.engine.render(cur, bag.ctx, bag.curregion);\n                    }\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.render.Processor);\n            render.Processor = Processor;\n        })(render = container.render || (container.render = {}));\n    })(container = puck.container || (puck.container = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var container;\n    (function (container) {\n        var up;\n        (function (up) {\n            var extents;\n            (function (extents) {\n                var rect = la.rect;\n                var DirtyFlags = puck.element.DirtyFlags;\n                var oldExtents = rect.init(0, 0, 0, 0);\n                function process(bag) {\n                    var comp = bag.composite;\n                    if (!comp.hasDirt(DirtyFlags.extents))\n                        return false;\n                    rect.copyTo(comp.extents, oldExtents);\n                    rect.init(0, 0, 0, 0, comp.extents);\n                    for (var ccomps = bag.ccomposites, i = 0; i < ccomps.length; i++) {\n                        rect.union(comp.extents, ccomps[i].extents);\n                    }\n                    rect.transform(comp.extents, comp.transform, comp.extents);\n                    if (rect.equal(comp.extents, oldExtents))\n                        return false;\n                    rect.union(comp.paint, oldExtents);\n                    comp.taint(DirtyFlags.newbounds);\n                    return true;\n                }\n                extents.process = process;\n            })(extents = up.extents || (up.extents = {}));\n        })(up = container.up || (container.up = {}));\n    })(container = puck.container || (puck.container = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var container;\n    (function (container) {\n        var up;\n        (function (up) {\n            var invalidate;\n            (function (invalidate) {\n                var DirtyFlags = puck.element.DirtyFlags;\n                function process(bag) {\n                    var comp = bag.composite;\n                    if (!comp.hasDirt(DirtyFlags.invalidate))\n                        return false;\n                    var childPaint = la.rect.init(0, 0, 0, 0);\n                    for (var ccomps = bag.ccomposites, i = 0; i < ccomps.length; i++) {\n                        la.rect.union(childPaint, ccomps[i].paint);\n                    }\n                    la.rect.transform(childPaint, comp.transform, childPaint);\n                    la.rect.union(comp.paint, childPaint);\n                    return true;\n                }\n                invalidate.process = process;\n            })(invalidate = up.invalidate || (up.invalidate = {}));\n        })(up = container.up || (container.up = {}));\n    })(container = puck.container || (puck.container = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var up;\n        (function (up) {\n            var Processor = (function () {\n                function Processor() {\n                }\n                Processor.prototype.isTainted = function (bag) {\n                    return bag.composite.hasDirt(element.DirtyFlags.up);\n                };\n                Processor.prototype.process = function (bag) {\n                    var dirt = element.DirtyFlags.none;\n                    if (up.extents.process(bag))\n                        dirt |= element.DirtyFlags.extents;\n                    up.newbounds.process(bag);\n                    return dirt;\n                };\n                Processor.prototype.clear = function (bag) {\n                    bag.composite.untaint(element.DirtyFlags.up);\n                    return this;\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })();\n            up.Processor = Processor;\n        })(up = element.up || (element.up = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var up;\n        (function (up) {\n            var newbounds;\n            (function (newbounds) {\n                function process(bag) {\n                    var comp = bag.composite;\n                    if (!comp.hasDirt(element.DirtyFlags.newbounds) || !comp.visible || (comp.opacity * 255) < 0.5)\n                        return false;\n                    comp.invalidate();\n                    return true;\n                }\n                newbounds.process = process;\n            })(newbounds = up.newbounds || (up.newbounds = {}));\n        })(up = element.up || (element.up = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var container;\n    (function (container) {\n        var up;\n        (function (up) {\n            var DirtyFlags = puck.element.DirtyFlags;\n            var newbounds = puck.element.up.newbounds;\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.process = function (bag) {\n                    var dirt = DirtyFlags.none;\n                    if (up.extents.process(bag))\n                        dirt |= DirtyFlags.extents;\n                    newbounds.process(bag);\n                    if (up.invalidate.process(bag))\n                        dirt |= DirtyFlags.invalidate;\n                    return dirt;\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.up.Processor);\n            up.Processor = Processor;\n        })(up = container.up || (container.up = {}));\n    })(container = puck.container || (puck.container = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var down;\n        (function (down) {\n            var opacity;\n            (function (opacity) {\n                function process(bag) {\n                    var comp = bag.composite;\n                    if (!comp.hasDirt(element.DirtyFlags.opacity))\n                        return false;\n                    var newOpacity = bag.pcomposite.opacity * bag.state.opacity;\n                    if (comp.opacity === newOpacity)\n                        return false;\n                    comp.taint(element.DirtyFlags.newbounds);\n                    comp.opacity = newOpacity;\n                    return true;\n                }\n                opacity.process = process;\n            })(opacity = down.opacity || (down.opacity = {}));\n        })(down = element.down || (element.down = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var down;\n        (function (down) {\n            var transform;\n            (function (transform) {\n                var mat3 = la.mat3;\n                var oldTransform = mat3.identity();\n                function process(bag) {\n                    var comp = bag.composite;\n                    if (!comp.hasDirt(element.DirtyFlags.transform))\n                        return false;\n                    mat3.copyTo(comp.transform, oldTransform);\n                    var state = bag.state;\n                    var xo = state.mapTransformOrigin(comp);\n                    mat3.createTranslate(-xo.x, -xo.y, comp.transform);\n                    mat3.apply(comp.transform, state.transform);\n                    mat3.translate(comp.transform, xo.x, xo.y);\n                    mat3.translate(comp.transform, state.offset.x, state.offset.y);\n                    if (!mat3.equal(comp.transform, oldTransform)) {\n                        comp.taint(element.DirtyFlags.extents);\n                    }\n                    return true;\n                }\n                transform.process = process;\n            })(transform = down.transform || (down.transform = {}));\n        })(down = element.down || (element.down = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var down;\n        (function (down) {\n            var visible;\n            (function (visible) {\n                function process(bag) {\n                    var comp = bag.composite;\n                    if (!comp.hasDirt(element.DirtyFlags.visible))\n                        return false;\n                    var newVisible = bag.pcomposite.visible && (bag.state.visible === true);\n                    if (comp.visible === newVisible)\n                        return false;\n                    comp.taint(element.DirtyFlags.newbounds);\n                    comp.visible = newVisible;\n                    return true;\n                }\n                visible.process = process;\n            })(visible = down.visible || (down.visible = {}));\n        })(down = element.down || (element.down = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var render;\n        (function (render) {\n            var narrow;\n            (function (narrow) {\n                function process(bag) {\n                }\n                narrow.process = process;\n            })(narrow = render.narrow || (render.narrow = {}));\n        })(render = element.render || (element.render = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var render;\n        (function (render) {\n            var prepare;\n            (function (prepare) {\n                function process(bag) {\n                    bag.ctx.save();\n                    bag.ctx.preapply(bag.composite.transform);\n                }\n                prepare.process = process;\n            })(prepare = render.prepare || (render.prepare = {}));\n        })(render = element.render || (element.render = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var render;\n        (function (render) {\n            var should;\n            (function (should) {\n                var rect = la.rect;\n                function process(bag) {\n                    var r = rect.transform(bag.composite.extents, bag.ctx.currentTransform, bag.curregion);\n                    rect.roundOut(r);\n                    rect.intersection(r, bag.inregion);\n                    return r.width > 0 && r.height > 0;\n                }\n                should.process = process;\n            })(should = render.should || (render.should = {}));\n        })(render = element.render || (element.render = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var render;\n        (function (render) {\n            var validate;\n            (function (validate) {\n                function process(bag) {\n                    var comp = bag.composite;\n                    return !!comp.visible && (comp.opacity * 255) >= 0.5;\n                }\n                validate.process = process;\n            })(validate = render.validate || (render.validate = {}));\n        })(render = element.render || (element.render = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var up;\n        (function (up) {\n            var extents;\n            (function (extents) {\n                var rect = la.rect;\n                var oldExtents = rect.init(0, 0, 0, 0);\n                function process(bag) {\n                    var comp = bag.composite;\n                    if (!comp.hasDirt(element.DirtyFlags.extents))\n                        return false;\n                    var state = bag.state;\n                    rect.copyTo(comp.extents, oldExtents);\n                    rect.init(0, 0, state.size.width, state.size.height, comp.extents);\n                    rect.grow(comp.extents, comp.padding);\n                    rect.transform(comp.extents, comp.transform, comp.extents);\n                    if (rect.equal(comp.extents, oldExtents))\n                        return false;\n                    rect.union(comp.paint, oldExtents);\n                    comp.taint(element.DirtyFlags.newbounds);\n                    return true;\n                }\n                extents.process = process;\n            })(extents = up.extents || (up.extents = {}));\n        })(up = element.up || (element.up = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var font;\n    (function (font_2) {\n        var height;\n        (function (height_1) {\n            var heights = [];\n            height_1.cache = {\n                hits: 0,\n                misses: 0\n            };\n            function get(font) {\n                var serial = font.toString();\n                var height = heights[serial];\n                if (height == null) {\n                    heights[serial] = height = height_1.measure(serial);\n                    height_1.cache.misses++;\n                }\n                else {\n                    height_1.cache.hits++;\n                }\n                return height;\n            }\n            height_1.get = get;\n        })(height = font_2.height || (font_2.height = {}));\n    })(font = puck.font || (puck.font = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var font;\n    (function (font_3) {\n        var height;\n        (function (height) {\n            var dummy;\n            function measure(font) {\n                var serial = font.toString();\n                if (!dummy) {\n                    dummy = document.createElement(\"div\");\n                    dummy.appendChild(document.createTextNode(\"Hg\"));\n                    document.body.appendChild(dummy);\n                }\n                dummy.style.display = \"\";\n                dummy.style.font = serial;\n                var result = dummy.offsetHeight;\n                dummy.style.display = \"none\";\n                return result;\n            }\n            height.measure = measure;\n        })(height = font_3.height || (font_3.height = {}));\n    })(font = puck.font || (puck.font = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var font;\n    (function (font_4) {\n        var width;\n        (function (width) {\n            var dummy;\n            function measure(font, text) {\n                if (!dummy) {\n                    dummy = document.createElement(\"canvas\");\n                }\n                var ctx = dummy.getContext(\"2d\");\n                ctx.font = font.toString();\n                return ctx.measureText(text).width;\n            }\n            width.measure = measure;\n        })(width = font_4.width || (font_4.width = {}));\n    })(font = puck.font || (puck.font = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var image;\n    (function (image) {\n        var down;\n        (function (down) {\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.process = function (bag) {\n                    down.stretch.process(bag);\n                    return _super.prototype.process.call(this, bag);\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.down.Processor);\n            down.Processor = Processor;\n        })(down = image.down || (image.down = {}));\n    })(image = puck.image || (puck.image = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var image;\n    (function (image) {\n        var down;\n        (function (down) {\n            var stretch;\n            (function (stretch) {\n                var DirtyFlags = puck.element.DirtyFlags;\n                var mat3 = la.mat3;\n                var oldStretchTransform = mat3.identity();\n                function process(bag) {\n                    var state = bag.state, comp = bag.composite;\n                    if (!comp.hasDirt(DirtyFlags.stretch))\n                        return false;\n                    mat3.copyTo(comp.stretchTransform, oldStretchTransform);\n                    puck.fit.transform.calc(comp.stretchTransform, state.getEffectiveStretch(), state.natural, state.size);\n                    if (mat3.equal(comp.stretchTransform, oldStretchTransform))\n                        return false;\n                    comp.taint(DirtyFlags.extents);\n                    return true;\n                }\n                stretch.process = process;\n            })(stretch = down.stretch || (down.stretch = {}));\n        })(down = image.down || (image.down = {}));\n    })(image = puck.image || (puck.image = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var image;\n    (function (image) {\n        var hit;\n        (function (hit) {\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.hit = function (el, ctx, pos, hitlist) {\n                    return true;\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.hit.Processor);\n            hit.Processor = Processor;\n        })(hit = image.hit || (image.hit = {}));\n    })(image = puck.image || (puck.image = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var image;\n    (function (image) {\n        var up;\n        (function (up) {\n            var extents;\n            (function (extents) {\n                var DirtyFlags = puck.element.DirtyFlags;\n                var rect = la.rect;\n                var oldExtents = rect.init(0, 0, 0, 0);\n                function process(bag) {\n                    var comp = bag.composite;\n                    if (!comp.hasDirt(DirtyFlags.extents))\n                        return false;\n                    var state = bag.state;\n                    rect.copyTo(comp.extents, oldExtents);\n                    rect.init(0, 0, 0, 0, comp.extents);\n                    puck.fit.extents.calc(comp.extents, state.getEffectiveStretch(), state.natural, state.size);\n                    rect.transform(comp.extents, comp.transform, comp.extents);\n                    if (rect.equal(comp.extents, oldExtents))\n                        return false;\n                    rect.union(comp.paint, oldExtents);\n                    comp.taint(DirtyFlags.newbounds);\n                    return true;\n                }\n                extents.process = process;\n            })(extents = up.extents || (up.extents = {}));\n        })(up = image.up || (image.up = {}));\n    })(image = puck.image || (puck.image = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var image;\n    (function (image) {\n        var up;\n        (function (up) {\n            var DirtyFlags = puck.element.DirtyFlags;\n            var newbounds = puck.element.up.newbounds;\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.process = function (bag) {\n                    var dirt = DirtyFlags.none;\n                    if (up.extents.process(bag))\n                        dirt |= DirtyFlags.extents;\n                    newbounds.process(bag);\n                    return dirt;\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.up.Processor);\n            up.Processor = Processor;\n        })(up = image.up || (image.up = {}));\n    })(image = puck.image || (puck.image = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var path;\n    (function (path) {\n        var down;\n        (function (down) {\n            var natural;\n            (function (natural) {\n                var DirtyFlags = puck.element.DirtyFlags;\n                var oldNatural = la.rect.init(0, 0, 0, 0);\n                var activeFill = la.rect.init(0, 0, 0, 0);\n                var activeStroke = la.rect.init(0, 0, 0, 0);\n                function process(bag) {\n                    var state = bag.state, comp = bag.composite;\n                    if (!comp.hasDirt(DirtyFlags.padding))\n                        return false;\n                    comp.bounder.reset();\n                    la.rect.copyTo(comp.natural, oldNatural);\n                    comp.bounder.calc(state)\n                        .getFillRect(activeFill)\n                        .getStrokeRect(activeStroke);\n                    la.rect.union(activeFill, activeStroke, comp.natural);\n                    if (!la.rect.equal(comp.natural, oldNatural))\n                        return false;\n                    comp.taint(DirtyFlags.stretch);\n                    return true;\n                }\n                natural.process = process;\n            })(natural = down.natural || (down.natural = {}));\n        })(down = path.down || (path.down = {}));\n    })(path = puck.path || (puck.path = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var path;\n    (function (path) {\n        var down;\n        (function (down) {\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.process = function (bag) {\n                    down.natural.process(bag);\n                    down.stretch.process(bag);\n                    return _super.prototype.process.call(this, bag);\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.down.Processor);\n            down.Processor = Processor;\n        })(down = path.down || (path.down = {}));\n    })(path = puck.path || (puck.path = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var path;\n    (function (path) {\n        var down;\n        (function (down) {\n            var stretch;\n            (function (stretch) {\n                var DirtyFlags = puck.element.DirtyFlags;\n                var mat3 = la.mat3;\n                var oldStretchTransform = mat3.identity();\n                function process(bag) {\n                    var state = bag.state, comp = bag.composite;\n                    if (!comp.hasDirt(DirtyFlags.stretch))\n                        return false;\n                    mat3.copyTo(comp.stretchTransform, oldStretchTransform);\n                    puck.fit.transform.calc(comp.stretchTransform, state.getEffectiveStretch(comp), comp.natural, state.size);\n                    if (mat3.equal(comp.stretchTransform, oldStretchTransform))\n                        return false;\n                    comp.taint(DirtyFlags.extents);\n                    return true;\n                }\n                stretch.process = process;\n            })(stretch = down.stretch || (down.stretch = {}));\n        })(down = path.down || (path.down = {}));\n    })(path = puck.path || (puck.path = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var visual;\n    (function (visual) {\n        var hit;\n        (function (hit) {\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.prehit = function (el, ctx, pos) {\n                    if (!_super.prototype.prehit.call(this, el, ctx, pos))\n                        return false;\n                    var state = el.state;\n                    return !!state.fill || (!!state.stroke && state.strokeThickness > 0);\n                };\n                Processor.prototype.hit = function (el, ctx, pos, hitlist) {\n                    ctx.save();\n                    this.transformLocal(el, ctx);\n                    this.draw(el, ctx);\n                    var state = el.state, px = pos[0], py = pos[1], inside = false;\n                    if (!!state.fill && ctx.raw.isPointInPath(px, py)) {\n                        inside = true;\n                    }\n                    else if (!!state.stroke && ctx.isPointInStrokeEx(px, py, state.strokeThickness)) {\n                        inside = true;\n                    }\n                    ctx.restore();\n                    return inside;\n                };\n                Processor.prototype.transformLocal = function (el, ctx) {\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.hit.Processor);\n            hit.Processor = Processor;\n        })(hit = visual.hit || (visual.hit = {}));\n    })(visual = puck.visual || (puck.visual = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var path;\n    (function (path_2) {\n        var hit;\n        (function (hit) {\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.hit = function (el, ctx, pos, hitlist) {\n                    ctx.save();\n                    this.transformLocal(el, ctx);\n                    this.draw(el, ctx);\n                    var state = el.state, px = pos[0], py = pos[1], inside = false;\n                    if (!!state.fill && ctx.raw.isPointInPath(px, py)) {\n                        inside = true;\n                    }\n                    else if (!!state.stroke) {\n                        ctx.setStrokeExtras(state.strokeLineCap, state.strokeLineJoin, state.strokeMiterLimit);\n                        if (ctx.isPointInStrokeEx(px, py, state.strokeThickness)) {\n                            inside = true;\n                        }\n                    }\n                    ctx.restore();\n                    return inside;\n                };\n                Processor.prototype.transformLocal = function (path, ctx) {\n                    ctx.preapply(path.composite.stretchTransform);\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.visual.hit.Processor);\n            hit.Processor = Processor;\n        })(hit = path_2.hit || (path_2.hit = {}));\n    })(path = puck.path || (puck.path = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var visual;\n    (function (visual) {\n        var render;\n        (function (render) {\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.render = function (bag) {\n                    var state = bag.state;\n                    if (!state.fill && !state.stroke)\n                        return false;\n                    var ctx = bag.ctx;\n                    ctx.save();\n                    var sbag = this.createStencilBag(bag);\n                    bag.stencil.draft(sbag);\n                    this.transformLocal(ctx, sbag);\n                    bag.stencil.draw(ctx, sbag);\n                    this.fill(ctx, state, sbag);\n                    this.stroke(ctx, state, sbag);\n                    ctx.restore();\n                };\n                Processor.prototype.transformLocal = function (ctx, bag) {\n                };\n                Processor.prototype.fill = function (ctx, state, sbag) {\n                    if (!state.fill)\n                        return;\n                    ctx.fillEx(sbag.fillRect, state.fill);\n                };\n                Processor.prototype.stroke = function (ctx, state, sbag) {\n                    if (!state.stroke || state.strokeThickness <= 0)\n                        return;\n                    ctx.strokeEx(sbag.strokeRect, state.stroke, state.strokeThickness);\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.render.Processor);\n            render.Processor = Processor;\n        })(render = visual.render || (visual.render = {}));\n    })(visual = puck.visual || (puck.visual = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var path;\n    (function (path) {\n        var render;\n        (function (render) {\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.transformLocal = function (ctx, bag) {\n                    var comp = bag.composite;\n                    ctx.preapply(comp.stretchTransform);\n                };\n                Processor.prototype.fill = function (ctx, state, sbag) {\n                    if (!state.fill)\n                        return;\n                    ctx.fillEx(sbag.fillRect, state.fill, state.fillRule);\n                };\n                Processor.prototype.stroke = function (ctx, state, sbag) {\n                    if (!state.stroke || state.strokeThickness <= 0)\n                        return;\n                    ctx.setStrokeExtras(state.strokeLineCap, state.strokeLineJoin, state.strokeMiterLimit);\n                    ctx.strokeEx(sbag.strokeRect, state.stroke, state.strokeThickness);\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.visual.render.Processor);\n            render.Processor = Processor;\n        })(render = path.render || (path.render = {}));\n    })(path = puck.path || (puck.path = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var path;\n    (function (path) {\n        var up;\n        (function (up) {\n            var extents;\n            (function (extents) {\n                var DirtyFlags = puck.element.DirtyFlags;\n                var rect = la.rect;\n                var oldExtents = rect.init(0, 0, 0, 0);\n                function process(bag) {\n                    var comp = bag.composite;\n                    if (!comp.hasDirt(DirtyFlags.extents))\n                        return false;\n                    var state = bag.state;\n                    rect.copyTo(comp.extents, oldExtents);\n                    rect.init(0, 0, 0, 0, comp.extents);\n                    puck.fit.extents.calc(comp.extents, state.getEffectiveStretch(comp), comp.natural, state.size);\n                    rect.transform(comp.extents, comp.transform, comp.extents);\n                    if (rect.equal(comp.extents, oldExtents))\n                        return false;\n                    rect.union(comp.paint, oldExtents);\n                    comp.taint(DirtyFlags.newbounds);\n                    return true;\n                }\n                extents.process = process;\n            })(extents = up.extents || (up.extents = {}));\n        })(up = path.up || (path.up = {}));\n    })(path = puck.path || (puck.path = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var path;\n    (function (path) {\n        var up;\n        (function (up) {\n            var DirtyFlags = puck.element.DirtyFlags;\n            var newbounds = puck.element.up.newbounds;\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.process = function (bag) {\n                    var dirt = DirtyFlags.none;\n                    if (up.extents.process(bag))\n                        dirt |= DirtyFlags.extents;\n                    newbounds.process(bag);\n                    return dirt;\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.up.Processor);\n            up.Processor = Processor;\n        })(up = path.up || (path.up = {}));\n    })(path = puck.path || (puck.path = {}));\n})(puck || (puck = {}));\nif (!CanvasRenderingContext2D.prototype.hasOwnProperty(\"backingStorePixelRatio\")) {\n    Object.defineProperty(CanvasRenderingContext2D.prototype, \"backingStorePixelRatio\", {\n        get: function () {\n            var ctx = this;\n            return ctx.webkitBackingStorePixelRatio\n                || ctx.mozBackingStorePixelRatio\n                || ctx.msBackingStorePixelRatio\n                || ctx.oBackingStorePixelRatio\n                || 1;\n        }\n    });\n}\nif (!CanvasRenderingContext2D.prototype.ellipse) {\n    CanvasRenderingContext2D.prototype.ellipse = function (x, y, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise) {\n        this.save();\n        this.translate(x, y);\n        this.rotate(rotation);\n        this.scale(radiusX, radiusY);\n        this.arc(0, 0, 1, startAngle, endAngle, antiClockwise);\n        this.restore();\n    };\n}\nif (!CanvasRenderingContext2D.prototype.isPointInStroke) {\n    CanvasRenderingContext2D.prototype.isPointInStroke = function (x, y) {\n        return false;\n    };\n}\nvar puck;\n(function (puck) {\n    var polyline;\n    (function (polyline) {\n        var down;\n        (function (down) {\n            var points;\n            (function (points) {\n                var DirtyFlags = puck.element.DirtyFlags;\n                function process(bag) {\n                    var state = bag.state, comp = bag.composite, path = state.path;\n                    if (!path) {\n                        comp.bounder.setPath(path = state.path = new curve.Path());\n                    }\n                    else if (!path.isEmpty) {\n                        return false;\n                    }\n                    for (var first = true, it = state.points.iter(), result = it.next(); !result.done; result = it.next()) {\n                        var cur = result.value;\n                        if (first) {\n                            first = false;\n                            path.moveTo(cur.x, cur.y);\n                        }\n                        else {\n                            path.lineTo(cur.x, cur.y);\n                        }\n                    }\n                    if (state.closed)\n                        path.closePath();\n                    comp.taint(DirtyFlags.padding);\n                    return true;\n                }\n                points.process = process;\n            })(points = down.points || (down.points = {}));\n        })(down = polyline.down || (polyline.down = {}));\n    })(polyline = puck.polyline || (puck.polyline = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var polyline;\n    (function (polyline) {\n        var down;\n        (function (down) {\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.process = function (bag) {\n                    down.points.process(bag);\n                    return _super.prototype.process.call(this, bag);\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.path.down.Processor);\n            down.Processor = Processor;\n        })(down = polyline.down || (polyline.down = {}));\n    })(polyline = puck.polyline || (puck.polyline = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var text;\n    (function (text) {\n        var hit;\n        (function (hit) {\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.prehit = function (el, ctx, pos) {\n                    if (!_super.prototype.prehit.call(this, el, ctx, pos))\n                        return false;\n                    var state = el.state;\n                    return !!state.fill || (!!state.stroke && state.strokeThickness > 0);\n                };\n                Processor.prototype.hit = function (el, ctx, pos, hitlist) {\n                    return true;\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.hit.Processor);\n            hit.Processor = Processor;\n        })(hit = text.hit || (text.hit = {}));\n    })(text = puck.text || (puck.text = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var text;\n    (function (text) {\n        var render;\n        (function (render) {\n            var isFirefox = /firefox/i.test(navigator.userAgent);\n            var paintRegion = la.rect.init(0, 0, 0, 0);\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.render = function (bag) {\n                    var state = bag.state, noStroke = !state.stroke || state.strokeThickness <= 0;\n                    if (!state.fill && noStroke)\n                        return false;\n                    var ctx = bag.ctx, raw = ctx.raw, comp = bag.composite;\n                    ctx.save();\n                    raw.beginPath();\n                    raw.font = state.font.toString();\n                    raw.textAlign = \"left\";\n                    paintRegion.width = comp.extents.width;\n                    paintRegion.height = comp.extents.height;\n                    if (state.fill)\n                        this.fill(raw, state, paintRegion);\n                    if (!noStroke)\n                        this.stroke(raw, state, paintRegion);\n                    ctx.restore();\n                };\n                Processor.prototype.fill = function (ctx, state, region) {\n                    state.fill.setup(ctx, region);\n                    ctx.fillStyle = state.fill.toHtml5Object();\n                    if (isFirefox) {\n                        ctx.textBaseline = \"bottom\";\n                        ctx.fillText(state.text, 0, state.size.height);\n                    }\n                    else {\n                        ctx.textBaseline = \"top\";\n                        ctx.fillText(state.text, 0, 0);\n                    }\n                };\n                Processor.prototype.stroke = function (ctx, state, region) {\n                    state.stroke.setup(ctx, region);\n                    ctx.strokeStyle = state.stroke.toHtml5Object();\n                    ctx.lineWidth = state.strokeThickness;\n                    if (isFirefox) {\n                        ctx.textBaseline = \"bottom\";\n                        ctx.strokeText(state.text, 0, state.size.height);\n                    }\n                    else {\n                        ctx.textBaseline = \"top\";\n                        ctx.strokeText(state.text, 0, 0);\n                    }\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.render.Processor);\n            render.Processor = Processor;\n        })(render = text.render || (text.render = {}));\n    })(text = puck.text || (puck.text = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var text;\n    (function (text) {\n        var up;\n        (function (up) {\n            var font;\n            (function (font) {\n                var DirtyFlags = puck.element.DirtyFlags;\n                function process(bag) {\n                    var state = bag.state, comp = bag.composite;\n                    if (!comp.hasDirt(DirtyFlags.font))\n                        return false;\n                    var size = state.size, oldWidth = size.width, oldHeight = size.height;\n                    size.width = puck.font.width.measure(state.font, state.text);\n                    size.height = puck.font.height.get(state.font);\n                    if (oldWidth !== size.width || oldHeight !== size.height) {\n                        comp.taint(DirtyFlags.extents);\n                        return true;\n                    }\n                    return false;\n                }\n                font.process = process;\n            })(font = up.font || (up.font = {}));\n        })(up = text.up || (text.up = {}));\n    })(text = puck.text || (puck.text = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var text;\n    (function (text) {\n        var up;\n        (function (up) {\n            var DirtyFlags = puck.element.DirtyFlags;\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.process = function (bag) {\n                    var dirt = DirtyFlags.none;\n                    up.font.process(bag);\n                    dirt |= _super.prototype.process.call(this, bag);\n                    return dirt;\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.up.Processor);\n            up.Processor = Processor;\n        })(up = text.up || (text.up = {}));\n    })(text = puck.text || (puck.text = {}));\n})(puck || (puck = {}));\n","namespace puck {\n    import IVisualState = puck.visual.IVisualState;\n    import IVisualComposite = puck.visual.IVisualComposite;\n    import IVisualProcessor = puck.visual.IVisualProcessor;\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    /*\n     * This represents an element that has a *fill*, *stroke*, and *strokeThickness*\n     * If *fill* or *stroke* change, visual needs repainted\n     * If a *fill* or *stroke* is cleared, *extents* needs updated\n     * If a *stroke* is cleared, *padding* needs updated\n     * If *strokeThickness* changes, *padding* needs updated\n     */\n\n    export class Visual extends Element implements visual.IVisual {\n        private $fillwatch: puck.internal.IWatcher = null;\n        private $strokewatch: puck.internal.IWatcher = null;\n\n        state: IVisualState;\n        composite: IVisualComposite;\n        processor: IVisualProcessor;\n\n        constructor(state?: IVisualState, composite?: IVisualComposite) {\n            super(state, composite);\n        }\n\n        init(state?: IVisualState, composite?: IVisualComposite) {\n            this.state = (state || new visual.VisualState()).reset();\n            this.composite = (composite || new visual.VisualComposite()).reset();\n            this.processor = {\n                down: element.down.Processor.instance,\n                up: element.up.Processor.instance,\n                render: visual.render.Processor.instance,\n                hit: visual.hit.Processor.instance,\n            };\n            this.stencil = stencil.visual;\n        }\n\n        fill(): IBrush;\n        fill(value: IBrush): this;\n        fill(value?: IBrush): any {\n            if (arguments.length < 1)\n                return this.state.fill;\n            if (this.$fillwatch) {\n                this.$fillwatch.unwatch();\n                this.$fillwatch = null;\n            }\n            if ((!value) === (!this.state.fill)) {\n                // toggling fill on/off can disturb extents\n                this.composite.taint(DirtyFlags.extents).invalidate();\n            }\n            if (value !== this.state.fill) {\n                this.state.fill = value;\n                this.composite.invalidate();\n            }\n            if (value) {\n                this.$fillwatch = value.watch(() => this.composite.invalidate());\n            }\n            return this;\n        }\n\n        stroke(): IBrush;\n        stroke(value: IBrush): this;\n        stroke(value?: IBrush): any {\n            if (arguments.length < 1)\n                return this.state.stroke;\n            if (this.$strokewatch) {\n                this.$strokewatch.unwatch();\n                this.$strokewatch = null;\n            }\n            if ((!value) === (!this.state.stroke)) {\n                // toggling stroke on/off can disturb padding\n                this.composite.taint(DirtyFlags.padding).invalidate();\n            }\n            if (value !== this.state.stroke) {\n                this.state.stroke = value;\n                this.composite.invalidate();\n            }\n            if (value) {\n                this.$strokewatch = value.watch(() => this.composite.invalidate());\n            }\n            return this;\n        }\n\n        strokeThickness(): number;\n        strokeThickness(value: number): this;\n        strokeThickness(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.strokeThickness;\n            if (value !== this.state.strokeThickness) {\n                this.state.strokeThickness = value;\n                this.composite.taint(DirtyFlags.padding);\n            }\n            return this;\n        }\n\n        sub(attr: string, func: any): any {\n            var getFunc = <Function>this[attr];\n            if (typeof getFunc !== \"function\") {\n                throw new Error(\"cannot modify sub-property, unknown attribute: \" + attr);\n            }\n            func(getFunc.call(this));\n            return this;\n        }\n    }\n}","namespace puck.stencil {\n    import IVisualState = puck.visual.IVisualState;\n    import IVisualComposite = puck.visual.IVisualComposite;\n    import RenderContext = puck.render.RenderContext;\n    import IRect = la.IRect;\n\n    export var visual: IStencil = {\n        draft(bag: IStencilBag) {\n            var state = <IVisualState>bag.state,\n                size = state.size;\n\n            la.rect.init(0, 0, size.width, size.height, bag.fillRect);\n            la.rect.init(0, 0, size.width, size.height, bag.strokeRect);\n            if (state.stroke && state.strokeThickness > 0) {\n                // visual gets contained only if stroke exists and stroke thickness is non-zero\n                var ht = state.strokeThickness / 2;\n                la.rect.shrink(bag.fillRect, la.padding.init(ht, ht, ht, ht));\n            }\n        },\n        draw(ctx: RenderContext, bag: IStencilBag) {\n            ctx.raw.beginPath();\n            ctx.raw.closePath();\n        },\n    };\n}","/// <reference path=\"Visual\" />\n/// <reference path=\"stencil/visual\" />\n\nnamespace puck {\n    import DirtyFlags = puck.element.DirtyFlags;\n    import IVisualState = puck.visual.IVisualState;\n    import IVisualComposite = puck.visual.IVisualComposite;\n    var PI2 = Math.PI * 2;\n\n    export class Ellipse extends Visual implements ellipse.IEllipse {\n        init(state?: IVisualState, composite?: IVisualComposite) {\n            super.init(state, composite);\n            this.stencil = ellipseStencil;\n        }\n\n        x(): number;\n        x(value: number): this;\n        x(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.offset.x;\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        y(): number;\n        y(value: number): this;\n        y(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.offset.y;\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        width(): number;\n        width(value: number): this;\n        width(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.size.width;\n            if (this.state.size.width !== value) {\n                this.state.size.width = value;\n                this.composite.taint(DirtyFlags.transform | DirtyFlags.extents);\n            }\n            return this;\n        }\n\n        height(): number;\n        height(value: number): this;\n        height(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.size.height;\n            if (this.state.size.height !== value) {\n                this.state.size.height = value;\n                this.composite.taint(DirtyFlags.transform | DirtyFlags.extents);\n            }\n            return this;\n        }\n    }\n\n    var ellipseStencil = <stencil.IStencil>{\n        draft: stencil.visual.draft,\n        draw(ctx: render.RenderContext, bag: stencil.IStencilBag) {\n            var fr = bag.fillRect;\n            if (fr.width <= 0 || fr.height <= 0) {\n                // degenerate\n                return;\n            }\n            var rx = fr.width / 2,\n                ry = fr.height / 2;\n            var raw = ctx.raw;\n            raw.beginPath();\n            raw.ellipse(fr.x + rx, fr.y + ry, rx, ry, 0, 0, PI2, false);\n            raw.closePath();\n        }\n    };\n}","namespace puck {\n    export enum FillRule {\n        evenodd = 0,\n        nonzero = 1,\n    }\n\n    export enum PenLineJoin {\n        miter = 0,\n        bevel = 1,\n        round = 2,\n    }\n\n    export enum PenLineCap {\n        flat = 0,\n        square = 1,\n        round = 2,\n        triangle = 3,\n    }\n}","namespace puck {\n    export var FontStyle = {\n        normal: \"normal\",\n        italic: \"italic\",\n        oblique: \"oblique\"\n    };\n\n    export var FontStretch = {\n        ultraCondensed: \"ultra-condensed\",\n        extraCondensed: \"extra-condensed\",\n        condensed: \"condensed\",\n        semiCondensed: \"semi-condensed\",\n        normal: \"normal\",\n        semiExpanded: \"semi-expanded\",\n        expanded: \"expanded\",\n        extraExpanded: \"extra-expanded\",\n        ultraExpanded: \"ultra-expanded\"\n    };\n\n    export enum FontWeight {\n        thin = 100,\n        extraLight = 200,\n        light = 300,\n        normal = 400,\n        medium = 500,\n        semiBold = 600,\n        bold = 700,\n        extraBold = 800,\n        black = 900,\n        extraBlack = 950,\n    }\n\n    export interface IFont {\n        family: string;\n        size: number;\n        stretch: string;\n        style: string;\n        weight: FontWeight;\n        toString(): string;\n    }\n\n    export var defaultFont: IFont = {\n        family: `\\\"Segoe UI\\\",Roboto,Helvetica,Arial,sans-serif`,\n        size: 14,\n        stretch: FontStretch.normal,\n        style: FontStyle.normal,\n        weight: FontWeight.normal,\n        toString(): string {\n            return font.toString(defaultFont);\n        },\n    };\n}","namespace puck {\n    export class FrameDebug {\n        private $onBeginProcess: Function = null;\n        private $onEndProcess: Function = null;\n        private $onBeginRender: Function = null;\n        private $onEndRender: Function = null;\n\n        onBeginProcess(cb: Function): this {\n            this.$onBeginProcess = cb;\n            return this;\n        }\n\n        onEndProcess(cb: Function): this {\n            this.$onEndProcess = cb;\n            return this;\n        }\n\n        onBeginRender(cb: Function): this {\n            this.$onBeginRender = cb;\n            return this;\n        }\n\n        onEndRender(cb: Function): this {\n            this.$onEndRender = cb;\n            return this;\n        }\n\n        beginProcess() {\n            this.$onBeginProcess && this.$onBeginProcess();\n        }\n\n        endProcess() {\n            this.$onEndProcess && this.$onEndProcess();\n        }\n\n        beginRender() {\n            this.$onBeginRender && this.$onBeginRender();\n        }\n\n        endRender() {\n            this.$onEndRender && this.$onEndRender();\n        }\n    }\n}","namespace puck {\n    export interface IGradientBrush extends IBrush {\n        spreadMethod(): GradientSpreadMethod;\n        spreadMethod(value: GradientSpreadMethod): this;\n        mappingMode(): BrushMappingMode;\n        mappingMode(value: BrushMappingMode): this;\n        stops(): GradientStops;\n\n        sub(attr: \"stops\", func: (value: GradientStops) => any): this;\n        sub(attr: string, func: any): this;\n    }\n\n    export abstract class GradientBrush implements IGradientBrush {\n        private $cachedBrush: string | CanvasGradient | CanvasPattern = null;\n        private $cachedBounds = la.rect.init(0, 0, 0, 0);\n        protected $changer = new puck.internal.WatchChanger();\n\n        private $stops = new GradientStops();\n        private $spreadMethod: GradientSpreadMethod = GradientSpreadMethod.pad;\n        private $mappingMode: BrushMappingMode = BrushMappingMode.relativeToBounds;\n\n        constructor() {\n            this.$stops.watch(() => this.$changer.on());\n        }\n\n        spreadMethod(): GradientSpreadMethod;\n        spreadMethod(value: GradientSpreadMethod): this;\n        spreadMethod(value?: GradientSpreadMethod): any {\n            if (arguments.length < 1)\n                return this.$spreadMethod;\n            if (this.$spreadMethod !== value) {\n                this.$spreadMethod = value;\n                this.$changer.on();\n            }\n            return this;\n        }\n\n        mappingMode(): BrushMappingMode;\n        mappingMode(value: BrushMappingMode): this;\n        mappingMode(value?: BrushMappingMode): any {\n            if (arguments.length < 1)\n                return this.$mappingMode;\n            if (this.$mappingMode !== value) {\n                this.$mappingMode = value;\n                this.$changer.on();\n            }\n            return this;\n        }\n\n        stops(): GradientStops {\n            return this.$stops;\n        }\n\n        sub(attr: string, func: (value: any) => any): this {\n            var getFunc = <Function>this[attr];\n            if (typeof getFunc !== \"function\") {\n                throw new Error(\"cannot modify sub-property, unknown attribute: \" + attr);\n            }\n            func(getFunc.call(this));\n            return this;\n        }\n\n        watch(onChanged: ()=>void): puck.internal.IWatcher {\n            return this.$changer.watch(onChanged);\n        }\n\n        setup(ctx: CanvasRenderingContext2D, region: la.IRect) {\n            if (this.$cachedBrush && la.rect.equal(this.$cachedBounds, region))\n                return;\n            la.rect.copyTo(region, this.$cachedBounds);\n            this.$cachedBrush = this.createBrush(ctx, region);\n        }\n\n        toHtml5Object(): any {\n            return this.$cachedBrush;\n        }\n\n        protected createBrush(ctx: CanvasRenderingContext2D, region: la.IRect): string | CanvasGradient | CanvasPattern {\n            switch (this.$spreadMethod) {\n                case GradientSpreadMethod.pad:\n                    return this.createPad(ctx, region);\n                default:\n                case GradientSpreadMethod.reflect:\n                    return this.createReflect(ctx, region);\n                case GradientSpreadMethod.repeat:\n                    return this.createRepeat(ctx, region);\n            }\n        }\n\n        protected abstract createPad(ctx: CanvasRenderingContext2D, region: la.IRect): string | CanvasGradient | CanvasPattern;\n\n        protected abstract createReflect(ctx: CanvasRenderingContext2D, region: la.IRect): string | CanvasGradient | CanvasPattern;\n\n        protected abstract createRepeat(ctx: CanvasRenderingContext2D, region: la.IRect): string | CanvasGradient | CanvasPattern;\n\n        protected mapPoint(region: la.IRect, point: la.IPoint): la.IPoint {\n            var mapped = {x: point.x, y: point.y};\n            if (this.$mappingMode === BrushMappingMode.relativeToBounds) {\n                mapped.x *= region.width;\n                mapped.y *= region.height;\n            }\n            mapped.x += region.x;\n            mapped.y += region.y;\n            return mapped;\n        }\n    }\n}","namespace puck {\n    export enum GradientSpreadMethod {\n        pad = 0,\n        reflect = 1,\n        repeat = 2,\n    }\n}","namespace puck {\n    export interface IGradientStop {\n        color: Color;\n        offset: number;\n    }\n\n    export class GradientStop implements IGradientStop {\n        constructor(public color: Color, public offset: number) {\n            Object.freeze(this);\n        }\n    }\n}","namespace puck {\n    export class PuckArray<T> {\n        protected $backing: T[] = [];\n        protected $changer = new puck.internal.WatchChanger();\n\n        get length() {\n            return this.$backing.length;\n        }\n\n        clear(): this {\n            this.$backing.length = 0;\n            this.$changer.on();\n            return this;\n        }\n\n        add(item: T): this {\n            this.$backing.push(item);\n            Object.freeze(item);\n            this.$changer.on();\n            return this;\n        }\n\n        addMany(items: T[]): this {\n            var backing = this.$backing;\n            for (var i = 0; i < items.length; i++) {\n                Object.freeze(items[i]);\n            }\n            backing.push.apply(backing, items);\n            this.$changer.on();\n            return this;\n        }\n\n        insert(index: number, item: T): this {\n            this.$backing.splice(index, 0, item);\n            Object.freeze(item);\n            this.$changer.on();\n            return this;\n        }\n\n        insertMany(index: number, items: T[]): this {\n            for (var i = 0; i < items.length; i++) {\n                Object.freeze(items[i]);\n            }\n            var backing = this.$backing;\n            for (var i = items.length - 1; i >= 0; i--) {\n                backing.splice(index, 0, items[i]);\n            }\n            this.$changer.on();\n            return this;\n        }\n\n        edit(oldItem: T, newItem: T): this {\n            return this.editAt(this.$backing.indexOf(oldItem), newItem);\n        }\n\n        editAt(index: number, newItem: T): this {\n            var backing = this.$backing;\n            if (index < 0 && index >= backing.length)\n                return this;\n            backing[index] = newItem;\n            Object.freeze(newItem);\n            this.$changer.on();\n            return this;\n        }\n\n        remove(item: T) {\n            return this.removeAt(this.$backing.indexOf(item));\n        }\n\n        removeAt(index: number) {\n            var backing = this.$backing;\n            if (index < 0 && index >= backing.length)\n                return this;\n            backing.splice(index, 1);\n            this.$changer.on();\n            return this;\n        }\n\n        watch(onChanged: () => void): puck.internal.IWatcher {\n            return this.$changer.watch(onChanged);\n        }\n\n        iter(): Iterator<T> {\n            return PuckArray.arrayIter<T>(this.$backing);\n        }\n\n        static arrayIter<T>(arr: T[]): Iterator<T> {\n            var i = -1;\n            return {\n                next(): IteratorResult<T> {\n                    i++;\n                    if (i >= arr.length)\n                        return {done: true};\n                    return {done: false, value: arr[i]};\n                }\n            }\n        }\n    }\n}","/// <reference path=\"PuckArray\" />\n\nnamespace puck {\n    /*\n     * Represents an array of GradientStop\n     * Includes change notification when array is mutated\n     */\n    export class GradientStops extends PuckArray<IGradientStop> {\n        paddedIter(): Iterator<IGradientStop> {\n            var min: IGradientStop = null;\n            var max: IGradientStop = null;\n\n            var tmp: IGradientStop[] = this.$backing.slice(0);\n            for (var i = 0; i < tmp.length; i++) {\n                let cur = tmp[i];\n                tmp.push(cur);\n                if (!min || cur.offset < min.offset)\n                    min = cur;\n                if (!max || cur.offset > max.offset)\n                    max = cur;\n            }\n\n            if (!!min)\n                tmp.unshift({offset: 0, color: min.color});\n            if (!!max)\n                tmp.push({offset: 1, color: max.color});\n\n            return PuckArray.arrayIter<IGradientStop>(tmp);\n        }\n    }\n}","namespace puck {\n    import IImageState = puck.image.IImageState;\n    import IImageComposite = puck.image.IImageComposite;\n    import IImageProcessor = puck.image.IImageProcessor;\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    /*\n     * Represents an Image object to render\n     * By default, stretch is set to none which will use the image's natural size as extents\n     * If another stretch is represented, image will transform into width/height specified.\n     */\n\n    export class Image extends Element implements image.IImage {\n        state: IImageState;\n        composite: IImageComposite;\n        processor: IImageProcessor;\n        stencil: stencil.IStencil;\n\n        constructor(state?: IImageState, composite?: IImageComposite) {\n            super(state, composite);\n        }\n\n        init(state?: IImageState, composite?: IImageComposite) {\n            this.state = (state || new image.ImageState()).reset();\n            this.composite = (composite || new image.ImageComposite()).reset();\n            this.processor = {\n                down: image.down.Processor.instance,\n                up: image.up.Processor.instance,\n                render: element.render.Processor.instance,\n                hit: image.hit.Processor.instance,\n            };\n            this.stencil = imageStencil;\n            this.state.source.watch(\n                () => this.onSourceChanged(),\n                (e) => this.onSourceErrored(e),\n                () => this.onSourceLoaded());\n        }\n\n        x(): number;\n        x(value: number): this;\n        x(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.offset.x;\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        y(): number;\n        y(value: number): this;\n        y(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.offset.y;\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        width(): number;\n        width(value: number): this;\n        width(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.size.width;\n            if (this.state.size.width !== value) {\n                this.state.size.width = value;\n                this.composite.taint(DirtyFlags.stretch | DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        height(): number;\n        height(value: number): this;\n        height(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.size.height;\n            if (this.state.size.height !== value) {\n                this.state.size.height = value;\n                this.composite.taint(DirtyFlags.stretch | DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        stretch(): Stretch;\n        stretch(value: Stretch): this;\n        stretch(value?: Stretch): any {\n            if (arguments.length < 1)\n                return this.state.stretch;\n            if (this.state.stretch !== value) {\n                this.state.stretch = value;\n                this.composite.taint(DirtyFlags.stretch);\n            }\n            return this;\n        }\n\n        sourceUri(): string;\n        sourceUri(value: string): this;\n        // invalidations come through watcher\n        sourceUri(value?: string): any {\n            if (arguments.length < 1)\n                return this.state.source.uri;\n            this.state.source.uri = value;\n            return this;\n        }\n\n        protected onSourceChanged() {\n            this.setNaturalSize(0, 0);\n        }\n\n        protected onSourceErrored(err: any) {\n            console.error(\"error loading image\", err);\n        }\n\n        protected onSourceLoaded() {\n            var source = this.state.source;\n            this.setNaturalSize(source.naturalWidth, source.naturalHeight);\n        }\n\n        protected setNaturalSize(width: number, height: number) {\n            var naturalSize = this.state.natural;\n            naturalSize.width = width;\n            naturalSize.height = height;\n            this.composite.taint(DirtyFlags.stretch | DirtyFlags.extents).invalidate();\n        }\n    }\n\n    var imageStencil = <stencil.IStencil>{\n        draft(bag: stencil.IStencilBag) {\n        },\n        draw(ctx: render.RenderContext, bag: stencil.IStencilBag) {\n            var state = <IImageState>bag.state,\n                comp = <IImageComposite>bag.composite;\n            ctx.preapply(comp.stretchTransform);\n            state.source.draw(ctx.raw);\n        },\n    };\n}","/// <reference path=\"Container\" />\n\nnamespace puck {\n    import IContainerState = puck.container.IContainerState;\n    import IContainerComposite = puck.container.IContainerComposite;\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    export class Layer extends Container implements layer.ILayer {\n        private $ctx: render.RenderContext;\n        private $timer: Timer;\n        frameDebug: FrameDebug;\n\n        width(): number {\n            return this.$ctx.raw.canvas.width;\n        }\n\n        height(): number {\n            return this.$ctx.raw.canvas.height;\n        }\n\n        init(state?: IContainerState, composite?: IContainerComposite) {\n            super.init(state, composite);\n            this.frameDebug = new FrameDebug();\n            this.$ctx = new render.RenderContext();\n            this.$timer = new Timer((now) => this.onTick(now));\n        }\n\n        attach(ctx: CanvasRenderingContext2D): this {\n            this.$ctx.init(ctx);\n            return this;\n        }\n\n        activate(): this {\n            this.$timer.enable();\n            return this;\n        }\n\n        deactivate(): this {\n            this.$timer.disable();\n            return this;\n        }\n\n        process(): this {\n            this.frameDebug.beginProcess();\n            engine.process(this);\n            this.frameDebug.endProcess();\n            return this;\n        }\n\n        render(): this {\n            var ctx = this.$ctx,\n                paint = this.composite.paint,\n                raw = ctx.raw;\n\n            this.frameDebug.beginRender();\n            raw.fillStyle = \"#ffffff\";\n            raw.fillRect(paint.x, paint.y, paint.width, paint.height);\n            engine.render(this, ctx, paint);\n            this.frameDebug.endRender();\n\n            return this;\n        }\n\n        protected onTick(now: number) {\n            this.process()\n                .render();\n        }\n    }\n}","/// <reference path=\"GradientBrush\" />\n\nnamespace puck {\n    var fallbackColor = Color.fromHex(\"#FF000000\");\n\n    export interface ILinearGradientBrush extends IGradientBrush {\n        start(): la.IPoint;\n        start(value: la.IPoint): this;\n        end(): la.IPoint;\n        end(value: la.IPoint): this;\n    }\n\n    export class LinearGradientBrush extends GradientBrush implements ILinearGradientBrush {\n        private $start: la.IPoint = {x: 0, y: 0};\n        private $end: la.IPoint = {x: 0, y: 1};\n\n        start(): la.IPoint;\n        start(value: la.IPoint): this;\n        start(value?: la.IPoint): any {\n            if (arguments.length < 1)\n                return this.$start;\n            if (this.$start !== value) {\n                this.$start = value;\n                Object.freeze(value);\n                this.$changer.on();\n            }\n            return this;\n        }\n\n        end(): la.IPoint;\n        end(value: la.IPoint): this;\n        end(value?: la.IPoint): any {\n            if (arguments.length < 1)\n                return this.$end;\n            if (this.$end !== value) {\n                this.$end = value;\n                Object.freeze(value);\n                this.$changer.on();\n            }\n            return this;\n        }\n\n        protected createPad(ctx: CanvasRenderingContext2D, region: la.IRect): string|CanvasGradient|CanvasPattern {\n            var mstart = this.mapPoint(region, this.$start);\n            var mend = this.mapPoint(region, this.$end);\n            var grd = ctx.createLinearGradient(mstart.x, mstart.y, mend.x, mend.y);\n            for (var it = this.stops().iter(), result = it.next(); !result.done; result = it.next()) {\n                addColorStop(grd, result.value);\n            }\n            return grd;\n        }\n\n        protected createReflect(ctx: CanvasRenderingContext2D, region: la.IRect): string|CanvasGradient|CanvasPattern {\n            var mstart = this.mapPoint(region, this.$start);\n            var mend = this.mapPoint(region, this.$end);\n            return this.createInterpolated(ctx, linearGradient.createRepeatInterpolator(mstart, mend, region));\n        }\n\n        protected createRepeat(ctx: CanvasRenderingContext2D, region: la.IRect): string|CanvasGradient|CanvasPattern {\n            var mstart = this.mapPoint(region, this.$start);\n            var mend = this.mapPoint(region, this.$end);\n            return this.createInterpolated(ctx, linearGradient.createReflectInterpolator(mstart, mend, region));\n        }\n\n        private createInterpolated(ctx: CanvasRenderingContext2D, interpolator: linearGradient.IInterpolator) {\n            var grd = ctx.createLinearGradient(interpolator.x0, interpolator.y0, interpolator.x1, interpolator.y1);\n            var allStops = this.stops().paddedIter();\n            for (; interpolator.step();) {\n                for (var result = allStops.next(); !result.done; result = allStops.next()) {\n                    let cur = result.value;\n                    let inter = {\n                        color: cur.color,\n                        offset: interpolator.interpolate(cur.offset)\n                    };\n                    if (inter.offset >= 0 && inter.offset <= 1)\n                        addColorStop(grd, inter);\n                }\n            }\n            return grd;\n        }\n    }\n\n    function addColorStop(grd: CanvasGradient, stop: IGradientStop) {\n        // Placing color stop in between [0.0, 1.0]\n        // Otherwise, gradient will not render\n        var offset = Math.min(1.0, Math.max(0.0, stop.offset));\n        var color = (stop.color || fallbackColor).toString();\n        grd.addColorStop(offset, color);\n    }\n}","namespace puck {\n    import IPathState = puck.path.IPathState;\n    import IPathComposite = puck.path.IPathComposite;\n    import IPathProcessor = puck.path.IPathProcessor;\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    /*\n     * This represents a multisegment path managed through curve API\n     * If any stroke parameters change, we need to recalculate *padding*\n     * Calculation of filled/stroked bounds is done via curve\n     */\n\n    export class Path extends Visual implements path.IPath {\n        state: IPathState;\n        composite: IPathComposite;\n        processor: IPathProcessor;\n\n        constructor(state?: IPathState, composite?: IPathComposite) {\n            super(state, composite);\n        }\n\n        init(state?: IPathState, composite?: IPathComposite) {\n            this.state = (state || new path.PathState()).reset();\n            this.composite = (composite || new path.PathComposite()).reset();\n            this.processor = {\n                down: path.down.Processor.instance,\n                up: path.up.Processor.instance,\n                render: path.render.Processor.instance,\n                hit: path.hit.Processor.instance,\n            };\n            this.stencil = stencil.path;\n        }\n\n        x(): number;\n        x(value: number): this;\n        x(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.offset.x;\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        y(): number;\n        y(value: number): this;\n        y(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.offset.y;\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        width(): number;\n        width(value: number): this;\n        width(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.size.width;\n            if (this.state.size.width !== value) {\n                this.state.size.width = value;\n                this.composite.taint(DirtyFlags.stretch | DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        height(): number;\n        height(value: number): this;\n        height(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.size.height;\n            if (this.state.size.height !== value) {\n                this.state.size.height = value;\n                this.composite.taint(DirtyFlags.stretch | DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        stretch(): Stretch;\n        stretch(value: Stretch): this;\n        stretch(value?: Stretch): any {\n            if (arguments.length < 1)\n                return this.state.stretch;\n            if (this.state.stretch !== value) {\n                this.state.stretch = value;\n                this.composite.taint(DirtyFlags.stretch);\n            }\n            return this;\n        }\n\n        path(): curve.Path;\n        path(value: curve.Path): this;\n        path(value?: curve.Path): any {\n            if (arguments.length < 1)\n                return this.state.path;\n            if (this.state.path !== value) {\n                this.state.path = value;\n                this.composite.bounder.setPath(value);\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        }\n\n        fillRule(): FillRule;\n        fillRule(value: FillRule): this;\n        fillRule(value?: FillRule): any {\n            if (arguments.length < 1)\n                return this.state.fillRule;\n            if (this.state.fillRule !== value) {\n                this.state.fillRule = value;\n                this.composite.invalidate();\n            }\n            return this;\n        }\n\n        strokeLineCap(): PenLineCap;\n        strokeLineCap(value: PenLineCap): this;\n        strokeLineCap(value?: PenLineCap): any {\n            if (arguments.length < 1)\n                return this.state.strokeLineCap;\n            if (this.state.strokeLineCap !== value) {\n                this.state.strokeLineCap = value;\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        }\n\n        strokeLineJoin(): PenLineJoin;\n        strokeLineJoin(value: PenLineJoin): this;\n        strokeLineJoin(value?: PenLineJoin): any {\n            if (arguments.length < 1)\n                return this.state.strokeLineJoin;\n            if (this.state.strokeLineJoin !== value) {\n                this.state.strokeLineJoin = value;\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        }\n\n        strokeMiterLimit(): number;\n        strokeMiterLimit(value: number): this;\n        strokeMiterLimit(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.strokeMiterLimit;\n            if (this.state.strokeMiterLimit !== value) {\n                this.state.strokeMiterLimit = value;\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        }\n    }\n}","/// <reference path=\"PuckArray\" />\n\nnamespace puck {\n    export class Points extends PuckArray<la.IPoint> {\n    }\n}","namespace puck {\n    import DirtyFlags = puck.element.DirtyFlags;\n    import IPolylineState = puck.polyline.IPolylineState;\n    import IPathComposite = puck.path.IPathComposite;\n    import IPolylineProcessor = puck.polyline.IPolylineProcessor;\n\n    export class Polyline extends Visual implements polyline.IPolyline {\n        state: polyline.IPolylineState;\n        composite: path.IPathComposite;\n        processor: IPolylineProcessor;\n\n        constructor(state?: IPolylineState, composite?: IPathComposite) {\n            super(state, composite);\n        }\n\n        init(state ?: IPolylineState, composite ?: IPathComposite) {\n            this.state = (state || new polyline.PolylineState()).reset();\n            this.composite = (composite || new path.PathComposite()).reset();\n            this.processor = {\n                down: polyline.down.Processor.instance,\n                up: path.up.Processor.instance,\n                render: path.render.Processor.instance,\n                hit: path.hit.Processor.instance,\n            };\n            this.stencil = stencil.path;\n            this.state.points.watch(() => {\n                if (this.state.path)\n                    this.state.path.reset();\n                // forces repathing from points\n            });\n        }\n\n        points(): Points {\n            return this.state.points;\n        }\n\n        closed(): boolean;\n        closed(value: boolean): this;\n        closed(value?: boolean): any {\n            if (arguments.length < 1)\n                return this.state.closed;\n            if (this.state.closed !== value) {\n                this.state.closed = value;\n                this.composite.invalidate();\n            }\n            return this;\n        }\n\n        x(): number;\n        x(value: number): this;\n        x(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.offset.x;\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        y(): number;\n        y(value: number): this;\n        y(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.offset.y;\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        width(): number;\n        width(value: number): this;\n        width(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.size.width;\n            if (this.state.size.width !== value) {\n                this.state.size.width = value;\n                this.composite.taint(DirtyFlags.stretch | DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        height(): number;\n        height(value: number): this;\n        height(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.size.height;\n            if (this.state.size.height !== value) {\n                this.state.size.height = value;\n                this.composite.taint(DirtyFlags.stretch | DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        stretch(): Stretch;\n        stretch(value: Stretch): this;\n        stretch(value?: Stretch): any {\n            if (arguments.length < 1)\n                return this.state.stretch;\n            if (this.state.stretch !== value) {\n                this.state.stretch = value;\n                this.composite.taint(DirtyFlags.stretch);\n            }\n            return this;\n        }\n\n        path(): curve.Path;\n        path(value: curve.Path): this;\n        path(value?: curve.Path): any {\n            if (arguments.length < 1)\n                return this.state.path;\n            if (this.state.path !== value) {\n                this.state.path = value;\n                this.composite.bounder.setPath(value);\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        }\n\n        fillRule(): FillRule;\n        fillRule(value: FillRule): this;\n        fillRule(value?: FillRule): any {\n            if (arguments.length < 1)\n                return this.state.fillRule;\n            if (this.state.fillRule !== value) {\n                this.state.fillRule = value;\n                this.composite.invalidate();\n            }\n            return this;\n        }\n\n        strokeLineCap(): PenLineCap;\n        strokeLineCap(value: PenLineCap): this;\n        strokeLineCap(value?: PenLineCap): any {\n            if (arguments.length < 1)\n                return this.state.strokeLineCap;\n            if (this.state.strokeLineCap !== value) {\n                this.state.strokeLineCap = value;\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        }\n\n        strokeLineJoin(): PenLineJoin;\n        strokeLineJoin(value: PenLineJoin): this;\n        strokeLineJoin(value?: PenLineJoin): any {\n            if (arguments.length < 1)\n                return this.state.strokeLineJoin;\n            if (this.state.strokeLineJoin !== value) {\n                this.state.strokeLineJoin = value;\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        }\n\n        strokeMiterLimit(): number;\n        strokeMiterLimit(value: number): this;\n        strokeMiterLimit(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.strokeMiterLimit;\n            if (this.state.strokeMiterLimit !== value) {\n                this.state.strokeMiterLimit = value;\n                this.composite\n                    .taint(DirtyFlags.padding)\n                    .invalidate();\n            }\n            return this;\n        }\n    }\n}","/// <reference path=\"GradientBrush\" />\n\nnamespace puck {\n    var tmpCanvas: HTMLCanvasElement = document.createElement('canvas');\n    var tmpCtx: CanvasRenderingContext2D = tmpCanvas.getContext('2d');\n    var epsilon = 1E-10;\n    var fallbackColor = Color.fromHex(\"#FF000000\");\n\n    export interface IRadialGradientBrush extends IGradientBrush {\n        center(): la.IPoint;\n        center(value: la.IPoint): this;\n        origin(): la.IPoint;\n        origin(value: la.IPoint): this;\n        radiusX(): number;\n        radiusX(value: number): this;\n        radiusY(): number;\n        radiusY(value: number): this;\n    }\n\n    export class RadialGradientBrush extends GradientBrush implements IRadialGradientBrush {\n        private $center: la.IPoint = {x: 0.5, y: 0.5};\n        private $origin: la.IPoint = {x: 0.5, y: 0.5};\n        private $radius: la.IPoint = {x: 0.5, y: 0.5};\n\n        center(): la.IPoint;\n        center(value: la.IPoint): this;\n        center(value?: la.IPoint): any {\n            if (arguments.length < 1)\n                return this.$center;\n            if (this.$center !== value) {\n                this.$center = value;\n                Object.freeze(value);\n                this.$changer.on();\n            }\n            return this;\n        }\n\n        origin(): la.IPoint;\n        origin(value: la.IPoint): this;\n        origin(value?: la.IPoint): any {\n            if (arguments.length < 1)\n                return this.$origin;\n            if (this.$origin !== value) {\n                this.$origin = value;\n                Object.freeze(value);\n                this.$changer.on();\n            }\n            return this;\n        }\n\n        radiusX(): number;\n        radiusX(value: number): this;\n        radiusX(value?: number): any {\n            if (arguments.length < 1)\n                return this.$radius.x;\n            if (this.$radius.x !== value) {\n                this.$radius.x = value;\n                this.$changer.on();\n            }\n            return this;\n        }\n\n        radiusY(): number;\n        radiusY(value: number): this;\n        radiusY(value?: number): any {\n            if (arguments.length < 1)\n                return this.$radius.y;\n            if (this.$radius.y !== value) {\n                this.$radius.y = value;\n                this.$changer.on();\n            }\n            return this;\n        }\n\n        protected createPad(ctx: CanvasRenderingContext2D, region: la.IRect): string|CanvasGradient|CanvasPattern {\n            var data = this.getPointData(region);\n            var grd = (!data.balanced ? tmpCtx : ctx).createRadialGradient(data.x0, data.y0, 0, data.x1, data.y1, data.r1);\n            for (var it = this.stops().iter(), result = it.next(); !result.done; result = it.next()) {\n                addColorStop(grd, result.value);\n            }\n            return this.fit(ctx, grd, data, region);\n        }\n\n        protected createReflect(ctx: CanvasRenderingContext2D, region: la.IRect): string|CanvasGradient|CanvasPattern {\n            var data = this.getPointData(region);\n            return this.createInterpolated(data, region, false);\n        }\n\n        protected createRepeat(ctx: CanvasRenderingContext2D, region: la.IRect): string|CanvasGradient|CanvasPattern {\n            var data = this.getPointData(region);\n            return this.createInterpolated(data, region, true);\n        }\n\n        private createInterpolated(data: radialGradient.IRadialPointData, bounds: la.IRect, reflect: boolean): CanvasPattern {\n            tmpCanvas.width = bounds.width;\n            tmpCanvas.height = bounds.height;\n            tmpCtx.save();\n            if (!data.balanced)\n                tmpCtx.scale(data.sx, data.sy);\n            tmpCtx.globalCompositeOperation = \"destination-over\";\n\n            var inverted = false;\n            var allStops = this.stops().paddedIter();\n            for (var extender = radialGradient.createExtender(data, bounds); extender.step(); inverted = !inverted) {\n                var grd = extender.createGradient(tmpCtx);\n                for (var result = allStops.next(); !result.done; result = allStops.next()) {\n                    let cur = result.value;\n                    let inter = {\n                        color: cur.color,\n                        offset: (reflect && inverted) ? 1 - cur.offset : cur.offset,\n                    };\n                    addColorStop(grd, inter);\n                }\n                tmpCtx.fillStyle = grd;\n                tmpCtx.beginPath();\n                tmpCtx.arc(extender.x1, extender.y1, extender.r1, 0, 2 * Math.PI, false);\n                tmpCtx.closePath();\n                tmpCtx.fill();\n            }\n\n            var pattern = tmpCtx.createPattern(tmpCanvas, \"no-repeat\");\n            tmpCtx.restore();\n            return pattern;\n        }\n\n        private getPointData(bounds: la.IRect): radialGradient.IRadialPointData {\n            var mcenter = this.mapPoint(bounds, this.$center);\n            var morigin = this.mapPoint(bounds, this.$origin);\n            var mradius = this.mapPoint(bounds, this.$radius);\n\n            var rad = Math.max(mradius.x, mradius.y);\n            var side = Math.max(bounds.width, bounds.height),\n                sx = bounds.width / side,\n                sy = bounds.height / side;\n            return {\n                x0: morigin.x / sx,\n                y0: morigin.y / sy,\n                x1: mcenter.x / sx,\n                y1: mcenter.y / sy,\n                r1: rad,\n                side: side,\n                sx: bounds.width / side,\n                sy: bounds.height / side,\n                balanced: Math.abs(mradius.x - mradius.y) < epsilon\n            };\n        }\n\n        private fit(ctx: CanvasRenderingContext2D, fill: string|CanvasGradient|CanvasPattern, data: radialGradient.IRadialPointData, bounds: la.IRect): CanvasPattern {\n            //NOTE:\n            //  This will return the CanvasGradient if bounds are square\n            //  Otherwise, it will create a CanvasPattern by scaling square coordinate space into bounds\n            if (data.balanced)\n                return fill;\n\n            tmpCanvas.width = bounds.width;\n            tmpCanvas.height = bounds.height;\n\n            tmpCtx.save();\n            tmpCtx.scale(data.sx, data.sy);\n            tmpCtx.fillStyle = fill;\n            tmpCtx.fillRect(0, 0, data.side, data.side);\n            var pattern = ctx.createPattern(tmpCanvas, \"no-repeat\");\n            tmpCtx.restore();\n            return pattern;\n        }\n    }\n\n    function addColorStop(grd: CanvasGradient, stop: IGradientStop) {\n        // Placing color stop in between [0.0, 1.0]\n        // Otherwise, gradient will not render\n        var offset = Math.min(1.0, Math.max(0.0, stop.offset));\n        var color = (stop.color || fallbackColor).toString();\n        grd.addColorStop(offset, color);\n    }\n}","/// <reference path=\"Visual\" />\n/// <reference path=\"stencil/visual\" />\n\nnamespace puck {\n    import DirtyFlags = puck.element.DirtyFlags;\n    import IVisualState = puck.visual.IVisualState;\n    import IVisualComposite = puck.visual.IVisualComposite;\n\n    export class Rectangle extends Visual implements rectangle.IRectangle {\n        init(state?: IVisualState, composite?: IVisualComposite) {\n            super.init(state, composite);\n            this.stencil = rectangleStencil;\n        }\n\n        x(): number;\n        x(value: number): this;\n        x(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.offset.x;\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        y(): number;\n        y(value: number): this;\n        y(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.offset.y;\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        width(): number;\n        width(value: number): this;\n        width(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.size.width;\n            if (this.state.size.width !== value) {\n                this.state.size.width = value;\n                this.composite.taint(DirtyFlags.transform | DirtyFlags.extents);\n            }\n            return this;\n        }\n\n        height(): number;\n        height(value: number): this;\n        height(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.size.height;\n            if (this.state.size.height !== value) {\n                this.state.size.height = value;\n                this.composite.taint(DirtyFlags.transform | DirtyFlags.extents);\n            }\n            return this;\n        }\n    }\n\n    var rectangleStencil = <stencil.IStencil>{\n        draft: stencil.visual.draft,\n        draw(ctx: render.RenderContext, bag: stencil.IStencilBag) {\n            var fr = bag.fillRect;\n            if (fr.width <= 0 || fr.height <= 0) {\n                // degenerate\n                return;\n            }\n            var raw = ctx.raw;\n            raw.beginPath();\n            raw.rect(fr.x, fr.y, fr.width, fr.height);\n            raw.closePath();\n        }\n    };\n}","namespace puck {\n    export interface ISolidColorBrush extends IBrush {\n        color(): Color;\n        color(value: Color): this;\n    }\n\n    export class SolidColorBrush implements ISolidColorBrush {\n        private $color: Color = null;\n        private $changer = new puck.internal.WatchChanger();\n\n        constructor(color?: Color|string) {\n            this.color(new Color(color));\n        }\n\n        color(): Color;\n        color(value: Color): this;\n        color(value?: Color): any {\n            if (arguments.length < 1)\n                return this.$color;\n            if (!Color.equals(this.$color, value)) {\n                this.$changer.on();\n            }\n            this.$color = value; // always set in case ref changes\n            return this;\n        }\n\n        watch(onChanged: () => void): puck.internal.IWatcher {\n            return this.$changer.watch(onChanged);\n        }\n\n        setup(ctx: CanvasRenderingContext2D, region: la.IRect) {\n        }\n\n        toHtml5Object(): any {\n            return this.color().toString();\n        }\n    }\n}","namespace puck {\n    /*\n     * aspect ratio (ar) = width/height\n     *\n     * none:          ignores element's width/height\n     * fill:          stretches image to fill width and height\n     * uniform:       stretches image to fill width or height (smallest factor)\n     *    natural ar > element ar => blank horizontal space\n     *    natural ar < element ar => blank vertical space\n     * uniformToFill: stretches image to fill width or height (largest factor)\n     *    natural ar > element ar => vertical overpaint\n     *    natural ar < element ar => horizontal overpaint\n     */\n\n    export enum Stretch {\n        none = 0,\n        fill = 1,\n        uniform = 2,\n        uniformToFill = 3,\n    }\n}","/// <reference path=\"Visual\" />\n\nnamespace puck {\n    import ITextState = puck.text.ITextState;\n    import IElementComposite = puck.element.IElementComposite;\n    import DirtyFlags = puck.element.DirtyFlags;\n    import ITextProcessor = puck.text.ITextProcessor;\n\n    export class Text extends Element implements text.IText {\n        private $fillwatch: puck.internal.IWatcher = null;\n        private $strokewatch: puck.internal.IWatcher = null;\n\n        state: puck.text.ITextState;\n        processor: ITextProcessor;\n\n        constructor(state?: ITextState, composite?: IElementComposite) {\n            super(state, composite);\n        }\n\n        init(state?: ITextState, composite?: IElementComposite) {\n            this.state = (state || new text.TextState()).reset();\n            this.composite = (composite || new element.ElementComposite()).reset();\n            this.processor = {\n                down: element.down.Processor.instance,\n                up: text.up.Processor.instance,\n                render: text.render.Processor.instance,\n                hit: text.hit.Processor.instance,\n            };\n            this.stencil = stencil.empty;\n        }\n\n        fill(): IBrush;\n        fill(value: IBrush): this;\n        fill(value?: IBrush): any {\n            if (arguments.length < 1)\n                return this.state.fill;\n            if (this.$fillwatch) {\n                this.$fillwatch.unwatch();\n                this.$fillwatch = null;\n            }\n            if ((!value) === (!this.state.fill)) {\n                // toggling fill on/off can disturb extents\n                this.composite.taint(DirtyFlags.extents).invalidate();\n            }\n            if (value !== this.state.fill) {\n                this.state.fill = value;\n                this.composite.invalidate();\n            }\n            if (value) {\n                this.$fillwatch = value.watch(() => this.composite.invalidate());\n            }\n            return this;\n        }\n\n        stroke(): IBrush;\n        stroke(value: IBrush): this;\n        stroke(value?: IBrush): any {\n            if (arguments.length < 1)\n                return this.state.stroke;\n            if (this.$strokewatch) {\n                this.$strokewatch.unwatch();\n                this.$strokewatch = null;\n            }\n            if ((!value) === (!this.state.stroke)) {\n                // toggling stroke on/off can disturb padding\n                this.composite.taint(DirtyFlags.padding).invalidate();\n            }\n            if (value !== this.state.stroke) {\n                this.state.stroke = value;\n                this.composite.invalidate();\n            }\n            if (value) {\n                this.$strokewatch = value.watch(() => this.composite.invalidate());\n            }\n            return this;\n        }\n\n        strokeThickness(): number;\n        strokeThickness(value: number): this;\n        strokeThickness(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.strokeThickness;\n            if (value !== this.state.strokeThickness) {\n                this.state.strokeThickness = value;\n                this.composite.taint(DirtyFlags.padding);\n            }\n            return this;\n        }\n\n        x(): number;\n        x(value: number): this;\n        x(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.offset.x;\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        y(): number;\n        y(value: number): this;\n        y(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.offset.y;\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n            return this;\n        }\n\n        text(): string;\n        text(value: string): this;\n        text(value?: string): any {\n            if (arguments.length < 1)\n                return this.state.text;\n            this.state.text = value;\n            this.composite.taint(DirtyFlags.font);\n            return this;\n        }\n\n        fontFamily(): string;\n        fontFamily(value: string): this;\n        fontFamily(value?: string): any {\n            if (arguments.length < 1)\n                return this.state.font.family;\n            if (this.state.font.family !== value) {\n                this.state.font.family = value;\n                this.composite.taint(DirtyFlags.font);\n            }\n            return this;\n        }\n\n        fontSize(): number;\n        fontSize(value: number): this;\n        fontSize(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.font.size;\n            if (this.state.font.size !== value) {\n                this.state.font.size = value;\n                this.composite.taint(DirtyFlags.font);\n            }\n            return this;\n        }\n\n        fontStretch(): string;\n        fontStretch(value: string): this;\n        fontStretch(value?: string): any {\n            if (arguments.length < 1)\n                return this.state.font.stretch;\n            if (this.state.font.stretch !== value) {\n                this.state.font.stretch = value;\n                this.composite.taint(DirtyFlags.font);\n            }\n            return this;\n        }\n\n        fontStyle(): string;\n        fontStyle(value: string): this;\n        fontStyle(value?: string): any {\n            if (arguments.length < 1)\n                return this.state.font.style;\n            if (this.state.font.style !== value) {\n                this.state.font.style = value;\n                this.composite.taint(DirtyFlags.font);\n            }\n            return this;\n        }\n\n        fontWeight(): number;\n        fontWeight(value: number): this;\n        fontWeight(value?: number): any {\n            if (arguments.length < 1)\n                return this.state.font.weight;\n            if (this.state.font.weight !== value) {\n                this.state.font.weight = value;\n                this.composite.taint(DirtyFlags.font);\n            }\n            return this;\n        }\n    }\n}","namespace puck {\n    export class Timer {\n        private enabled = false;\n        private active: number = 0;\n\n        constructor(public callback: FrameRequestCallback) {\n        }\n\n        enable() {\n            this.enabled = true;\n            this.active = animate.request((now) => this.onFrame(now));\n        }\n\n        disable() {\n            this.enabled = false;\n            if (this.active) {\n                animate.cancel(this.active);\n                this.active = 0;\n            }\n        }\n\n        protected onFrame(now: number) {\n            this.callback && this.callback(now);\n            this.active = animate.request((now) => this.onFrame(now));\n        }\n    }\n\n    namespace animate {\n        var req = window.requestAnimationFrame\n            || (<any>window).webkitRequestAnimationFrame\n            || (<any>window).mozRequestAnimationFrame\n            || (<any>window).oRequestAnimationFrame\n            || (<any>window).msRequestAnimationFrame\n            || ((callback) => window.setTimeout(callback, 1000 / 200));\n        var can = window.cancelAnimationFrame\n            || (<any>window).webkitCancelAnimationFrame\n            || (<any>window).mozCancelAnimationFrame\n            || (<any>window).oCancelAnimationFrame\n            || (<any>window).msCancelAnimationFrame\n            || ((handle: number) => window.clearTimeout(handle));\n\n        export function request(callback: FrameRequestCallback) {\n            return req(callback);\n        }\n\n        export function cancel(handle: number) {\n            return can(handle);\n        }\n    }\n}","namespace puck.element {\n    export interface IElementComposite {\n        hasDirt(match: DirtyFlags): boolean;\n        taint(newDirt: DirtyFlags): this;\n        untaint(oldDirt: DirtyFlags): this;\n        reset(): this;\n        invalidate(): this;\n        opacity: number;\n        visible: boolean;\n        transform: Float32Array;\n        padding: la.IPadding;\n        extents: la.IRect;\n        paint: la.IRect;\n    }\n    export class ElementComposite implements IElementComposite {\n        private $$dirt = DirtyFlags.none;\n\n        opacity: number;\n        visible: boolean;\n        // NOTE: transform, extents, bounds are relative to owner top-left\n        transform = la.mat3.identity();\n        padding = la.padding.init(0, 0, 0, 0);\n        extents = la.rect.init(0, 0, 0, 0);\n        // NOTE: paint is used to carry invalidated region up the tree\n        paint = la.rect.init(0, 0, 0, 0);\n\n        hasDirt(match: DirtyFlags): boolean {\n            return (this.$$dirt & match) > 0;\n        }\n\n        taint(newDirt: DirtyFlags): this {\n            this.$$dirt |= newDirt;\n            return this;\n        }\n\n        untaint(oldDirt: DirtyFlags): this {\n            this.$$dirt &= ~oldDirt;\n            return this;\n        }\n\n        reset(): this {\n            this.opacity = 1.0;\n            this.visible = true;\n            la.mat3.identity(this.transform);\n            la.padding.init(0, 0, 0, 0, this.padding);\n            la.rect.init(0, 0, 0, 0, this.extents);\n            la.rect.init(0, 0, 0, 0, this.paint);\n            this.$$dirt = DirtyFlags.none;\n            return this;\n        }\n\n        invalidate(): this {\n            this.taint(DirtyFlags.invalidate);\n            la.rect.union(this.paint, this.extents);\n            return this;\n        }\n    }\n}","/// <reference path=\"../element/ElementComposite\" />\n\nnamespace puck.container {\n    export interface IContainerComposite extends element.IElementComposite {\n    }\n    export class ContainerComposite extends element.ElementComposite implements IContainerComposite {\n    }\n}","namespace puck.element {\n    export interface IElementState {\n        //range: [0.0, 1.0]\n        opacity: number;\n        visible: boolean;\n\n        //visual offset from parent\n        offset: la.IPoint;\n        size: la.ISize;\n\n        //origin of transform in relative coordinate space ([0.0,1.0], [0.0,1.0])\n        transform: Float32Array;\n        transformOrigin: la.IPoint;\n\n        reset();\n\n        mapTransformOrigin(comp: IElementComposite): la.IPoint;\n    }\n\n    export class ElementState implements IElementState {\n        opacity: number = 1.0;\n        visible: boolean = true;\n        offset = {x: 0, y: 0};\n        size = {width: 0, height: 0};\n        transform = la.mat3.identity();\n        transformOrigin = {x: 0.5, y: 0.5};\n\n        reset(): this {\n            this.opacity = 1.0;\n            this.visible = true;\n            this.offset.x = 0;\n            this.offset.y = 0;\n            this.size.width = 0;\n            this.size.height = 0;\n            la.mat3.identity(this.transform);\n            this.transformOrigin.x = 0.5;\n            this.transformOrigin.y = 0.5;\n            return this;\n        }\n\n        mapTransformOrigin(comp: IElementComposite): la.IPoint {\n            var to = this.transformOrigin,\n                size = this.size;\n            return {\n                x: to.x * size.width,\n                y: to.y * size.height\n            };\n        }\n    }\n}","/// <reference path=\"../element/ElementState\" />\n\nnamespace puck.container {\n    export interface IContainerState extends element.IElementState {\n        // NOTE: size is ignored\n    }\n    export class ContainerState extends element.ElementState implements IContainerState {\n    }\n}","namespace puck.engine {\n    export function hit(el: element.IElement, ctx: puck.render.RenderContext, pos: Float32Array, hitlist: element.IElement[]) {\n        var processor = el.processor.hit;\n        processor.process(el, ctx, pos, hitlist);\n    }\n}","/// <reference path=\"../element/DirtyFlags\" />\n\nnamespace puck.engine {\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    // Process walks entire tree\n    // -> Down phase is processed pre-order\n    // -> Up phase is processed post-order\n    export function process(el: element.IElement, parent?: element.IElement) {\n        doDown(el, parent);\n        var ccomposites: element.IElementComposite[] = [];\n        for (var walker = walk.getWalker(el), cur = walker.next(); !!cur; cur = walker.next()) {\n            process(cur, el);\n            ccomposites.push(cur.composite);\n        }\n        doUp(el, parent, ccomposites);\n    }\n\n    const EMPTY_DOWN_COMPOSITE = <container.IContainerComposite>{\n        opacity: 1.0,\n        visible: true,\n        transform: la.mat3.identity(),\n        extents: la.rect.init(0, 0, 0, 0),\n        hasDirt(match: DirtyFlags) {\n            return false\n        },\n        taint(newDirt: DirtyFlags) {\n        },\n        untaint(oldDirt: DirtyFlags) {\n        },\n        reset() {\n        }\n    };\n\n    function doDown(el: element.IElement, parent: element.IElement) {\n        var processor = el.processor.down;\n        var bag = <element.down.IProcessorBag>{\n            walker: walk.getWalker(el),\n            state: el.state,\n            composite: el.composite,\n            pcomposite: parent ? parent.composite : EMPTY_DOWN_COMPOSITE\n        };\n        if (processor.isTainted(bag)) {\n            processor.process(bag);\n            processor.clear(bag);\n        }\n    }\n\n    function doUp(el: element.IElement, parent: element.IElement, ccomposites: element.IElementComposite[]) {\n        var processor = el.processor.up;\n        var bag = <element.up.IProcessorBag>{\n            state: el.state,\n            composite: el.composite,\n            ccomposites: ccomposites\n        };\n        if (processor.isTainted(bag)) {\n            var dirt = processor.process(bag);\n            if (parent)\n                parent.composite.taint(dirt);\n            processor.clear(bag);\n        }\n    }\n}","namespace puck.render {\r\n    import mat3 = la.mat3;\r\n\r\n    var caps: string[] = [\r\n        \"butt\", //flat\r\n        \"square\", //square\r\n        \"round\", //round\r\n        \"butt\" //triangle\r\n    ];\r\n    var joins: string[] = [\r\n        \"miter\",\r\n        \"bevel\",\r\n        \"round\"\r\n    ];\r\n    export class RenderContext {\r\n        private $$transforms = [];\r\n        currentTransform = mat3.identity();\r\n        hasFillRule: boolean;\r\n        raw: CanvasRenderingContext2D;\r\n        size: RenderContextSize;\r\n\r\n        constructor() {\r\n            Object.defineProperties(this, {\r\n                \"currentTransform\": {value: mat3.identity(), writable: false},\r\n                \"hasFillRule\": {value: RenderContext.hasFillRule, writable: false},\r\n                \"size\": {value: new RenderContextSize(), writable: false},\r\n            });\r\n        }\r\n\r\n        static get hasFillRule(): boolean {\r\n            if (navigator.appName === \"Microsoft Internet Explorer\") {\r\n                var version = getIEVersion();\r\n                return version < 0 || version > 10;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        init(ctx: CanvasRenderingContext2D): this {\r\n            Object.defineProperties(this, {\r\n                \"raw\": {value: ctx, writable: false}\r\n            });\r\n            this.size.init(ctx);\r\n            return this;\r\n        }\r\n\r\n        applyDpiRatio() {\r\n            var ratio = this.size.dpiRatio;\r\n            this.scale(ratio, ratio);\r\n        }\r\n\r\n        save() {\r\n            this.$$transforms.push(mat3.create(this.currentTransform));\r\n            this.raw.save();\r\n        }\r\n\r\n        restore() {\r\n            var old = this.$$transforms.pop();\r\n            if (old)\r\n                mat3.copyTo(old, this.currentTransform);\r\n            this.raw.restore();\r\n        }\r\n\r\n        setTransform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number) {\r\n            mat3.init(this.currentTransform, m11, m12, m21, m22, dx, dy);\r\n            this.raw.setTransform(m11, m12, m21, m22, dx, dy);\r\n        }\r\n\r\n        resetTransform() {\r\n            mat3.identity(this.currentTransform);\r\n            var raw = <any>this.raw;\r\n            if (raw.resetTransform)\r\n                raw.resetTransform();\r\n        }\r\n\r\n        transform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number) {\r\n            var ct = this.currentTransform;\r\n            mat3.multiply(ct, mat3.create([m11, m12, m21, m22, dx, dy]), ct);\r\n            this.raw.transform(m11, m12, m21, m22, dx, dy);\r\n        }\r\n\r\n        scale(x: number, y: number) {\r\n            mat3.scale(this.currentTransform, x, y);\r\n            this.raw.scale(x, y);\r\n        }\r\n\r\n        rotate(angle: number) {\r\n            var ct = this.currentTransform;\r\n            var r = mat3.createRotate(angle);\r\n            mat3.multiply(ct, r, ct); //ct = ct * r\r\n            this.raw.rotate(angle);\r\n        }\r\n\r\n        translate(x: number, y: number) {\r\n            mat3.translate(this.currentTransform, x, y);\r\n            this.raw.translate(x, y);\r\n        }\r\n\r\n        apply(mat: Float32Array) {\r\n            var ct = mat3.apply(this.currentTransform, mat);\r\n            this.raw.setTransform(ct[0], ct[1], ct[2], ct[3], ct[4], ct[5]);\r\n        }\r\n\r\n        preapply(mat: Float32Array) {\r\n            var ct = mat3.preapply(this.currentTransform, mat);\r\n            this.raw.setTransform(ct[0], ct[1], ct[2], ct[3], ct[4], ct[5]);\r\n        }\r\n\r\n        clipRect(rect: la.IRect) {\r\n            var raw = this.raw;\r\n            raw.beginPath();\r\n            raw.rect(rect.x, rect.y, rect.width, rect.height);\r\n            raw.clip();\r\n        }\r\n\r\n        fillEx(region: la.IRect, brush: IBrush, fillRule?: FillRule) {\r\n            var raw = this.raw;\r\n            brush.setup(raw, region);\r\n            raw.fillStyle = brush.toHtml5Object();\r\n            if (fillRule == null) {\r\n                (<any>raw).fillRule = raw.msFillRule = \"nonzero\";\r\n                raw.fill();\r\n            } else {\r\n                var fr = fillRule === FillRule.evenodd ? \"evenodd\" : \"nonzero\";\r\n                (<any>raw).fillRule = raw.msFillRule = fr;\r\n                raw.fill(fr);\r\n            }\r\n        }\r\n\r\n        strokeEx(region: la.IRect, brush: IBrush, thickness: number) {\r\n            var raw = this.raw;\r\n            brush.setup(raw, region);\r\n            raw.strokeStyle = brush.toHtml5Object();\r\n            raw.lineWidth = thickness;\r\n            raw.stroke();\r\n        }\r\n\r\n        isPointInStrokeEx(x: number, y: number, thickness: number): boolean {\r\n            var raw = this.raw;\r\n            raw.lineWidth = thickness;\r\n            return raw.isPointInStroke(x, y);\r\n        }\r\n\r\n        setStrokeExtras(lineCap: PenLineCap, lineJoin: PenLineJoin, miterLimit: number) {\r\n            var raw = this.raw;\r\n            raw.lineCap = caps[lineCap || 0] || caps[0];\r\n            raw.lineJoin = joins[lineJoin || 0] || joins[0];\r\n            raw.miterLimit = miterLimit;\r\n        }\r\n    }\r\n\r\n    function getIEVersion(): number {\r\n        var re = new RegExp(\"MSIE ([0-9]{1,}[\\.0-9]{0,})\");\r\n        if (re.exec(navigator.userAgent) != null)\r\n            return parseFloat(RegExp.$1);\r\n        return -1;\r\n    }\r\n}","/// <reference path=\"../render/RenderContext\" />\n\nnamespace puck.engine {\n    import RenderContext = puck.render.RenderContext;\n\n    export function render(el: element.IElement, ctx: RenderContext, region: la.IRect) {\n        var processor = el.processor.render;\n        var bag = <puck.element.render.IProcessorBag>{\n            walker: walk.getWalker(el, true),\n            state: el.state,\n            composite: el.composite,\n            stencil: (<visual.IVisual>el).stencil,\n            ctx: ctx,\n            inregion: region,\n            curregion: la.rect.init(0, 0, 0, 0),\n        };\n        processor.process(bag);\n        processor.clear(bag);\n    }\n}","namespace puck.fit.extents {\n    import mat3 = la.mat3;\n    import rect = la.rect;\n\n    export function calc(extents: la.IRect, stretch: Stretch, natural: la.IRect, size: la.ISize) {\n        if (rect.isEmpty(natural))\n            size.width = size.height = 0;\n        var fitter = fits[stretch];\n        fitter && fitter(extents, natural, size);\n    }\n\n    interface IFitter {\n        (final: la.IRect, natural: la.IRect, size: la.ISize);\n    }\n    interface IFitterHash {\n        [stretch: number]: IFitter;\n    }\n    var fits: IFitterHash = {};\n    fits[Stretch.none] = (final: la.IRect, natural: la.IRect, size: la.ISize) => {\n        la.rect.copyTo(natural, final);\n    };\n    fits[Stretch.fill] = (final: la.IRect, natural: la.IRect, size: la.ISize) => {\n        final.width = size.width;\n        final.height = size.height;\n    };\n    fits[Stretch.uniform] = (final: la.IRect, natural: la.IRect, size: la.ISize) => {\n        var sx = size.width / natural.width,\n            sy = size.height / natural.height;\n        final.width = size.width;\n        final.height = size.height;\n        if (sx < sy) {\n            final.height = natural.height * sx;\n        } else {\n            final.width = natural.width * sy;\n        }\n    };\n    fits[Stretch.uniformToFill] = (final: la.IRect, natural: la.IRect, size: la.ISize) => {\n        var sx = size.width / natural.width,\n            sy = size.height / natural.height;\n        final.width = size.width;\n        final.height = size.height;\n        if (sx > sy) {\n            final.height = natural.height * sx;\n        } else {\n            final.width = natural.width * sy;\n        }\n    };\n}","namespace puck.fit.transform {\n    import IProcessorBag = puck.element.down.IProcessorBag;\n    import DirtyFlags = puck.element.DirtyFlags;\n    import mat3 = la.mat3;\n\n    export function calc(transform: Float32Array, stretch: Stretch, natural: la.IRect, size: la.ISize) {\n        var fitter = fits[stretch];\n        fitter && fitter(transform, natural, size);\n    }\n\n    interface IFitter {\n        (final: Float32Array, natural: la.IRect, size: la.ISize);\n    }\n    interface IFitterHash {\n        [stretch: number]: IFitter;\n    }\n    var fits: IFitterHash = {};\n    fits[Stretch.none] = (mat: Float32Array, natural: la.IRect, size: la.ISize) => {\n        mat3.identity(mat);\n    };\n    fits[Stretch.fill] = (mat: Float32Array, natural: la.IRect, size: la.ISize) => {\n        mat3.createTranslate(-natural.x, -natural.y, mat);\n        mat3.scale(mat, size.width / natural.width, size.height / natural.height);\n    };\n    fits[Stretch.uniform] = (mat: Float32Array, natural: la.IRect, size: la.ISize) => {\n        mat3.createTranslate(-natural.x, -natural.y, mat);\n        var smin = Math.min(size.width / natural.width, size.height / natural.height);\n        mat3.scale(mat, smin, smin);\n    };\n    fits[Stretch.uniformToFill] = (mat: Float32Array, natural: la.IRect, size: la.ISize) => {\n        mat3.createTranslate(-natural.x, -natural.y, mat);\n        var smax = Math.max(size.width / natural.width, size.height / natural.height);\n        mat3.scale(mat, smax, smax);\n    };\n}","namespace puck.font {\n    export function toString(font: IFont): string {\n        //Format: font-style font-variant font-weight font-size/line-height font-family\n        //Font Styles: normal, italic, oblique\n        //Font Variants: normal, small-caps\n        //Font Weights: normal, bold, bolder, lighter, 100, 200, 300, 400, 500, 600, 700, 800, 900\n        var s = \"\";\n        s += font.style.toString() + \" \";\n        s += \"normal \";\n        s += (<number>font.weight).toString() + \" \";\n        s += font.size + \"px \";\n        s += font.family.toString();\n        return s;\n    }\n}","/// <reference path=\"../element/ElementComposite\" />\n\nnamespace puck.image {\n    export interface IImageComposite extends element.IElementComposite {\n        stretchTransform: Float32Array;\n    }\n    export class ImageComposite extends element.ElementComposite implements IImageComposite {\n        stretchTransform = la.mat3.identity();\n\n        reset(): this {\n            super.reset();\n            la.mat3.identity(this.stretchTransform);\n            return this;\n        }\n    }\n}","namespace puck.image {\n    export class ImageSource implements IImageSource {\n        private $el: HTMLImageElement = document.createElement(\"img\");\n        private $watchers: IImageWatcher[] = [];\n\n        constructor() {\n            this.$el.onerror = (e: ErrorEvent) => this.onErrored(e);\n            this.$el.onload = (e) => this.onLoaded();\n        }\n\n        reset() {\n            this.uri = \"\";\n        }\n\n        get uri(): string { return this.$el.src; }\n        set uri(value: string) {\n            if (this.$el.src !== value) {\n                this.$el.src = value;\n                this.onChanged();\n            }\n        }\n\n        get naturalWidth(): number {\n            return this.$el.naturalWidth;\n        }\n\n        get naturalHeight(): number {\n            return this.$el.naturalHeight;\n        }\n\n        draw(ctx: CanvasRenderingContext2D) {\n            ctx.drawImage(this.$el, 0, 0);\n        }\n\n        watch(onChanged: () => any, onErrored: () => any, onLoaded: () => any): IImageWatcher {\n            var watcher: IImageWatcher = {\n                change: onChanged,\n                error: onErrored,\n                load: onLoaded,\n                unwatch: () => {\n                    var ind = this.$watchers.indexOf(watcher);\n                    if (ind > -1)\n                        this.$watchers.splice(ind, 1);\n                }\n            };\n            this.$watchers.push(watcher);\n            return watcher;\n        }\n\n        protected onChanged() {\n            for (var watchers = this.$watchers, i = 0; i < watchers.length; i++) {\n                watchers[i].change();\n            }\n        }\n\n        protected onErrored(e: ErrorEvent) {\n            for (var watchers = this.$watchers, i = 0; i < watchers.length; i++) {\n                watchers[i].error(e.error);\n            }\n        }\n\n        protected onLoaded() {\n            for (var watchers = this.$watchers, i = 0; i < watchers.length; i++) {\n                watchers[i].load();\n            }\n        }\n    }\n}","/// <reference path=\"../element/ElementState\" />\n\nnamespace puck.image {\n    export interface IImageState extends element.IElementState {\n        source: IImageSource;\n        stretch: Stretch;\n        natural: la.IRect;\n        getEffectiveStretch(): Stretch;\n    }\n\n    export class ImageState extends element.ElementState implements IImageState {\n        source: IImageSource = new ImageSource();\n        stretch: Stretch = Stretch.none;\n        natural: la.IRect = la.rect.init(0, 0, 0, 0);\n\n        reset(): this {\n            super.reset();\n            this.source.reset();\n            this.stretch = Stretch.none;\n            la.rect.init(0, 0, 0, 0, this.natural);\n            return this;\n        }\n\n        getEffectiveStretch(): Stretch {\n            var size = this.size,\n                natural = this.natural;\n            if (size.width <= 0 || size.height <= 0) {\n                // fall back to none if width/height are empty\n                // otherwise, we would build a singular stretch transform\n                return Stretch.none;\n            }\n            if (natural.width <= 0 || natural.height <= 0) {\n                // fall back to none if no-size image\n                // otherwise, we would get NaN, NaN scale stretch transform\n                return Stretch.none;\n            }\n            return this.stretch;\n        }\n    }\n}","namespace puck.internal {\n    export interface IWatcher {\n        change();\n        unwatch();\n    }\n\n    export class WatchChanger {\n        private $watchers: IWatcher[] = [];\n\n        watch(onChanged: () => void): IWatcher {\n            var watchers = this.$watchers;\n            var watcher = <IWatcher>{\n                change: onChanged,\n                unwatch: () => {\n                    var ind = watchers.indexOf(watcher);\n                    if (ind > -1)\n                        watchers.splice(ind, 1);\n                }\n            };\n            watchers.push(watcher);\n            return watcher;\n        }\n\n        on() {\n            for (var watchers = this.$watchers, i = 0; i < watchers.length; i++) {\n                watchers[i].change();\n            }\n        }\n    }\n}","namespace puck.linearGradient {\r\n    export interface IInterpolator {\r\n        x0: number;\r\n        y0: number;\r\n        x1: number;\r\n        y1: number;\r\n        step(): boolean;\r\n        interpolate(offset: number): number;\r\n    }\r\n\r\n    export function createRepeatInterpolator(start: la.IPoint, end: la.IPoint, bounds: la.IRect): IInterpolator {\r\n        var first = {x: start.x, y: start.y};\r\n        var last = {x: end.x, y: end.y};\r\n        var dir = {x: end.x - start.x, y: end.y - start.y};\r\n\r\n        calcMetrics(dir, first, last, bounds);\r\n        var numSteps = (last.x - first.x) / dir.x;\r\n        var stepSize = 1.0 / numSteps;\r\n        var cur = -stepSize;\r\n\r\n        return {\r\n            x0: first.x,\r\n            y0: first.y,\r\n            x1: last.x,\r\n            y1: last.y,\r\n            step (): boolean {\r\n                cur += stepSize;\r\n                return cur < 1;\r\n            },\r\n            interpolate (offset: number): number {\r\n                return cur + (offset / numSteps);\r\n            }\r\n        };\r\n    }\r\n\r\n    export function createReflectInterpolator(start: la.IPoint, end: la.IPoint, bounds: la.IRect): IInterpolator {\r\n        var first = {x: start.x, y: start.y};\r\n        var last = {x: end.x, y: end.y};\r\n        var dir = {x: end.x - start.x, y: end.y - start.y};\r\n\r\n        calcMetrics(dir, first, last, bounds);\r\n        var numSteps = (last.x - first.x) / dir.x;\r\n        var stepSize = 1.0 / numSteps;\r\n        var cur = -stepSize;\r\n        var inverted = Math.round((start.x - first.x) / dir.x) % 2 === 0;\r\n\r\n        return {\r\n            x0: first.x,\r\n            y0: first.y,\r\n            x1: last.x,\r\n            y1: last.y,\r\n            step (): boolean {\r\n                inverted = !inverted;\r\n                cur += stepSize;\r\n                return cur < 1;\r\n            },\r\n            interpolate (offset: number): number {\r\n                var norm = offset / numSteps;\r\n                return !inverted ? cur + norm : cur + (stepSize - norm);\r\n            }\r\n        };\r\n    }\r\n}","namespace puck.linearGradient {\r\n    export function calcMetrics(dir: la.IPoint, first: la.IPoint, last: la.IPoint, bounds: la.IRect) {\r\n        if (dir.y === 0) {\r\n            if (dir.x < 0)\r\n                W(dir, first, last, bounds);\r\n            else if (dir.x !== 0)\r\n                E(dir, first, last, bounds);\r\n        } else if (dir.x === 0) {\r\n            if (dir.y < 0)\r\n                N(dir, first, last, bounds);\r\n            else if (dir.y !== 0)\r\n                S(dir, first, last, bounds);\r\n        } else if (dir.x < 0 && dir.y < 0) { // e\\s\r\n            NW(dir, first, last, bounds);\r\n        } else if (dir.x < 0 && dir.y > 0) { // e/s\r\n            SW(dir, first, last, bounds);\r\n        } else if (dir.x > 0 && dir.y < 0) { // s/e\r\n            NE(dir, first, last, bounds);\r\n        } else if (dir.x > 0 && dir.y > 0) { // s\\e\r\n            SE(dir, first, last, bounds);\r\n        }\r\n    }\r\n\r\n    //+x,0y\r\n    function E(dir: la.IPoint, first: la.IPoint, last: la.IPoint, bounds: la.IRect) {\r\n        var maxX = bounds.x + bounds.width;\r\n        while (first.x >= bounds.x)\r\n            first.x -= dir.x;\r\n        while (last.x <= maxX)\r\n            last.x += dir.x;\r\n    }\r\n\r\n    //-x,0y\r\n    function W(dir: la.IPoint, first: la.IPoint, last: la.IPoint, bounds: la.IRect) {\r\n        var maxX = bounds.x + bounds.width;\r\n        while (first.x <= maxX)\r\n            first.x -= dir.x;\r\n        while (last.x >= bounds.x)\r\n            last.x += dir.x;\r\n    }\r\n\r\n    //0x,+y\r\n    function S(dir: la.IPoint, first: la.IPoint, last: la.IPoint, bounds: la.IRect) {\r\n        var maxY = bounds.y + bounds.height;\r\n        while (first.y >= bounds.y)\r\n            first.y -= dir.y;\r\n        while (last.y <= maxY)\r\n            last.y += dir.y;\r\n    }\r\n\r\n    //0x,-y\r\n    function N(dir: la.IPoint, first: la.IPoint, last: la.IPoint, bounds: la.IRect) {\r\n        var maxY = bounds.y + bounds.height;\r\n        while (first.y <= maxY)\r\n            first.y -= dir.y;\r\n        while (last.y >= bounds.y)\r\n            last.y += dir.y;\r\n    }\r\n\r\n    //-x,-y\r\n    function NW(dir: la.IPoint, first: la.IPoint, last: la.IPoint, bounds: la.IRect) {\r\n        var maxX = bounds.x + bounds.width;\r\n        var maxY = bounds.y + bounds.height;\r\n        while (first.x <= maxX && first.y <= maxY) {\r\n            first.x -= dir.x;\r\n            first.y -= dir.y;\r\n        }\r\n        while (last.x >= bounds.x && last.y >= bounds.y) {\r\n            last.x += dir.x;\r\n            last.y += dir.y;\r\n        }\r\n\r\n    }\r\n\r\n    //-x,+y\r\n    function SW(dir: la.IPoint, first: la.IPoint, last: la.IPoint, bounds: la.IRect) {\r\n        var maxX = bounds.x + bounds.width;\r\n        var maxY = bounds.y + bounds.height;\r\n        while (first.x <= maxX && first.y >= bounds.y) {\r\n            first.x -= dir.x;\r\n            first.y -= dir.y;\r\n        }\r\n        while (last.x >= bounds.x && last.y <= maxY) {\r\n            last.x += dir.x;\r\n            last.y += dir.y;\r\n        }\r\n    }\r\n\r\n    //+x,-y\r\n    function NE(dir: la.IPoint, first: la.IPoint, last: la.IPoint, bounds: la.IRect) {\r\n        var maxX = bounds.x + bounds.width;\r\n        var maxY = bounds.y + bounds.height;\r\n        while (first.x >= bounds.x && first.y <= maxY) {\r\n            first.x -= dir.x;\r\n            first.y -= dir.y;\r\n        }\r\n        while (last.x <= maxX && last.y >= bounds.y) {\r\n            last.x += dir.x;\r\n            last.y += dir.y;\r\n        }\r\n    }\r\n\r\n    //+x,+y\r\n    function SE(dir: la.IPoint, first: la.IPoint, last: la.IPoint, bounds: la.IRect) {\r\n        var maxX = bounds.x + bounds.width;\r\n        var maxY = bounds.y + bounds.height;\r\n        while (first.x >= bounds.x && first.y >= bounds.y) {\r\n            first.x -= dir.x;\r\n            first.y -= dir.y;\r\n        }\r\n        while (last.x <= maxX && last.y <= maxY) {\r\n            last.x += dir.x;\r\n            last.y += dir.y;\r\n        }\r\n    }\r\n}","namespace puck.path {\n    import FillBounds = curve.bounds.fill.FillBounds;\n    import StrokeBounds = curve.bounds.stroke.StrokeBounds;\n    import IBoundingBox = curve.bounds.IBoundingBox;\n\n    export class Bounder {\n        private $path: curve.Path = null;\n        private $filled: FillBounds = null;\n        private $stroked: StrokeBounds = null;\n        private $pars: curve.IStrokeParameters;\n\n        constructor() {\n            this.$pars = {\n                strokeThickness: 0,\n                strokeDashArray: null,\n                strokeDashCap: curve.PenLineCap.Flat,\n                strokeDashOffset: 0,\n                strokeEndLineCap: curve.PenLineCap.Flat,\n                strokeLineJoin: curve.PenLineJoin.Miter,\n                strokeMiterLimit: 10,\n                strokeStartLineCap: curve.PenLineCap.Flat,\n            };\n        }\n\n        getPath(): curve.Path {\n            return this.$path;\n        }\n\n        setPath(path: curve.Path) {\n            if (this.$path === path)\n                return;\n            this.$path = path;\n            if (!path) {\n                this.$filled = null;\n                this.$stroked = null;\n            } else {\n                this.$filled = new FillBounds(path);\n                this.$stroked = new StrokeBounds(path);\n                this.$stroked.pars = this.$pars;\n            }\n        }\n\n        reset() {\n            if (this.$filled)\n                this.$filled.reset();\n            if (this.$stroked)\n                this.$stroked.reset();\n        }\n\n        getFillRect(dest: la.IRect): this {\n            var box = this.$filled;\n            if (!box) {\n                la.rect.init(0, 0, 0, 0, dest);\n            } else {\n                dest.x = box.l;\n                dest.y = box.t;\n                dest.width = box.r - box.l;\n                dest.height = box.b - box.t;\n            }\n            return this;\n        }\n\n        getStrokeRect(dest: la.IRect): this {\n            var box = this.$stroked;\n            if (!box) {\n                la.rect.init(0, 0, 0, 0, dest);\n            } else {\n                dest.x = box.l;\n                dest.y = box.t;\n                dest.width = box.r - box.l;\n                dest.height = box.b - box.t;\n            }\n            return this;\n        }\n\n        calc(state: IPathState): this {\n            var stroked = this.$stroked,\n                filled = this.$filled;\n\n            if (stroked) {\n                if (!!state.stroke && state.strokeThickness > 0) {\n                    this.setStroke(state);\n                    stroked.ensure();\n                } else {\n                    stroked.reset();\n                }\n            }\n\n            if (filled) {\n                filled.ensure();\n            }\n\n            return this;\n        }\n\n        protected setStroke(state: IPathState) {\n            var pars = this.$pars;\n            pars.strokeThickness = state.strokeThickness;\n            pars.strokeStartLineCap = <curve.PenLineCap><number>state.strokeLineCap;\n            pars.strokeLineJoin = <curve.PenLineJoin><number>state.strokeLineJoin;\n            pars.strokeMiterLimit = state.strokeMiterLimit;\n        }\n    }\n}","namespace puck.path {\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    export interface IPathComposite extends element.IElementComposite {\n        stretchTransform: Float32Array;\n        natural: la.IRect;\n        bounder: Bounder;\n    }\n\n    export class PathComposite extends element.ElementComposite implements IPathComposite {\n        stretchTransform = la.mat3.identity();\n        natural: la.IRect = la.rect.init(0, 0, 0, 0);\n        bounder = new Bounder();\n\n        reset(): this {\n            super.reset();\n            la.mat3.identity(this.stretchTransform);\n            la.rect.init(0, 0, 0, 0, this.natural);\n            this.bounder.reset();\n            return this;\n        }\n    }\n}","/// <reference path=\"../element/ElementState\" />\n\nnamespace puck.visual {\n    import ElementState = puck.element.ElementState;\n\n    export interface IVisualState extends element.IElementState {\n        fill: IBrush;\n        stroke: IBrush;\n        strokeThickness: number;\n    }\n\n    export class VisualState extends ElementState implements IVisualState {\n        fill: IBrush;\n        stroke: IBrush;\n        strokeThickness: number;\n        \n        reset(): this {\n            super.reset();\n            this.fill = null;\n            this.stroke = null;\n            this.strokeThickness = 0;\n            return this;\n        }\n    }\n}","/// <reference path=\"../visual/VisualState\" />\n\nnamespace puck.path {\n    export interface IPathState extends visual.IVisualState {\n        path: curve.Path;\n        stretch: Stretch;\n        fillRule: FillRule;\n        strokeLineCap: PenLineCap;\n        strokeLineJoin: PenLineJoin;\n        strokeMiterLimit: number;\n        getEffectiveStretch(comp: IPathComposite): Stretch;\n    }\n    export class PathState extends visual.VisualState implements IPathState {\n        path: curve.Path = null;\n        stretch: Stretch = Stretch.none;\n        fillRule: FillRule = FillRule.evenodd;\n        strokeLineCap: PenLineCap = PenLineCap.flat;\n        strokeLineJoin: PenLineJoin = PenLineJoin.miter;\n        strokeMiterLimit: number = 10;\n\n        reset(): this {\n            super.reset();\n            this.path = null;\n            this.stretch = Stretch.none;\n            this.fillRule = FillRule.evenodd;\n            this.strokeLineCap = PenLineCap.flat;\n            this.strokeLineJoin = PenLineJoin.miter;\n            this.strokeMiterLimit = 10;\n            return this;\n        }\n\n        getEffectiveStretch(comp: IPathComposite): Stretch {\n            var size = this.size,\n                natural = comp.natural;\n            if (size.width <= 0 || size.height <= 0) {\n                // fall back to none if width/height are empty\n                // otherwise, we would build a singular stretch transform\n                return Stretch.none;\n            }\n            if (natural.width <= 0 || natural.height <= 0) {\n                // fall back to none if no-size path\n                // otherwise, we would get NaN, NaN scale stretch transform\n                return Stretch.none;\n            }\n            return this.stretch;\n        }\n\n        mapTransformOrigin(comp: IPathComposite): la.IPoint {\n            var to = this.transformOrigin;\n\n            // must precompute extents even though it will be performed later\n            var final = la.rect.init(0, 0, 0, 0);\n            puck.fit.extents.calc(final, this.getEffectiveStretch(comp), comp.natural, this.size);\n            return {\n                x: final.x + (to.x * final.width),\n                y: final.y + (to.y * final.height),\n            }\n        }\n    }\n}","/// <reference path=\"../visual/VisualState\" />\n\nnamespace puck.polyline {\n    export interface IPolylineState extends path.IPathState {\n        points: Points;\n        closed: boolean;\n    }\n    export class PolylineState extends path.PathState implements IPolylineState {\n        points: Points = new Points();\n        closed: boolean = false;\n\n        reset(): this {\n            super.reset();\n            this.points.clear();\n            this.closed = false;\n            return this;\n        }\n    }\n}","namespace puck.radialGradient {\n    export interface IExtender {\n        x0: number;\n        y0: number;\n        r0: number;\n        x1: number;\n        y1: number;\n        r1: number;\n        step(): boolean;\n        createGradient(ctx: CanvasRenderingContext2D): CanvasGradient;\n    }\n    export interface IRadialPointData {\n        x0: number;\n        y0: number;\n        x1: number;\n        y1: number;\n        r1: number;\n        sx: number;\n        sy: number;\n        side: number;\n        balanced: boolean;\n    }\n    export function createExtender(data: IRadialPointData, bounds: la.IRect): IExtender {\n        var started = false;\n        var dx = data.x1 - data.x0;\n        var dy = data.y1 - data.y0;\n        var rstep = data.r1;\n        var reached = false;\n\n        var ext = {\n            x0: data.x0,\n            y0: data.y0,\n            r0: 0,\n            x1: data.x1,\n            y1: data.y1,\n            r1: data.r1,\n            step (): boolean {\n                if (!started) {\n                    started = true;\n                    return true;\n                }\n\n                ext.x0 = ext.x1;\n                ext.y0 = ext.y1;\n                ext.r0 += rstep;\n                ext.r1 += rstep;\n                ext.x1 += dx;\n                ext.y1 += dy;\n\n                if (reached)\n                    return false;\n                reached = exceedBounds(ext.x1, ext.y1, ext.r1, bounds);\n                return true;\n            },\n            createGradient (ctx: CanvasRenderingContext2D): CanvasGradient {\n                return ctx.createRadialGradient(ext.x0, ext.y0, ext.r0, ext.x1, ext.y1, ext.r1);\n            }\n        };\n        return ext;\n    }\n\n    function exceedBounds(cx: number, cy: number, radius: number, bounds: la.IRect) {\n        var ne = len(cx, cy, bounds.x, bounds.y);\n        var nw = len(cx, cy, bounds.x + bounds.width, bounds.y);\n        var sw = len(cx, cy, bounds.x + bounds.width, bounds.y + bounds.height);\n        var se = len(cx, cy, bounds.x, bounds.y + bounds.height);\n        return Math.max(ne, nw, sw, se) < radius;\n    }\n\n    function len(x1: number, y1: number, x2: number, y2: number): number {\n        var dx = x2 - x1;\n        var dy = y2 - y1;\n        return Math.sqrt((dx * dx) + (dy * dy));\n    }\n}","namespace puck.render {\n    export function getNaturalCanvasSize(canvas: HTMLCanvasElement): la.ISize {\n        var zoomFactor = zoom.calc();\n        return {\n            width: canvas.offsetWidth * zoomFactor,\n            height: canvas.offsetHeight * zoomFactor\n        };\n    }\n}","namespace puck.render {\n    //NOTE: If we resize the HTML5 canvas during resize, the canvas will go blank until render happens\n    var epsilon = 1e-10;\n    export class RenderContextSize {\n        private $$ctx: CanvasRenderingContext2D = null;\n        //NOTE: This is the desired on-screen size (backing size for high-dpi devices will be larger)\n        private $$desiredWidth: number = 0;\n        private $$desiredHeight: number = 0;\n        private $$changed: la.ISize = null;\n        private $$lastDpiRatio = 1;\n\n        get desiredWidth(): number {\n            return this.$$desiredWidth;\n        }\n\n        get desiredHeight(): number {\n            return this.$$desiredHeight;\n        }\n\n        get paintWidth(): number {\n            return this.$$desiredWidth * this.dpiRatio;\n        }\n\n        get paintHeight(): number {\n            return this.$$desiredHeight * this.dpiRatio;\n        }\n\n        get dpiRatio(): number {\n            return (window.devicePixelRatio || 1) / this.$$ctx.backingStorePixelRatio;\n        }\n\n        init(ctx: CanvasRenderingContext2D) {\n            this.$$ctx = ctx;\n            var desired = getNaturalCanvasSize(ctx.canvas);\n            this.$$desiredWidth = desired.width;\n            this.$$desiredHeight = desired.height;\n            this.$adjustCanvas();\n        }\n\n        queueResize(width: number, height: number): RenderContextSize {\n            if (this.$$changed) {\n                this.$$changed.width = width;\n                this.$$changed.height = height;\n            } else {\n                this.$$changed = {\n                    width: width,\n                    height: height\n                };\n            }\n            return this;\n        }\n\n        commitResize(): RenderContextSize {\n            if (this.$$changed) {\n                //Don't resize anything if movement is not noticeable\n                if (Math.abs(this.$$changed.width - this.$$desiredWidth) < epsilon && Math.abs(this.$$changed.height - this.$$desiredHeight) < epsilon)\n                    return;\n                this.$$desiredWidth = this.$$changed.width;\n                this.$$desiredHeight = this.$$changed.height;\n                this.$$changed = null;\n                this.$adjustCanvas();\n            }\n            return this;\n        }\n\n        updateDpiRatio(): boolean {\n            if (this.$$lastDpiRatio === this.dpiRatio)\n                return false;\n            this.$adjustCanvas();\n            return true;\n        }\n\n        private $adjustCanvas() {\n            var canvas = this.$$ctx.canvas;\n            var dpiRatio = this.dpiRatio;\n            if (Math.abs(dpiRatio - 1) < epsilon) {\n                canvas.width = this.desiredWidth;\n                canvas.height = this.desiredHeight;\n            } else {\n                // Size the canvas width and height (the virtual canvas size) to the scaled up pixel count.\n                canvas.width = this.paintWidth;\n                canvas.height = this.paintHeight;\n                // Size the physical canvas using CSS width and height to the pixel dimensions.\n                canvas.style.width = this.desiredWidth.toString() + \"px\";\n                canvas.style.height = this.desiredHeight.toString() + \"px\";\n            }\n            this.$$lastDpiRatio = dpiRatio;\n        }\n    }\n}","namespace puck.render.zoom {\n    export var calc: () => number = (() => {\n        if ((<any>document).frames) //IE 7-9\n            return ie();\n        return chrome();\n    })();\n\n    function ie() {\n        return () => {\n            var screen = (<any>document).frames.screen;\n            var zoom = screen.deviceXDPI / screen.systemXDPI;\n            return Math.round(zoom * 100) / 100;\n        };\n    }\n\n    function chrome() {\n        var svg: SVGSVGElement;\n\n        function memoizeSvg() {\n            if (!!svg || !document.body)\n                return;\n            svg = <SVGSVGElement>document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n            svg.setAttribute('version', '1.1');\n            document.body.appendChild(svg);\n            ((style: CSSStyleDeclaration) => {\n                style.opacity = \"0.0\";\n                style.position = \"absolute\";\n                style.left = \"-300px\";\n                //style.top = \"-150px\";\n            })(<any>svg.style);\n        }\n\n        return () => {\n            memoizeSvg();\n            return !svg ? 1 : svg.currentScale;\n        };\n    }\n}\n","namespace puck.stencil {\n    import IRect = la.IRect;\n    import RenderContext = puck.render.RenderContext;\n    import IElementState = puck.element.IElementState;\n    import IElementComposite = puck.element.IElementComposite;\n\n    export interface IStencilBag {\n        state: IElementState;\n        composite: IElementComposite;\n        fillRect: IRect;\n        strokeRect: IRect;\n    }\n\n    export interface IStencil {\n        draft(bag: IStencilBag);\n        draw(ctx: RenderContext, bag: IStencilBag);\n    }\n\n    export var empty: IStencil = {\n        draft(bag: IStencilBag) {\n        },\n        draw(ctx: RenderContext, bag: IStencilBag) {\n        },\n    };\n}","namespace puck.stencil {\n    import IPathState = puck.path.IPathState;\n    import IPathComposite = puck.path.IPathComposite;\n\n    export var path: IStencil = {\n        draft(bag: stencil.IStencilBag) {\n            // Bounds are updated in \"down:natural\"\n            var comp = <IPathComposite>bag.composite;\n            comp.bounder\n                .getFillRect(bag.fillRect)\n                .getStrokeRect(bag.strokeRect);\n        },\n        draw(ctx: render.RenderContext, bag: stencil.IStencilBag) {\n            var fr = bag.fillRect;\n            if (fr.width <= 0 || fr.height <= 0) {\n                // degenerate\n                return;\n            }\n\n            var raw = ctx.raw,\n                state = <IPathState>bag.state;\n            raw.beginPath();\n            state.path.draw(raw);\n            // NOTE: curve.Path dictates whether to \"closePath\"\n        },\n    };\n}","/// <reference path=\"../element/ElementState\" />\n\nnamespace puck.text {\n    import ElementState = puck.element.ElementState;\n\n    export interface ITextState extends element.IElementState {\n        fill: IBrush;\n        stroke: IBrush;\n        strokeThickness: number;\n        font: IFont;\n        text: string;\n    }\n\n    export class TextState extends ElementState implements ITextState {\n        fill: IBrush;\n        stroke: IBrush;\n        strokeThickness: number;\n        font: puck.IFont;\n        text: string;\n\n        reset(): this {\n            super.reset();\n\n            this.fill = null;\n            this.stroke = null;\n            this.strokeThickness = 0;\n\n            var f: puck.IFont;\n            f = {\n                family: defaultFont.family,\n                size: defaultFont.size,\n                stretch: defaultFont.stretch,\n                style: defaultFont.style,\n                weight: defaultFont.weight,\n                toString() {\n                    return font.toString(f);\n                },\n            };\n            this.font = f;\n            this.text = \"\";\n\n            return this;\n        }\n    }\n}","/// <reference path=\"../element/ElementComposite\" />\n\nnamespace puck.visual {\n    import ElementComposite = puck.element.ElementComposite;\n\n    export interface IVisualComposite extends element.IElementComposite {\n    }\n\n    export class VisualComposite extends ElementComposite implements IVisualComposite {\n    }\n}","namespace puck.walk {\n    export interface IWalker<T> {\n        next(): T;\n    }\n\n    var EMPTY_WALKER: walk.IWalker<element.IElement> = {\n        next() {\n            return undefined;\n        }\n    };\n\n    export function getWalker(el: element.IElement, reverse?: boolean): IWalker<element.IElement> {\n        if (typeof (<container.IContainer>el).walk === \"function\")\n            return (<container.IContainer>el).walk(reverse);\n        return EMPTY_WALKER;\n    }\n}","namespace puck.element.down {\n    export interface IProcessorBag {\n        state: IElementState;\n        composite: IElementComposite;\n        pcomposite: IElementComposite; //parent composite\n    }\n\n    export class Processor {\n        static instance = new Processor();\n\n        isTainted(bag: IProcessorBag): boolean {\n            return bag.composite.hasDirt(DirtyFlags.down);\n        }\n\n        process(bag: IProcessorBag): DirtyFlags {\n            var dirt = DirtyFlags.none;\n            if (opacity.process(bag))\n                dirt |= DirtyFlags.opacity;\n            if (visible.process(bag))\n                dirt |= DirtyFlags.visible;\n            if (transform.process(bag))\n                dirt |= DirtyFlags.transform;\n            return dirt;\n        }\n\n        clear(bag: IProcessorBag): this {\n            bag.composite.untaint(DirtyFlags.down);\n            return this;\n        }\n    }\n}","/// <reference path=\"../../element/down/Processor\" />\n\nnamespace puck.container.down {\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    export interface IProcessorBag extends element.down.IProcessorBag {\n        walker: walk.IWalker<element.IElement>;\n        state: IContainerState;\n        composite: IContainerComposite;\n        pcomposite: IContainerComposite; //parent composite\n    }\n\n    export class Processor extends element.down.Processor {\n        static instance = new Processor();\n\n        process(bag: IProcessorBag): DirtyFlags {\n            var dirt = super.process(bag);\n            for (var cur = bag.walker.next(); !!cur; cur = bag.walker.next()) {\n                cur.composite.taint(dirt);\n            }\n            return dirt;\n        }\n    }\n}","namespace puck.element.hit {\n    import mat3 = la.mat3;\n    import vec2 = la.vec2;\n    import rect = la.rect;\n\n    export class Processor {\n        static instance = new Processor();\n\n        process(el: element.IElement, ctx: puck.render.RenderContext, pos: Float32Array, hitlist: element.IElement[]): boolean {\n            if (!this.prehit(el, ctx, pos))\n                return;\n            ctx.save();\n            ctx.preapply(el.composite.transform);\n            var inside = false;\n            if (this.hit(el, ctx, pos, hitlist)) {\n                inside = true;\n                hitlist.unshift(el);\n            }\n            ctx.restore();\n            return inside;\n        }\n\n        protected prehit(el: element.IElement, ctx: puck.render.RenderContext, pos: Float32Array): boolean {\n            var comp = el.composite;\n            if (!comp.visible || (comp.opacity * 255) < 0.5)\n                return false;\n            var localpos = mat3.transformVec2(ctx.currentTransform, pos, vec2.create(0, 0));\n            return rect.containsVec2(comp.extents, localpos);\n        }\n\n        protected hit(el: element.IElement, ctx: puck.render.RenderContext, pos: Float32Array, hitlist: element.IElement[]): boolean {\n            // element alone is not hittable\n            // visual/container will implement\n            return false;\n        }\n\n        protected draw(el: visual.IVisual, ctx: puck.render.RenderContext) {\n            var sbag: stencil.IStencilBag = {\n                state: el.state,\n                composite: el.composite,\n                fillRect: null,\n                strokeRect: null,\n            };\n            el.stencil.draw(ctx, sbag);\n        }\n    }\n}","/// <reference path=\"../../element/hit/Processor\" />\n\nnamespace puck.container.hit {\n    export class Processor extends element.hit.Processor {\n        static instance = new Processor();\n\n        protected hit(el: IContainer, ctx: puck.render.RenderContext, pos: Float32Array, hitlist: element.IElement[]): boolean {\n            for (var walker = el.walk(true), cur = walker.next(); !!cur; cur = walker.next()) {\n                if (engine.hit(el, ctx, pos, hitlist))\n                    return true;\n            }\n            return false;\n        }\n    }\n}","/// <reference path=\"../../render/RenderContext\" />\n\nnamespace puck.element.render {\n    import RenderContext = puck.render.RenderContext;\n\n    export interface IProcessorBag {\n        state: IElementState;\n        composite: IElementComposite;\n        ctx: RenderContext;\n        inregion: la.IRect;\n        curregion: la.IRect;\n        stencil: stencil.IStencil;\n    }\n\n    export enum SkipResult {\n        none = 0,\n        render = 1 << 1,\n        post = 1 << 2,\n\n        all = render | post,\n    }\n\n    export class Processor {\n        static instance = new Processor();\n\n        process(bag: IProcessorBag) {\n            var result = this.prerender(bag);\n            if ((result & SkipResult.render) === 0) {\n                this.render(bag);\n            }\n            if ((result & SkipResult.post) === 0) {\n                this.postrender(bag);\n            }\n        }\n\n        clear(bag: IProcessorBag): this {\n            bag.composite.untaint(DirtyFlags.invalidate);\n            la.rect.init(0, 0, 0, 0, bag.composite.paint);\n            return this;\n        }\n\n        protected prerender(bag: IProcessorBag): SkipResult {\n            if (!validate.process(bag))\n                return SkipResult.all;\n            if (!should.process(bag))\n                return SkipResult.all;\n            prepare.process(bag);\n            narrow.process(bag);\n            //TODO: Prerender effect\n            return SkipResult.none;\n        }\n\n        protected render(bag: IProcessorBag) {\n            var sbag = this.createStencilBag(bag);\n            bag.stencil.draft(sbag);\n            bag.stencil.draw(bag.ctx, sbag);\n        }\n\n        protected postrender(bag: IProcessorBag) {\n            //TODO: Postrender effect\n            bag.ctx.restore();\n        }\n\n        protected createStencilBag(bag: IProcessorBag): stencil.IStencilBag {\n            return {\n                state: bag.state,\n                composite: bag.composite,\n                fillRect: la.rect.init(0, 0, 0, 0),\n                strokeRect: la.rect.init(0, 0, 0, 0),\n            };\n        }\n    }\n}","/// <reference path=\"../../element/render/Processor\" />\n\nnamespace puck.container.render {\n    export interface IProcessorBag extends element.render.IProcessorBag {\n        walker: walk.IWalker<element.IElement>;\n        composite: IContainerComposite;\n    }\n\n    export class Processor extends element.render.Processor {\n        static instance = new Processor();\n\n        protected render(bag: IProcessorBag) {\n            for (var cur = bag.walker.next(); !!cur; cur = bag.walker.next()) {\n                engine.render(cur, bag.ctx, bag.curregion);\n            }\n        }\n    }\n}","/// <reference path=\"../../element/DirtyFlags\" />\n\nnamespace puck.container.up.extents {\n    import rect = la.rect;\n    import DirtyFlags = puck.element.DirtyFlags;\n    var oldExtents = rect.init(0, 0, 0, 0);\n\n    // Computes container's bounds\n    // Bounds\n    //   - union of all child bounds\n    //   - owner's coordinate system\n    export function process(bag: IProcessorBag): boolean {\n        var comp = bag.composite;\n        if (!comp.hasDirt(DirtyFlags.extents))\n            return false;\n        rect.copyTo(comp.extents, oldExtents);\n\n        rect.init(0, 0, 0, 0, comp.extents);\n        for (var ccomps = bag.ccomposites, i = 0; i < ccomps.length; i++) {\n            rect.union(comp.extents, ccomps[i].extents);\n        }\n        rect.transform(comp.extents, comp.transform, comp.extents);\n\n        if (rect.equal(comp.extents, oldExtents))\n            return false;\n        rect.union(comp.paint, oldExtents);\n        comp.taint(DirtyFlags.newbounds);\n        return true;\n    }\n}","namespace puck.container.up.invalidate {\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    export function process(bag: IProcessorBag): boolean {\n        var comp = bag.composite;\n        if (!comp.hasDirt(DirtyFlags.invalidate))\n            return false;\n\n        var childPaint = la.rect.init(0, 0, 0, 0);\n        for (var ccomps = bag.ccomposites, i = 0; i < ccomps.length; i++) {\n            la.rect.union(childPaint, ccomps[i].paint);\n        }\n        la.rect.transform(childPaint, comp.transform, childPaint);\n\n        la.rect.union(comp.paint, childPaint);\n        return true;\n    }\n}","namespace puck.element.up {\n    export interface IProcessorBag {\n        state: IElementState;\n        composite: IElementComposite;\n        ccomposites: IElementComposite[];\n    }\n\n    export class Processor {\n        static instance = new Processor();\n\n        isTainted(bag: IProcessorBag): boolean {\n            return bag.composite.hasDirt(DirtyFlags.up);\n        }\n\n        process(bag: IProcessorBag): DirtyFlags {\n            var dirt = DirtyFlags.none;\n            if (extents.process(bag))\n                dirt |= DirtyFlags.extents;\n            newbounds.process(bag);\n            return dirt;\n        }\n\n        clear(bag: IProcessorBag): this {\n            bag.composite.untaint(DirtyFlags.up);\n            return this;\n        }\n    }\n}","namespace puck.element.up.newbounds {\n    export function process(bag: IProcessorBag): boolean {\n        var comp = bag.composite;\n        if (!comp.hasDirt(DirtyFlags.newbounds) || !comp.visible || (comp.opacity * 255) < 0.5)\n            return false;\n        comp.invalidate();\n        return true;\n    }\n}","/// <reference path=\"../../element/DirtyFlags\" />\n/// <reference path=\"../../element/up/Processor\" />\n/// <reference path=\"../../element/up/newbounds\" />\n\nnamespace puck.container.up {\n    import DirtyFlags = puck.element.DirtyFlags;\n    import newbounds = puck.element.up.newbounds;\n\n    export interface IProcessorBag extends element.up.IProcessorBag {\n        state: IContainerState;\n        composite: IContainerComposite;\n    }\n\n    // A container processor additionally processes bounds\n    export class Processor extends element.up.Processor {\n        static instance = new Processor();\n\n        process(bag: IProcessorBag): DirtyFlags {\n            var dirt = DirtyFlags.none;\n            if (extents.process(bag))\n                dirt |= DirtyFlags.extents;\n            newbounds.process(bag);\n            if (invalidate.process(bag))\n                dirt |= DirtyFlags.invalidate;\n            return dirt;\n        }\n    }\n}","namespace puck.element.down.opacity {\n    export function process(bag: IProcessorBag): boolean {\n        var comp = bag.composite;\n        if (!comp.hasDirt(DirtyFlags.opacity))\n            return false;\n        var newOpacity = bag.pcomposite.opacity * bag.state.opacity;\n        if (comp.opacity === newOpacity)\n            return false;\n        comp.taint(DirtyFlags.newbounds);\n        comp.opacity = newOpacity;\n        return true;\n    }\n}","namespace puck.element.down.transform {\n    import mat3 = la.mat3;\n    var oldTransform = mat3.identity();\n    \n    export function process(bag: IProcessorBag): boolean {\n        var comp = bag.composite;\n        if (!comp.hasDirt(DirtyFlags.transform))\n            return false;\n        mat3.copyTo(comp.transform, oldTransform);\n        var state = bag.state;\n\n        // Apply transform in coordinates of transformOrigin\n        var xo = state.mapTransformOrigin(comp);\n        mat3.createTranslate(-xo.x, -xo.y, comp.transform); //Shift into transformOrigin coordinate space\n        mat3.apply(comp.transform, state.transform);\n        mat3.translate(comp.transform, xo.x, xo.y); //Shift back out of transformOrigin coordinate space\n\n        // Adjust transform for offset\n        mat3.translate(comp.transform, state.offset.x, state.offset.y);\n\n        if (!mat3.equal(comp.transform, oldTransform)) {\n            comp.taint(DirtyFlags.extents);\n        }\n        return true;\n    }\n}","namespace puck.element.down.visible {\n    export function process(bag: IProcessorBag): boolean {\n        var comp = bag.composite;\n        if (!comp.hasDirt(DirtyFlags.visible))\n            return false;\n        var newVisible = bag.pcomposite.visible && (bag.state.visible === true);\n        if (comp.visible === newVisible)\n            return false;\n        comp.taint(DirtyFlags.newbounds);\n        comp.visible = newVisible;\n        return true;\n    }\n}","namespace puck.element.render.narrow {\n    export function process(bag: IProcessorBag) {\n        //TODO: Render clip to prevent overpainting\n    }\n}","namespace puck.element.render.prepare {\n    export function process(bag: IProcessorBag) {\n        bag.ctx.save();\n        bag.ctx.preapply(bag.composite.transform);\n    }\n}\n","namespace puck.element.render.should {\n    import rect = la.rect;\n\n    export function process(bag: IProcessorBag): boolean {\n        var r = rect.transform(bag.composite.extents, bag.ctx.currentTransform, bag.curregion);\n        rect.roundOut(r);\n        rect.intersection(r, bag.inregion);\n        return r.width > 0 && r.height > 0;\n    }\n}","namespace puck.element.render.validate {\n    export function process(bag: IProcessorBag): boolean {\n        var comp = bag.composite;\n        return !!comp.visible && (comp.opacity * 255) >= 0.5;\n    }\n}","namespace puck.element.up.extents {\n    import rect = la.rect;\n    var oldExtents = rect.init(0, 0, 0, 0);\n\n    export function process(bag: IProcessorBag): boolean {\n        var comp = bag.composite;\n        if (!comp.hasDirt(DirtyFlags.extents))\n            return false;\n        var state = bag.state;\n        rect.copyTo(comp.extents, oldExtents);\n        \n        rect.init(0, 0, state.size.width, state.size.height, comp.extents);\n        rect.grow(comp.extents, comp.padding);\n        rect.transform(comp.extents, comp.transform, comp.extents);\n\n        if (rect.equal(comp.extents, oldExtents))\n            return false;\n        rect.union(comp.paint, oldExtents);\n        comp.taint(DirtyFlags.newbounds);\n        return true;\n    }\n}","namespace puck.font.height {\n    var heights = [];\n\n    export var cache = {\n        hits: 0,\n        misses: 0\n    };\n\n    export function get(font: IFont|string): number {\n        var serial = font.toString();\n        var height = heights[serial];\n        if (height == null) {\n            heights[serial] = height = measure(serial);\n            cache.misses++;\n        } else {\n            cache.hits++;\n        }\n        return height;\n    }\n}","namespace puck.font.height {\n    var dummy: HTMLElement;\n\n    export function measure(font: IFont|string): number {\n        var serial = font.toString();\n        if (!dummy) {\n            dummy = document.createElement(\"div\");\n            dummy.appendChild(document.createTextNode(\"Hg\"));\n            document.body.appendChild(dummy);\n        }\n        dummy.style.display = \"\";\n        dummy.style.font = serial;\n        var result = dummy.offsetHeight;\n        dummy.style.display = \"none\";\n        return result;\n    }\n}","namespace puck.font.width {\n    var dummy: HTMLCanvasElement;\n\n    export function measure(font: IFont|string, text: string): number {\n        if (!dummy) {\n            dummy = document.createElement(\"canvas\");\n        }\n        var ctx = dummy.getContext(\"2d\");\n        ctx.font = font.toString();\n        return ctx.measureText(text).width;\n    }\n}","/// <reference path=\"../../element/down/Processor\" />\n\nnamespace puck.image.down {\n    import IProcessorBag = puck.element.down.IProcessorBag;\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    export class Processor extends element.down.Processor {\n        static instance = new Processor();\n\n        process(bag: IProcessorBag): DirtyFlags {\n            stretch.process(bag);\n            return super.process(bag);\n        }\n    }\n}","/// <reference path=\"../../Stretch.ts\" />\n\nnamespace puck.image.down.stretch {\n    import IProcessorBag = puck.element.down.IProcessorBag;\n    import DirtyFlags = puck.element.DirtyFlags;\n    import mat3 = la.mat3;\n    var oldStretchTransform = mat3.identity();\n\n    export function process(bag: IProcessorBag): boolean {\n        var state = <IImageState>bag.state,\n            comp = <IImageComposite>bag.composite;\n        if (!comp.hasDirt(DirtyFlags.stretch))\n            return false;\n        mat3.copyTo(comp.stretchTransform, oldStretchTransform);\n\n        puck.fit.transform.calc(comp.stretchTransform, state.getEffectiveStretch(), state.natural, state.size);\n\n        if (mat3.equal(comp.stretchTransform, oldStretchTransform))\n            return false;\n        comp.taint(DirtyFlags.extents);\n        return true;\n    }\n}","/// <reference path=\"../../element/hit/Processor\" />\n\nnamespace puck.image.hit {\n    export class Processor extends element.hit.Processor {\n        static instance = new Processor();\n\n        protected hit(el: IImage, ctx: puck.render.RenderContext, pos: Float32Array, hitlist: element.IElement[]): boolean {\n            // Already verified that point is within extents\n            // If image is loaded, we are hitting the image\n            return true;\n        }\n    }\n}","/// <reference path=\"../../Stretch.ts\" />\n\nnamespace puck.image.up.extents {\n    import IProcessorBag = puck.element.up.IProcessorBag;\n    import DirtyFlags = puck.element.DirtyFlags;\n    import rect = la.rect;\n    import mat3 = la.mat3;\n    var oldExtents = rect.init(0, 0, 0, 0);\n\n    export function process(bag: IProcessorBag) {\n        var comp = bag.composite;\n        if (!comp.hasDirt(DirtyFlags.extents))\n            return false;\n        var state = <IImageState>bag.state;\n        rect.copyTo(comp.extents, oldExtents);\n\n        rect.init(0, 0, 0, 0, comp.extents);\n        puck.fit.extents.calc(comp.extents, state.getEffectiveStretch(), state.natural, state.size);\n        rect.transform(comp.extents, comp.transform, comp.extents);\n\n        if (rect.equal(comp.extents, oldExtents))\n            return false;\n        rect.union(comp.paint, oldExtents);\n        comp.taint(DirtyFlags.newbounds);\n        return true;\n    }\n\n}","/// <reference path=\"../../element/up/Processor\" />\n\nnamespace puck.image.up {\n    import IProcessorBag = puck.element.up.IProcessorBag;\n    import DirtyFlags = puck.element.DirtyFlags;\n    import newbounds = puck.element.up.newbounds;\n\n    export class Processor extends element.up.Processor {\n        static instance = new Processor();\n\n        process(bag: IProcessorBag): DirtyFlags {\n            var dirt = DirtyFlags.none;\n            if (extents.process(bag))\n                dirt |= DirtyFlags.extents;\n            newbounds.process(bag);\n            return dirt;\n        }\n    }\n}","namespace puck.path.down.natural {\n    import IProcessorBag = puck.element.down.IProcessorBag;\n    import DirtyFlags = puck.element.DirtyFlags;\n    var oldNatural = la.rect.init(0, 0, 0, 0);\n    var activeFill = la.rect.init(0, 0, 0, 0);\n    var activeStroke = la.rect.init(0, 0, 0, 0);\n\n    export function process(bag: IProcessorBag): boolean {\n        var state = <IPathState>bag.state,\n            comp = <IPathComposite>bag.composite;\n\n        if (!comp.hasDirt(DirtyFlags.padding))\n            return false;\n        comp.bounder.reset();\n        la.rect.copyTo(comp.natural, oldNatural);\n\n        comp.bounder.calc(state)\n            .getFillRect(activeFill)\n            .getStrokeRect(activeStroke);\n\n        la.rect.union(activeFill, activeStroke, comp.natural);\n\n        if (!la.rect.equal(comp.natural, oldNatural))\n            return false;\n        comp.taint(DirtyFlags.stretch);\n        return true;\n    }\n}","/// <reference path=\"../../element/down/Processor\" />\n\nnamespace puck.path.down {\n    import IProcessorBag = puck.element.down.IProcessorBag;\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    export class Processor extends element.down.Processor {\n        static instance = new Processor();\n\n        process(bag: IProcessorBag): DirtyFlags {\n            natural.process(bag);\n            stretch.process(bag);\n            return super.process(bag);\n        }\n    }\n}","namespace puck.path.down.stretch {\n    import IProcessorBag = puck.element.down.IProcessorBag;\n    import IElementComposite = puck.element.IElementComposite;\n    import DirtyFlags = puck.element.DirtyFlags;\n    import mat3 = la.mat3;\n    var oldStretchTransform = mat3.identity();\n\n    export function process(bag: IProcessorBag): boolean {\n        var state = <IPathState>bag.state,\n            comp = <IPathComposite>bag.composite;\n        if (!comp.hasDirt(DirtyFlags.stretch))\n            return false;\n        mat3.copyTo(comp.stretchTransform, oldStretchTransform);\n\n        puck.fit.transform.calc(comp.stretchTransform, state.getEffectiveStretch(comp), comp.natural, state.size);\n\n        if (mat3.equal(comp.stretchTransform, oldStretchTransform))\n            return false;\n        comp.taint(DirtyFlags.extents);\n        return true;\n    }\n\n}","/// <reference path=\"../../element/hit/Processor\" />\n\nnamespace puck.visual.hit {\n    export class Processor extends element.hit.Processor {\n        static instance = new Processor();\n\n        protected prehit(el: visual.IVisual, ctx: puck.render.RenderContext, pos: Float32Array): boolean {\n            if (!super.prehit(el, ctx, pos))\n                return false;\n            var state = el.state;\n            return !!state.fill || (!!state.stroke && state.strokeThickness > 0);\n            // TODO: can we check degenerate size?\n        }\n\n        protected hit(el: visual.IVisual, ctx: puck.render.RenderContext, pos: Float32Array, hitlist: element.IElement[]): boolean {\n            ctx.save();\n            this.transformLocal(el, ctx);\n            this.draw(el, ctx);\n\n            var state = el.state,\n                px = pos[0],\n                py = pos[1],\n                inside = false;\n            // TODO: fill rule?\n            if (!!state.fill && ctx.raw.isPointInPath(px, py)) {\n                inside = true;\n            } else if (!!state.stroke && ctx.isPointInStrokeEx(px, py, state.strokeThickness)) {\n                inside = true;\n            }\n\n            ctx.restore();\n            return inside;\n        }\n\n        protected transformLocal(el: element.IElement, ctx: puck.render.RenderContext) {\n        }\n    }\n}","/// <reference path=\"../../visual/hit/Processor\" />\n\nnamespace puck.path.hit {\n    export class Processor extends visual.hit.Processor {\n        static instance = new Processor();\n\n        protected hit(el: IPath, ctx: puck.render.RenderContext, pos: Float32Array, hitlist: element.IElement[]): boolean {\n            ctx.save();\n            this.transformLocal(el, ctx);\n            this.draw(el, ctx);\n\n            var state = el.state,\n                px = pos[0],\n                py = pos[1],\n                inside = false;\n            if (!!state.fill && ctx.raw.isPointInPath(px, py)) {\n                inside = true;\n            } else if (!!state.stroke) {\n                ctx.setStrokeExtras(state.strokeLineCap, state.strokeLineJoin, state.strokeMiterLimit);\n                if (ctx.isPointInStrokeEx(px, py, state.strokeThickness)) {\n                    inside = true;\n                }\n            }\n\n            ctx.restore();\n            return inside;\n        }\n\n        protected transformLocal(path: IPath, ctx: puck.render.RenderContext) {\n            ctx.preapply(path.composite.stretchTransform);\n        }\n    }\n}","/// <reference path=\"../../element/render/Processor\" />\n\nnamespace puck.visual.render {\n    export interface IProcessorBag extends puck.element.render.IProcessorBag {\n        stencil: stencil.IStencil;\n    }\n\n    export class Processor extends element.render.Processor {\n        static instance = new Processor();\n\n        protected render(bag: IProcessorBag): boolean {\n            var state = <IVisualState>bag.state;\n            if (!state.fill && !state.stroke)\n                return false;\n\n            var ctx = bag.ctx;\n            ctx.save();\n            var sbag = this.createStencilBag(bag);\n            bag.stencil.draft(sbag);\n            this.transformLocal(ctx, sbag);\n            bag.stencil.draw(ctx, sbag);\n            this.fill(ctx, state, sbag);\n            this.stroke(ctx, state, sbag);\n            ctx.restore();\n        }\n\n        protected transformLocal(ctx: puck.render.RenderContext, bag: stencil.IStencilBag) {\n        }\n\n        protected fill(ctx: puck.render.RenderContext, state: IVisualState, sbag: stencil.IStencilBag) {\n            if (!state.fill)\n                return;\n            ctx.fillEx(sbag.fillRect, state.fill);\n        }\n\n        protected stroke(ctx: puck.render.RenderContext, state: IVisualState, sbag: stencil.IStencilBag) {\n            if (!state.stroke || state.strokeThickness <= 0)\n                return;\n            ctx.strokeEx(sbag.strokeRect, state.stroke, state.strokeThickness);\n        }\n    }\n}","/// <reference path=\"../../visual/render/Processor\" />\n\nnamespace puck.path.render {\n    export class Processor extends visual.render.Processor {\n        static instance = new Processor();\n\n        protected transformLocal(ctx: puck.render.RenderContext, bag: stencil.IStencilBag) {\n            var comp = <IPathComposite>bag.composite;\n            ctx.preapply(comp.stretchTransform);\n        }\n\n        protected fill(ctx: puck.render.RenderContext, state: IPathState, sbag: stencil.IStencilBag) {\n            if (!state.fill)\n                return;\n            ctx.fillEx(sbag.fillRect, state.fill, state.fillRule);\n        }\n\n        protected stroke(ctx: puck.render.RenderContext, state: IPathState, sbag: stencil.IStencilBag) {\n            if (!state.stroke || state.strokeThickness <= 0)\n                return;\n            ctx.setStrokeExtras(state.strokeLineCap, state.strokeLineJoin, state.strokeMiterLimit);\n            ctx.strokeEx(sbag.strokeRect, state.stroke, state.strokeThickness);\n        }\n    }\n}","namespace puck.path.up.extents {\n    import IProcessorBag = puck.element.up.IProcessorBag;\n    import DirtyFlags = puck.element.DirtyFlags;\n    import rect = la.rect;\n    import mat3 = la.mat3;\n    var oldExtents = rect.init(0, 0, 0, 0);\n\n    export function process(bag: IProcessorBag) {\n        var comp = <IPathComposite>bag.composite;\n        if (!comp.hasDirt(DirtyFlags.extents))\n            return false;\n        var state = <IPathState>bag.state;\n        rect.copyTo(comp.extents, oldExtents);\n\n        rect.init(0, 0, 0, 0, comp.extents);\n        puck.fit.extents.calc(comp.extents, state.getEffectiveStretch(comp), comp.natural, state.size);\n        rect.transform(comp.extents, comp.transform, comp.extents);\n\n        if (rect.equal(comp.extents, oldExtents))\n            return false;\n        rect.union(comp.paint, oldExtents);\n        comp.taint(DirtyFlags.newbounds);\n        return true;\n    }\n}","/// <reference path=\"../../element/up/Processor\" />\n\nnamespace puck.path.up {\n    import IProcessorBag = puck.element.up.IProcessorBag;\n    import DirtyFlags = puck.element.DirtyFlags;\n    import newbounds = puck.element.up.newbounds;\n\n    export class Processor extends element.up.Processor {\n        static instance = new Processor();\n\n        process(bag: IProcessorBag): DirtyFlags {\n            var dirt = DirtyFlags.none;\n            if (extents.process(bag))\n                dirt |= DirtyFlags.extents;\n            newbounds.process(bag);\n            return dirt;\n        }\n    }\n}","interface CanvasRenderingContext2D {\r\n    backingStorePixelRatio: number;\r\n}\r\nif (!CanvasRenderingContext2D.prototype.hasOwnProperty(\"backingStorePixelRatio\")) {\r\n    Object.defineProperty(CanvasRenderingContext2D.prototype, \"backingStorePixelRatio\", {\r\n        get: function (): number {\r\n            var ctx = <any>this;\r\n            return ctx.webkitBackingStorePixelRatio\r\n                || ctx.mozBackingStorePixelRatio\r\n                || ctx.msBackingStorePixelRatio\r\n                || ctx.oBackingStorePixelRatio\r\n                || 1;\r\n        }\r\n    });\r\n}","interface CanvasRenderingContext2D {\r\n    ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, antiClockwise?: boolean);\r\n}\r\nif (!CanvasRenderingContext2D.prototype.ellipse) {\r\n    CanvasRenderingContext2D.prototype.ellipse = function (x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, antiClockwise: boolean) {\r\n        this.save();\r\n        this.translate(x, y);\r\n        this.rotate(rotation);\r\n        this.scale(radiusX, radiusY);\r\n        this.arc(0, 0, 1, startAngle, endAngle, antiClockwise);\r\n        this.restore();\r\n    };\r\n}","interface CanvasRenderingContext2D {\r\n    isPointInStroke(x: number, y: number): boolean;\r\n}\r\nif (!CanvasRenderingContext2D.prototype.isPointInStroke) {\r\n    CanvasRenderingContext2D.prototype.isPointInStroke = function (x: number, y: number) {\r\n        return false;\r\n    };\r\n}","namespace puck.polyline.down.points {\n    import IProcessorBag = puck.element.down.IProcessorBag;\n    import IPathComposite = puck.path.IPathComposite;\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    export function process(bag: IProcessorBag): boolean {\n        var state = <IPolylineState>bag.state,\n            comp = <IPathComposite>bag.composite,\n            path = state.path;\n\n        if (!path) {\n            comp.bounder.setPath(path = state.path = new curve.Path());\n        } else if (!path.isEmpty) {\n            return false;\n        }\n\n        for (var first = true, it = state.points.iter(), result = it.next(); !result.done; result = it.next()) {\n            let cur = result.value;\n            if (first) {\n                first = false;\n                path.moveTo(cur.x, cur.y);\n            } else {\n                path.lineTo(cur.x, cur.y);\n            }\n        }\n        if (state.closed)\n            path.closePath();\n\n        comp.taint(DirtyFlags.padding); // force recalculation of natural bounds\n        return true;\n    }\n}","/// <reference path=\"../../path/down/Processor\" />\n\nnamespace puck.polyline.down {\n    import IProcessorBag = puck.element.down.IProcessorBag;\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    export class Processor extends path.down.Processor {\n        static instance = new Processor();\n\n        process(bag: IProcessorBag): DirtyFlags {\n            points.process(bag);\n            return super.process(bag);\n        }\n    }\n}","/// <reference path=\"../../element/hit/Processor\" />\n\nnamespace puck.text.hit {\n    export class Processor extends element.hit.Processor {\n        static instance = new Processor();\n\n        protected prehit(el: text.IText, ctx: puck.render.RenderContext, pos: Float32Array): boolean {\n            if (!super.prehit(el, ctx, pos))\n                return false;\n            var state = el.state;\n            return !!state.fill || (!!state.stroke && state.strokeThickness > 0);\n        }\n\n        protected hit(el: text.IText, ctx: puck.render.RenderContext, pos: Float32Array, hitlist: element.IElement[]): boolean {\n            // Already verified that point is within extents\n            return true;\n        }\n    }\n}","/// <reference path=\"../../element/render/Processor\" />\n\nnamespace puck.text.render {\n    import IProcessorBag = puck.element.render.IProcessorBag;\n    var isFirefox = /firefox/i.test(navigator.userAgent);\n    var paintRegion = la.rect.init(0, 0, 0, 0);\n\n    export class Processor extends element.render.Processor {\n        static instance = new Processor();\n\n        protected render(bag: IProcessorBag): boolean {\n            var state = <ITextState>bag.state,\n                noStroke = !state.stroke || state.strokeThickness <= 0;\n            if (!state.fill && noStroke)\n                return false;\n\n            var ctx = bag.ctx,\n                raw = ctx.raw,\n                comp = bag.composite;\n            ctx.save();\n            raw.beginPath();\n            raw.font = state.font.toString();\n            raw.textAlign = \"left\";\n            paintRegion.width = comp.extents.width;\n            paintRegion.height = comp.extents.height;\n            if (state.fill)\n                this.fill(raw, state, paintRegion);\n            if (!noStroke)\n                this.stroke(raw, state, paintRegion);\n            ctx.restore();\n        }\n\n        protected fill(ctx: CanvasRenderingContext2D, state: ITextState, region: la.IRect) {\n            state.fill.setup(ctx, region);\n            ctx.fillStyle = state.fill.toHtml5Object();\n\n            if (isFirefox) {\n                ctx.textBaseline = \"bottom\";\n                ctx.fillText(state.text, 0, state.size.height);\n            } else {\n                ctx.textBaseline = \"top\";\n                ctx.fillText(state.text, 0, 0);\n            }\n        }\n\n        protected stroke(ctx: CanvasRenderingContext2D, state: ITextState, region: la.IRect) {\n            state.stroke.setup(ctx, region);\n            ctx.strokeStyle = state.stroke.toHtml5Object();\n\n            ctx.lineWidth = state.strokeThickness;\n            if (isFirefox) {\n                ctx.textBaseline = \"bottom\";\n                ctx.strokeText(state.text, 0, state.size.height);\n            } else {\n                ctx.textBaseline = \"top\";\n                ctx.strokeText(state.text, 0, 0);\n            }\n        }\n    }\n}","namespace puck.text.up.font {\n    import IProcessorBag = puck.element.up.IProcessorBag;\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    export function process(bag: IProcessorBag): boolean {\n        var state = <ITextState>bag.state,\n            comp = bag.composite;\n        if (!comp.hasDirt(DirtyFlags.font))\n            return false;\n\n        var size = state.size,\n            oldWidth = size.width,\n            oldHeight = size.height;\n        size.width = puck.font.width.measure(state.font, state.text);\n        size.height = puck.font.height.get(state.font);\n\n        if (oldWidth !== size.width || oldHeight !== size.height) {\n            comp.taint(DirtyFlags.extents);\n            return true;\n        }\n        return false;\n    }\n}","/// <reference path=\"../../element/up/Processor\" />\n\nnamespace puck.text.up {\n    import DirtyFlags = puck.element.DirtyFlags;\n    import IProcessorBag = puck.element.up.IProcessorBag;\n\n    export class Processor extends element.up.Processor {\n        static instance = new Processor();\n\n        process(bag: IProcessorBag): DirtyFlags {\n            var dirt = DirtyFlags.none;\n            font.process(bag);\n            dirt |= super.process(bag);\n            return dirt;\n        }\n    }\n}"],"sourceRoot":"/source/"}