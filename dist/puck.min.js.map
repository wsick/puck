{"version":3,"sources":["_version.ts","element/DirtyFlags.ts","Element.ts","puck.js","Container.ts","element/ElementComposite.ts","container/ContainerComposite.ts","element/ElementState.ts","container/ContainerState.ts","engine/process.ts","walk/IWalker.ts","element/down/Processor.ts","container/down/Processor.ts","element/down/opacity.ts","element/down/transform.ts","element/down/visible.ts"],"names":["puck","puck.element","puck.element.DirtyFlags","puck.Element","puck.Element.constructor","get","puck.Element.opacity","set","enumerable","configurable","puck.Element.visible","puck.Element.x","puck.Element.y","puck.Element.width","puck.Element.height","puck.Element.transformOriginX","puck.Element.transformOriginY","puck.Element.resetTransform","puck.Element.setTransform","puck.Element.applyTransform","puck.Element.init","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","puck.Container","puck.Container.constructor","puck.Container.init","puck.Container.walk","puck.Container.walk.next","puck.element.ElementComposite","puck.element.ElementComposite.constructor","puck.element.ElementComposite.hasDirt","puck.element.ElementComposite.taint","puck.element.ElementComposite.untaint","puck.element.ElementComposite.reset","puck.container","puck.container.ContainerComposite","puck.container.ContainerComposite.constructor","puck.element.ElementState","puck.element.ElementState.constructor","puck.element.ElementState.reset","puck.container.ContainerState","puck.container.ContainerState.constructor","puck.engine","puck.engine.process","puck.engine.doDown","puck.walk","puck.walk.getWalker","puck.element.down","puck.element.down.Processor","puck.element.down.Processor.isTainted","puck.element.down.Processor.process","puck.element.down.Processor.clear","puck.container.down","puck.container.down.Processor","puck.container.down.Processor.constructor","puck.container.down.Processor.process","puck.element.down.opacity","puck.element.down.opacity.process","puck.element.down.transform","puck.element.down.transform.process","puck.element.down.visible","puck.element.down.visible.process"],"mappings":"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","file":"puck.min.js","sourcesContent":["module puck {\r\n    export var version = '0.1.0';\r\n}","namespace puck.element {\n    export enum DirtyFlags {\n        none = 0,\n        opacity = 1 << 0,\n        visible = 1 << 1,\n        transform = 1 << 2,\n\n        down = DirtyFlags.opacity | DirtyFlags.visible | DirtyFlags.transform\n    }\n}","/// <reference path=\"element/DirtyFlags\" />\n\nnamespace puck {\n    import IElement = puck.element.IElement;\n    import IElementState = puck.element.IElementState;\n    import IElementComposite = puck.element.IElementComposite;\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    export class Element implements IElement {\n        state: IElementState;\n        composite: IElementComposite;\n        processor: {down: element.down.Processor};//, up: up.Processor};\n\n        get opacity(): number { return this.state.opacity; }\n        set opacity(value: number) {\n            if (this.state.opacity !== value) {\n                this.state.opacity = value;\n                this.composite.taint(DirtyFlags.opacity);\n            }\n        }\n\n        get visible(): boolean { return this.state.visible; }\n        set visible(value: boolean) {\n            if (this.state.visible !== value) {\n                this.state.visible = value;\n                this.composite.taint(DirtyFlags.visible);\n            }\n        }\n\n        get x(): number { return this.state.offset.x; }\n        set x(value: number) {\n            if (this.state.offset.x !== value) {\n                this.state.offset.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n        }\n\n        get y(): number { return this.state.offset.y; }\n        set y(value: number) {\n            if (this.state.offset.y !== value) {\n                this.state.offset.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n        }\n\n        get width(): number { return this.state.size.width; }\n        set width(value: number) {\n            if (this.state.size.width !== value) {\n                this.state.size.width = value;\n                this.composite.taint(DirtyFlags.transform);\n                //TODO: Taint extents\n            }\n        }\n\n        get height(): number { return this.state.size.height; }\n        set height(value: number) {\n            if (this.state.size.height !== value) {\n                this.state.size.height = value;\n                this.composite.taint(DirtyFlags.transform);\n                //TODO: Taint extents\n            }\n        }\n\n        get transformOriginX(): number { return this.state.transformOrigin.x; }\n        set transformOriginX(value: number) {\n            if (this.state.transformOrigin.x !== value) {\n                this.state.transformOrigin.x = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n        }\n\n        get transformOriginY(): number { return this.state.transformOrigin.y; }\n        set transformOriginY(value: number) {\n            if (this.state.transformOrigin.y !== value) {\n                this.state.transformOrigin.y = value;\n                this.composite.taint(DirtyFlags.transform);\n            }\n        }\n\n        resetTransform(): this {\n            la.mat3.identity(this.state.transform);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        }\n\n        setTransform(mat: Float32Array): this {\n            la.mat3.copyTo(mat, this.state.transform);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        }\n\n        applyTransform(mat: Float32Array): this {\n            la.mat3.apply(this.state.transform, mat);\n            return this;\n        }\n\n        constructor(state?: IElementState, composite?: IElementComposite) {\n            this.init(state, composite);\n            Object.freeze(this);\n        }\n\n        init(state?: IElementState, composite?: IElementComposite) {\n            this.state = state || new container.ContainerState();\n            this.composite = composite || new container.ContainerComposite();\n            this.processor = {\n                down: container.down.Processor.instance\n                //,up: container.up.Processor.instance\n            };\n        }\n    }\n}","var puck;\n(function (puck) {\n    puck.version = '0.1.0';\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        (function (DirtyFlags) {\n            DirtyFlags[DirtyFlags[\"none\"] = 0] = \"none\";\n            DirtyFlags[DirtyFlags[\"opacity\"] = 1] = \"opacity\";\n            DirtyFlags[DirtyFlags[\"visible\"] = 2] = \"visible\";\n            DirtyFlags[DirtyFlags[\"transform\"] = 4] = \"transform\";\n            DirtyFlags[DirtyFlags[\"down\"] = 7] = \"down\";\n        })(element.DirtyFlags || (element.DirtyFlags = {}));\n        var DirtyFlags = element.DirtyFlags;\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var DirtyFlags = puck.element.DirtyFlags;\n    var Element = (function () {\n        function Element(state, composite) {\n            this.init(state, composite);\n            Object.freeze(this);\n        }\n        Object.defineProperty(Element.prototype, \"opacity\", {\n            get: function () { return this.state.opacity; },\n            set: function (value) {\n                if (this.state.opacity !== value) {\n                    this.state.opacity = value;\n                    this.composite.taint(DirtyFlags.opacity);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Element.prototype, \"visible\", {\n            get: function () { return this.state.visible; },\n            set: function (value) {\n                if (this.state.visible !== value) {\n                    this.state.visible = value;\n                    this.composite.taint(DirtyFlags.visible);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Element.prototype, \"x\", {\n            get: function () { return this.state.offset.x; },\n            set: function (value) {\n                if (this.state.offset.x !== value) {\n                    this.state.offset.x = value;\n                    this.composite.taint(DirtyFlags.transform);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Element.prototype, \"y\", {\n            get: function () { return this.state.offset.y; },\n            set: function (value) {\n                if (this.state.offset.y !== value) {\n                    this.state.offset.y = value;\n                    this.composite.taint(DirtyFlags.transform);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Element.prototype, \"width\", {\n            get: function () { return this.state.size.width; },\n            set: function (value) {\n                if (this.state.size.width !== value) {\n                    this.state.size.width = value;\n                    this.composite.taint(DirtyFlags.transform);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Element.prototype, \"height\", {\n            get: function () { return this.state.size.height; },\n            set: function (value) {\n                if (this.state.size.height !== value) {\n                    this.state.size.height = value;\n                    this.composite.taint(DirtyFlags.transform);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Element.prototype, \"transformOriginX\", {\n            get: function () { return this.state.transformOrigin.x; },\n            set: function (value) {\n                if (this.state.transformOrigin.x !== value) {\n                    this.state.transformOrigin.x = value;\n                    this.composite.taint(DirtyFlags.transform);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Element.prototype, \"transformOriginY\", {\n            get: function () { return this.state.transformOrigin.y; },\n            set: function (value) {\n                if (this.state.transformOrigin.y !== value) {\n                    this.state.transformOrigin.y = value;\n                    this.composite.taint(DirtyFlags.transform);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Element.prototype.resetTransform = function () {\n            la.mat3.identity(this.state.transform);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        };\n        Element.prototype.setTransform = function (mat) {\n            la.mat3.copyTo(mat, this.state.transform);\n            this.composite.taint(DirtyFlags.transform);\n            return this;\n        };\n        Element.prototype.applyTransform = function (mat) {\n            la.mat3.apply(this.state.transform, mat);\n            return this;\n        };\n        Element.prototype.init = function (state, composite) {\n            this.state = state || new puck.container.ContainerState();\n            this.composite = composite || new puck.container.ContainerComposite();\n            this.processor = {\n                down: puck.container.down.Processor.instance\n            };\n        };\n        return Element;\n    })();\n    puck.Element = Element;\n})(puck || (puck = {}));\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar puck;\n(function (puck) {\n    var Container = (function (_super) {\n        __extends(Container, _super);\n        function Container(state, composite) {\n            _super.call(this, state, composite);\n        }\n        Container.prototype.init = function (state, composite) {\n            this.elements = [];\n            this.state = state || new puck.container.ContainerState();\n            this.composite = composite || new puck.container.ContainerComposite();\n            this.processor = {\n                down: puck.container.down.Processor.instance\n            };\n        };\n        Container.prototype.walk = function () {\n            var i = -1;\n            var els = this.elements;\n            var walker = {\n                next: function () {\n                    i++;\n                    return els[i];\n                }\n            };\n            return walker;\n        };\n        return Container;\n    })(puck.Element);\n    puck.Container = Container;\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var ElementComposite = (function () {\n            function ElementComposite() {\n                this.$$dirt = element.DirtyFlags.none;\n                this.opacity = 1.0;\n                this.visible = true;\n                this.transform = la.mat3.identity();\n            }\n            ElementComposite.prototype.hasDirt = function (match) {\n                return (this.$$dirt & match) > 0;\n            };\n            ElementComposite.prototype.taint = function (newDirt) {\n                this.$$dirt |= newDirt;\n            };\n            ElementComposite.prototype.untaint = function (oldDirt) {\n                this.$$dirt &= ~oldDirt;\n            };\n            ElementComposite.prototype.reset = function () {\n                this.opacity = 1.0;\n                this.visible = true;\n                la.mat3.identity(this.transform);\n            };\n            return ElementComposite;\n        })();\n        element.ElementComposite = ElementComposite;\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var container;\n    (function (container) {\n        var ContainerComposite = (function (_super) {\n            __extends(ContainerComposite, _super);\n            function ContainerComposite() {\n                _super.apply(this, arguments);\n            }\n            return ContainerComposite;\n        })(puck.element.ElementComposite);\n        container.ContainerComposite = ContainerComposite;\n    })(container = puck.container || (puck.container = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var ElementState = (function () {\n            function ElementState() {\n                this.opacity = 1.0;\n                this.visible = true;\n                this.offset = { x: 0, y: 0 };\n                this.size = { width: 0, height: 0 };\n                this.transform = la.mat3.identity();\n                this.transformOrigin = { x: 0.5, y: 0.5 };\n            }\n            ElementState.prototype.reset = function () {\n                this.opacity = 1.0;\n                this.visible = true;\n                this.offset.x = 0;\n                this.offset.y = 0;\n                this.size.width = 0;\n                this.size.height = 0;\n                la.mat3.identity(this.transform);\n                this.transformOrigin.x = 0.5;\n                this.transformOrigin.y = 0.5;\n            };\n            return ElementState;\n        })();\n        element.ElementState = ElementState;\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var container;\n    (function (container) {\n        var ContainerState = (function (_super) {\n            __extends(ContainerState, _super);\n            function ContainerState() {\n                _super.apply(this, arguments);\n            }\n            return ContainerState;\n        })(puck.element.ElementState);\n        container.ContainerState = ContainerState;\n    })(container = puck.container || (puck.container = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var engine;\n    (function (engine) {\n        function process(el, parent) {\n            doDown(el, parent);\n            for (var walker = puck.walk.getWalker(el), cur = walker.next(); !!cur; cur = walker.next()) {\n                process(cur, el);\n            }\n            doUp(el, parent);\n        }\n        engine.process = process;\n        function doDown(el, parent) {\n            var processor = el.processor.down;\n            var bag = {\n                walker: puck.walk.getWalker(el),\n                state: el.state,\n                composite: el.composite,\n                pcomposite: parent.composite\n            };\n            if (processor.isTainted(bag))\n                processor.process(bag);\n        }\n        function doUp(el, parent) {\n        }\n    })(engine = puck.engine || (puck.engine = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var walk;\n    (function (walk) {\n        var EMPTY_WALKER = {\n            next: function () {\n                return undefined;\n            }\n        };\n        function getWalker(el) {\n            if (typeof el.walk === \"function\")\n                return el.walk();\n            return EMPTY_WALKER;\n        }\n        walk.getWalker = getWalker;\n    })(walk = puck.walk || (puck.walk = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var down;\n        (function (down) {\n            var Processor = (function () {\n                function Processor() {\n                }\n                Processor.prototype.isTainted = function (bag) {\n                    return bag.composite.hasDirt(element.DirtyFlags.down);\n                };\n                Processor.prototype.process = function (bag) {\n                    var dirt = element.DirtyFlags.none;\n                    if (down.opacity.process(bag))\n                        dirt |= element.DirtyFlags.opacity;\n                    if (down.visible.process(bag))\n                        dirt |= element.DirtyFlags.visible;\n                    if (down.transform.process(bag))\n                        dirt |= element.DirtyFlags.transform;\n                    this.clear(bag);\n                    return dirt;\n                };\n                Processor.prototype.clear = function (bag) {\n                    bag.composite.untaint(element.DirtyFlags.opacity | element.DirtyFlags.visible | element.DirtyFlags.transform);\n                    return this;\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })();\n            down.Processor = Processor;\n        })(down = element.down || (element.down = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var container;\n    (function (container) {\n        var down;\n        (function (down) {\n            var Processor = (function (_super) {\n                __extends(Processor, _super);\n                function Processor() {\n                    _super.apply(this, arguments);\n                }\n                Processor.prototype.process = function (bag) {\n                    var dirt = _super.prototype.process.call(this, bag);\n                    for (var cur = bag.walker.next(); !!cur; cur = bag.walker.next()) {\n                        cur.composite.taint(dirt);\n                    }\n                    return dirt;\n                };\n                Processor.instance = new Processor();\n                return Processor;\n            })(puck.element.down.Processor);\n            down.Processor = Processor;\n        })(down = container.down || (container.down = {}));\n    })(container = puck.container || (puck.container = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var down;\n        (function (down) {\n            var opacity;\n            (function (opacity) {\n                function process(bag) {\n                    var comp = bag.composite;\n                    if (!comp.hasDirt(element.DirtyFlags.opacity))\n                        return false;\n                    var newOpacity = bag.pcomposite.opacity * bag.state.opacity;\n                    var changed = comp.opacity === newOpacity;\n                    comp.opacity = newOpacity;\n                    return changed;\n                }\n                opacity.process = process;\n            })(opacity = down.opacity || (down.opacity = {}));\n        })(down = element.down || (element.down = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var down;\n        (function (down) {\n            var transform;\n            (function (transform) {\n                var mat3 = la.mat3;\n                var oldTransform = mat3.identity();\n                function process(bag) {\n                    var comp = bag.composite;\n                    if (!comp.hasDirt(element.DirtyFlags.transform))\n                        return false;\n                    mat3.copyTo(comp.transform, oldTransform);\n                    var state = bag.state;\n                    var xo = {\n                        x: state.transformOrigin.x * state.size.width,\n                        y: state.transformOrigin.y * state.size.height\n                    };\n                    mat3.createTranslate(-xo.x, -xo.y, comp.transform);\n                    mat3.apply(comp.transform, state.transform);\n                    mat3.translate(comp.transform, xo.x, xo.y);\n                    if (!mat3.equal(comp.transform, oldTransform)) {\n                    }\n                    return true;\n                }\n                transform.process = process;\n            })(transform = down.transform || (down.transform = {}));\n        })(down = element.down || (element.down = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\nvar puck;\n(function (puck) {\n    var element;\n    (function (element) {\n        var down;\n        (function (down) {\n            var visible;\n            (function (visible) {\n                function process(bag) {\n                    var comp = bag.composite;\n                    if (!comp.hasDirt(element.DirtyFlags.visible))\n                        return false;\n                    var newVisible = bag.pcomposite.visible && (bag.state.visible === true);\n                    var changed = comp.visible !== newVisible;\n                    if (changed) {\n                    }\n                    comp.visible = newVisible;\n                    return changed;\n                }\n                visible.process = process;\n            })(visible = down.visible || (down.visible = {}));\n        })(down = element.down || (element.down = {}));\n    })(element = puck.element || (puck.element = {}));\n})(puck || (puck = {}));\n","/// <reference path=\"Element\" />\n\nnamespace puck {\n    import IContainer = puck.container.IContainer;\n    import IElement = puck.element.IElement;\n    import IContainerState = puck.container.IContainerState;\n    import IContainerComposite = puck.container.IContainerComposite;\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    export class Container extends Element implements IContainer {\n        state: IContainerState;\n        composite: IContainerComposite;\n        elements: IElement[];\n        processor: {down: container.down.Processor};//, up: up.Processor};\n\n        constructor(state?: IContainerState, composite?: IContainerComposite) {\n            super(state, composite);\n        }\n\n        init(state?: IContainerState, composite?: IContainerComposite) {\n            this.elements = [];\n            this.state = state || new container.ContainerState();\n            this.composite = composite || new container.ContainerComposite();\n            this.processor = {\n                down: container.down.Processor.instance\n                //,up: container.up.Processor.instance\n            };\n        }\n\n        walk(): walk.IWalker<element.IElement> {\n            var i = -1;\n            var els = this.elements;\n            var walker = {\n                next(): element.IElement {\n                    i++;\n                    return els[i];\n                }\n            };\n            return walker;\n        }\n    }\n}","namespace puck.element {\n    export interface IElementComposite {\n        hasDirt(match: DirtyFlags): boolean;\n        taint(newDirt: DirtyFlags);\n        untaint(oldDirt: DirtyFlags);\n        reset();\n        opacity: number;\n        visible: boolean;\n        transform: Float32Array;\n    }\n    export class ElementComposite implements IElementComposite {\n        private $$dirt = DirtyFlags.none;\n\n        opacity = 1.0;\n        visible = true;\n        transform = la.mat3.identity();\n\n        hasDirt(match: DirtyFlags): boolean {\n            return (this.$$dirt & match) > 0;\n        }\n\n        taint(newDirt: DirtyFlags) {\n            this.$$dirt |= newDirt;\n        }\n\n        untaint(oldDirt: DirtyFlags) {\n            this.$$dirt &= ~oldDirt;\n        }\n\n        reset() {\n            this.opacity = 1.0;\n            this.visible = true;\n            la.mat3.identity(this.transform);\n        }\n    }\n}","/// <reference path=\"../element/ElementComposite\" />\n\nnamespace puck.container {\n    export interface IContainerComposite extends element.IElementComposite {\n    }\n    export class ContainerComposite extends element.ElementComposite implements IContainerComposite {\n    }\n}","namespace puck.element {\n    export interface IElementState {\n        //range: [0.0, 1.0]\n        opacity: number;\n        visible: boolean;\n        //visual offset from parent\n        offset: la.IPoint;\n        size: la.ISize;\n        transform: Float32Array;\n        //origin of transform in relative coordinate space ([0.0,1.0], [0.0,1.0])\n        transformOrigin: la.IPoint;\n        reset();\n    }\n\n    export class ElementState implements IElementState {\n        opacity = 1.0;\n        visible = true;\n        offset = {x: 0, y: 0};\n        size = {width: 0, height: 0};\n        transform = la.mat3.identity();\n        transformOrigin = {x: 0.5, y: 0.5};\n\n        reset() {\n            this.opacity = 1.0;\n            this.visible = true;\n            this.offset.x = 0;\n            this.offset.y = 0;\n            this.size.width = 0;\n            this.size.height = 0;\n            la.mat3.identity(this.transform);\n            this.transformOrigin.x = 0.5;\n            this.transformOrigin.y = 0.5;\n        }\n    }\n}","/// <reference path=\"../element/ElementState\" />\n\nnamespace puck.container {\n    export interface IContainerState extends element.IElementState {\n    }\n    export class ContainerState extends element.ElementState implements IContainerState {\n    }\n}","namespace puck.engine {\n    // Process walks entire layer\n    // -> Down phase is processed pre-order\n    // -> Up phase is processed post-order\n    export function process(el: element.IElement, parent?: element.IElement) {\n        doDown(el, parent);\n        for (var walker = walk.getWalker(el), cur = walker.next(); !!cur; cur = walker.next()) {\n            process(cur, el);\n        }\n        doUp(el, parent);\n    }\n\n    function doDown(el: element.IElement, parent: element.IElement) {\n        var processor = el.processor.down;\n        var bag = {\n            walker: walk.getWalker(el),\n            state: el.state,\n            composite: el.composite,\n            pcomposite: parent.composite\n        };\n        if (processor.isTainted(bag))\n            processor.process(bag);\n    }\n\n    function doUp(el: element.IElement, parent: element.IElement) {\n\n    }\n}","namespace puck.walk {\n    export interface IWalker<T> {\n        next(): T;\n    }\n\n    var EMPTY_WALKER: walk.IWalker<element.IElement> = {\n        next() {\n            return undefined;\n        }\n    };\n\n    export function getWalker(el: element.IElement): IWalker<element.IElement> {\n        if (typeof (<container.IContainer>el).walk === \"function\")\n            return (<container.IContainer>el).walk();\n        return EMPTY_WALKER;\n    }\n}","namespace puck.element.down {\n    export interface IProcessorBag {\n        state: IElementState;\n        composite: IElementComposite;\n        pcomposite: IElementComposite; //parent composite\n    }\n\n    export class Processor {\n        static instance = new Processor();\n\n        isTainted(bag: IProcessorBag): boolean {\n            return bag.composite.hasDirt(DirtyFlags.down);\n        }\n\n        process(bag: IProcessorBag): DirtyFlags {\n            var dirt = DirtyFlags.none;\n            if (opacity.process(bag))\n                dirt |= DirtyFlags.opacity;\n            if (visible.process(bag))\n                dirt |= DirtyFlags.visible;\n            if (transform.process(bag))\n                dirt |= DirtyFlags.transform;\n            this.clear(bag);\n            return dirt;\n        }\n\n        clear(bag: IProcessorBag): this {\n            bag.composite.untaint(DirtyFlags.opacity | DirtyFlags.visible | DirtyFlags.transform);\n            return this;\n        }\n    }\n}","/// <reference path=\"../../element/down/Processor\" />\n\nnamespace puck.container.down {\n    import DirtyFlags = puck.element.DirtyFlags;\n\n    export interface IProcessorBag extends element.down.IProcessorBag {\n        walker: walk.IWalker<element.IElement>;\n        state: IContainerState;\n        composite: IContainerComposite;\n        pcomposite: IContainerComposite; //parent composite\n    }\n\n    export class Processor extends element.down.Processor {\n        static instance = new Processor();\n\n        process(bag: IProcessorBag): DirtyFlags {\n            var dirt = super.process(bag);\n            for (var cur = bag.walker.next(); !!cur; cur = bag.walker.next()) {\n                cur.composite.taint(dirt);\n            }\n            return dirt;\n        }\n    }\n}","namespace puck.element.down.opacity {\n    export function process(bag: IProcessorBag): boolean {\n        var comp = bag.composite;\n        if (!comp.hasDirt(DirtyFlags.opacity))\n            return false;\n        var newOpacity = bag.pcomposite.opacity * bag.state.opacity;\n        var changed = comp.opacity === newOpacity;\n        comp.opacity = newOpacity;\n        return changed;\n    }\n}","namespace puck.element.down.transform {\n    import mat3 = la.mat3;\n    var oldTransform = mat3.identity();\n    export function process(bag: IProcessorBag): boolean {\n        var comp = bag.composite;\n        if (!comp.hasDirt(DirtyFlags.transform))\n            return false;\n        mat3.copyTo(comp.transform, oldTransform);\n        var state = bag.state;\n        var xo: la.IPoint = {\n            x: state.transformOrigin.x * state.size.width,\n            y: state.transformOrigin.y * state.size.height\n        };\n        mat3.createTranslate(-xo.x, -xo.y, comp.transform); //Shift into transformOrigin coordinate space\n        mat3.apply(comp.transform, state.transform);\n        mat3.translate(comp.transform, xo.x, xo.y); //Shift back out of transformOrigin coordinate space\n        if (!mat3.equal(comp.transform, oldTransform)) {\n            //TODO: Taint extents\n        }\n        return true;\n    }\n}","namespace puck.element.down.visible {\n    export function process(bag: IProcessorBag): boolean {\n        var comp = bag.composite;\n        if (!comp.hasDirt(DirtyFlags.visible))\n            return false;\n        var newVisible = bag.pcomposite.visible && (bag.state.visible === true);\n        var changed = comp.visible !== newVisible;\n        if (changed) {\n            //TODO: taint `NewBounds`\n\n        }\n        comp.visible = newVisible;\n        return changed;\n    }\n}"],"sourceRoot":"/source/"}