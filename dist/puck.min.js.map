{"version":3,"sources":["mat3.ts","vec2.ts"],"names":["puck","puck.mat3","puck.mat3.create","puck.mat3.copyTo","puck.mat3.init","puck.mat3.identity","puck.mat3.equal","puck.mat3.multiply","puck.mat3.inverse","puck.mat3.transformVec2","puck.mat3.createTranslate","puck.mat3.translate","puck.mat3.createScale","puck.mat3.scale","puck.mat3.createRotate","puck.mat3.createSkew","puck.mat3.preapply","puck.mat3.apply","puck.mat3.simple_inverse","puck.mat3.complex_inverse","puck.vec2","puck.vec2.create","puck.vec2.init","puck.vec2.clone","puck.vec2.reverse","puck.vec2.orthogonal","puck.vec2.normalize","puck.vec2.rotate","puck.vec2.angleBetween","puck.vec2.isClockwiseTo","puck.vec2.intersection"],"mappings":"AAAA,GAAUA,OAAV,SAAUA,GAAKA,GAAAA,IAAAA,SAAAA,GAMXC,QAAAA,GAAuBA,GACnBC,GAAIA,GAAOA,GAAIA,cAAaA,EAa5BA,OAXIA,IACAA,EAAKA,GAAKA,EAAIA,GACdA,EAAKA,GAAKA,EAAIA,GACdA,EAAKA,GAAKA,EAAIA,GACdA,EAAKA,GAAKA,EAAIA,GACdA,EAAKA,GAAKA,EAAIA,GACdA,EAAKA,GAAKA,EAAIA,IAEdA,EAAKA,GAAKA,EAAKA,GAAKA,EAAKA,GAAKA,EAAKA,GAAKA,EAAKA,GAAKA,EAAKA,GAAKA,EAGzDA,EAGXD,QAAAA,GAAuBA,EAAmBA,GAOtCE,MANAA,GAAKA,GAAKA,EAAIA,GACdA,EAAKA,GAAKA,EAAIA,GACdA,EAAKA,GAAKA,EAAIA,GACdA,EAAKA,GAAKA,EAAIA,GACdA,EAAKA,GAAKA,EAAIA,GACdA,EAAKA,GAAKA,EAAIA,GACPA,EAGXF,QAAAA,GAAqBA,EAAoBA,EAAaA,EAAaA,EAAaA,EAAaA,EAAYA,GAOrGG,MANAA,GAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACHA,EAGXH,QAAAA,GAAyBA,GAQrBI,MAPKA,KAAMA,EAAOA,KAClBA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACHA,EAGXJ,QAAAA,GAAsBA,EAAiBA,GACnCK,MAAOA,KAAMA,GACLA,KAAKA,IAAIA,EAAEA,GAAKA,EAAEA,IAAMA,GACxBA,KAAKA,IAAIA,EAAEA,GAAKA,EAAEA,IAAMA,GACxBA,KAAKA,IAAIA,EAAEA,GAAKA,EAAEA,IAAMA,GACxBA,KAAKA,IAAIA,EAAEA,GAAKA,EAAEA,IAAMA,GACxBA,KAAKA,IAAIA,EAAEA,GAAKA,EAAEA,IAAMA,GACxBA,KAAKA,IAAIA,EAAEA,GAAKA,EAAEA,IAAMA,EAIpCL,QAAAA,GAAyBA,EAAiBA,EAAiBA,GAClDM,IAAMA,EAAOA,EAClBA,IAAIA,GAAMA,EAAEA,GAAIA,EAAMA,EAAEA,GACpBA,EAAMA,EAAEA,GAAIA,EAAMA,EAAEA,GACpBA,EAAMA,EAAEA,GAAIA,EAAMA,EAAEA,GACpBA,EAAMA,EAAEA,GAAIA,EAAMA,EAAEA,GACpBA,EAAMA,EAAEA,GAAIA,EAAMA,EAAEA,GACpBA,EAAMA,EAAEA,GAAIA,EAAMA,EAAEA,EAWxBA,OATAA,GAAKA,GAAKA,EAAMA,EAAMA,EAAMA,EAC5BA,EAAKA,GAAKA,EAAMA,EAAMA,EAAMA,EAE5BA,EAAKA,GAAKA,EAAMA,EAAMA,EAAMA,EAC5BA,EAAKA,GAAKA,EAAMA,EAAMA,EAAMA,EAE5BA,EAAKA,GAAKA,EAAMA,EAAMA,EAAMA,EAAMA,EAClCA,EAAKA,GAAKA,EAAMA,EAAMA,EAAMA,EAAMA,EAE3BA,EAGXN,QAAAA,GAAwBA,EAAmBA,GACvCO,MAAIA,MAAKA,IAAIA,EAAIA,IAAMA,GAAiBA,KAAKA,IAAIA,EAAIA,IAAMA,EAChDA,EAAeA,EAAKA,GAEpBA,EAAgBA,EAAKA,GAGpCP,QAAAA,GAA8BA,EAAmBA,EAAmBA,GAC3DQ,IAAMA,EAAOA,EAClBA,IAAIA,GAAIA,EAAIA,GACRA,EAAIA,EAAIA,EAGZA,OAFAA,GAAKA,GAAMA,EAAIA,GAAKA,EAAMA,EAAIA,GAAKA,EAAKA,EAAIA,GAC5CA,EAAKA,GAAMA,EAAIA,GAAKA,EAAMA,EAAIA,GAAKA,EAAKA,EAAIA,GACrCA,EAGXR,QAAAA,GAAgCA,EAAWA,EAAWA,GAQlDS,MAPKA,KAAMA,EAAOA,KAClBA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACHA,EAGXT,QAAAA,GAA0BA,EAAmBA,EAAWA,GAGpDU,MAFAA,GAAIA,IAAMA,EACVA,EAAIA,IAAMA,EACHA,EAGXV,QAAAA,GAA4BA,EAAYA,EAAYA,GAQhDW,MAPKA,KAAMA,EAAOA,KAClBA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACHA,EAGXX,QAAAA,GAAsBA,EAAmBA,EAAYA,GAQjDY,MAPAA,GAAIA,IAAMA,EACVA,EAAIA,IAAMA,EACVA,EAAIA,IAAMA,EAEVA,EAAIA,IAAMA,EACVA,EAAIA,IAAMA,EACVA,EAAIA,IAAMA,EACHA,EAGXZ,QAAAA,GAA6BA,EAAkBA,GACtCa,IAAMA,EAAOA,IAClBA,IAAIA,GAAIA,KAAKA,IAAIA,GACbA,EAAIA,KAAKA,IAAIA,EAOjBA,OANAA,GAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,IAAMA,EACXA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACHA,EAGXb,QAAAA,GAA2BA,EAAmBA,EAAmBA,GAQ7Dc,MAPKA,KAAMA,EAAOA,KAClBA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,KAAKA,IAAIA,GACnBA,EAAKA,GAAKA,KAAKA,IAAIA,GACnBA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACHA,EAGXd,QAAAA,GAAyBA,EAAoBA,GACzCe,MAAOA,GAASA,EAAKA,EAAMA,GAG/Bf,QAAAA,GAAsBA,EAAoBA,GACtCgB,MAAOA,GAASA,EAAMA,EAAKA,GAG/BhB,QAAAA,GAAwBA,EAAmBA,GACvCiB,GAAIA,GAAMA,EAAIA,EACdA,IAAIA,KAAKA,IAAIA,GAAOA,EAChBA,MAAOA,KAEXA,IAAIA,GAAMA,EAAIA,EACdA,IAAIA,KAAKA,IAAIA,GAAOA,EAChBA,MAAOA,KAENA,IAGDA,EAAKA,GAAKA,EAAIA,GACdA,EAAKA,GAAKA,EAAIA,IAHdA,EAAOA,CAMXA,IAAIA,IAAMA,EAAIA,GACVA,GAAMA,EAAIA,EAcdA,OAbIA,MAAKA,IAAIA,EAAMA,GAAKA,IACpBA,EAAMA,EAAIA,EACVA,GAAMA,GAENA,KAAKA,IAAIA,EAAMA,GAAKA,IACpBA,EAAMA,EAAIA,EACVA,GAAMA,GAGVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACHA,EAGXjB,QAAAA,GAAyBA,EAAmBA,GACnCkB,IAAMA,EAAOA,EAElBA,IAAIA,GAAMA,EAAIA,GAAIA,EAAMA,EAAIA,GACxBA,EAAMA,EAAIA,GAAIA,EAAMA,EAAIA,GAGxBA,EAAMA,EAAMA,EAAMA,EAAMA,CAC5BA,IAAYA,IAARA,IAAcA,SAASA,GACvBA,MAAOA,KACXA,IAAIA,GAAKA,EAAIA,EAETA,EAAKA,EAAIA,GAAIA,EAAKA,EAAIA,EAQ1BA,OANAA,GAAKA,GAAKA,EAAMA,EAChBA,EAAKA,IAAMA,EAAMA,EACjBA,EAAKA,IAAMA,EAAMA,EACjBA,EAAKA,GAAKA,EAAMA,EAChBA,EAAKA,IAAMA,EAAMA,EAAKA,EAAMA,GAAMA,EAClCA,EAAKA,IAAMA,EAAMA,EAAKA,EAAMA,GAAMA,EAC3BA,EA/NXlB,GAAIA,GAAgBA,IAEJA,GAAAA,OAAMA,EAiBNA,EAAAA,OAAMA,EAUNA,EAAAA,KAAIA,EAUJA,EAAAA,SAAQA,EAWRA,EAAAA,MAAKA,EAWLA,EAAAA,SAAQA,EAqBRA,EAAAA,QAAOA,EAOPA,EAAAA,cAAaA,EASbA,EAAAA,gBAAeA,EAWfA,EAAAA,UAASA,EAMTA,EAAAA,YAAWA,EAWXA,EAAAA,MAAKA,EAWLA,EAAAA,aAAYA,EAaZA,EAAAA,WAAUA,EAWVA,EAAAA,SAAQA,EAIRA,EAAAA,MAAKA,GAzKVD,EAAAA,EAAAA,OAAAA,EAAAA,WAALA,OAAAA,SCAV,IAAUA,OAAV,SAAUA,GAAKA,GAAAA,IAAAA,SAAAA,GAGXoB,QAAAA,GAAuBA,EAAWA,GAC9BC,GAAIA,GAAOA,GAAIA,cAAaA,EAG5BA,OAFAA,GAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACHA,EAGXD,QAAAA,GAAqBA,EAAWA,EAAWA,GAIvCE,MAHKA,KAAMA,EAAOA,GAAIA,cAAaA,IACnCA,EAAKA,GAAKA,EACVA,EAAKA,GAAKA,EACHA,EAGXF,QAAAA,GAAsBA,EAAmBA,GACrCG,MAAOA,GAAKA,EAAIA,GAAIA,EAAIA,GAAIA,GAGhCH,QAAAA,GAAwBA,EAAmBA,GAIvCI,MAHKA,KAAMA,EAAOA,GAClBA,EAAKA,IAAMA,EAAIA,GACfA,EAAKA,IAAMA,EAAIA,GACRA,EAIXJ,QAAAA,GAA2BA,EAAmBA,GACrCK,IAAMA,EAAOA,EAClBA,IAAIA,GAAIA,EAAIA,GACRA,EAAIA,EAAIA,EAGZA,OAFAA,GAAKA,IAAMA,EACXA,EAAKA,GAAKA,EACHA,EAGXL,QAAAA,GAA0BA,EAAmBA,GACpCM,IAAMA,EAAOA,EAClBA,IAAIA,GAAIA,EAAIA,GACRA,EAAIA,EAAIA,GACRA,EAAMA,KAAKA,KAAKA,EAAIA,EAAIA,EAAIA,EAGhCA,OAFAA,GAAKA,GAAKA,EAAIA,EACdA,EAAKA,GAAKA,EAAIA,EACPA,EAIXN,QAAAA,GAAuBA,EAAmBA,EAAeA,GAChDO,IAAMA,EAAOA,EAClBA,IAAIA,GAAIA,KAAKA,IAAIA,GACbA,EAAIA,KAAKA,IAAIA,GACbA,EAAIA,EAAIA,GACRA,EAAIA,EAAIA,EAGZA,OAFAA,GAAKA,GAAKA,EAAIA,EAAIA,EAAIA,EACtBA,EAAKA,GAAKA,EAAIA,EAAIA,EAAIA,EACfA,EAIXP,QAAAA,GAA6BA,EAAiBA,GAC1CQ,GAAIA,GAAKA,EAAEA,GACPA,EAAKA,EAAEA,GACPA,EAAKA,EAAEA,GACPA,EAAKA,EAAEA,GACPA,EAAMA,EAAKA,EAAKA,EAAKA,EACrBA,EAAMA,KAAKA,KAAKA,EAAKA,EAAKA,EAAKA,GAAMA,KAAKA,KAAKA,EAAKA,EAAKA,EAAKA,EAClEA,OAAOA,MAAKA,KAAKA,EAAMA,GAI3BR,QAAAA,GAA8BA,EAAkBA,GAC5CS,GAAIA,GAAQA,EAAaA,EAAIA,GACzBA,EAAMA,EAAUA,EAAMA,IACtBA,EAAMA,EAAUA,EAAMA,GAC1BA,GAAOA,EAAKA,EACZA,IAAIA,GAAKA,KAAKA,IAAIA,EAAIA,GAAKA,EAAIA,IAC3BA,EAAKA,KAAKA,IAAIA,EAAIA,GAAKA,EAAIA,GAC/BA,OAAYA,GAALA,GACKA,EAALA,EAIXT,QAAAA,GAA6BA,EAAkBA,EAAkBA,EAAkBA,GAC/EU,GAAIA,GAAKA,EAAGA,GACRA,EAAKA,EAAGA,GACRA,EAAKA,EAAKA,EAAGA,GACbA,EAAKA,EAAKA,EAAGA,GAEbA,EAAKA,EAAGA,GACRA,EAAKA,EAAGA,GACRA,EAAKA,EAAKA,EAAGA,GACbA,EAAKA,EAAKA,EAAGA,GAEbA,GAAOA,EAAKA,IAAOA,EAAKA,IAAOA,EAAKA,IAAOA,EAAKA,EACpDA,IAAYA,IAARA,EACAA,MAAOA,KAEXA,IAAIA,IAAOA,EAAKA,EAAKA,EAAKA,IAAOA,EAAKA,IAASA,EAAKA,IAAOA,EAAKA,EAAKA,EAAKA,GACtEA,GAAOA,EAAKA,EAAKA,EAAKA,IAAOA,EAAKA,IAASA,EAAKA,IAAOA,EAAKA,EAAKA,EAAKA,EAC1EA,OAAOA,GAAKA,OAAOA,EAAKA,EAAKA,EAAKA,GApGtCV,GAAIA,GAAUA,KAEEA,GAAAA,OAAMA,EAONA,EAAAA,KAAIA,EAOJA,EAAAA,MAAKA,EAILA,EAAAA,QAAOA,EAQPA,EAAAA,WAAUA,EASVA,EAAAA,UAASA,EAWTA,EAAAA,OAAMA,EAYNA,EAAAA,aAAYA,EAWZA,EAAAA,cAAaA,EAYbA,EAAAA,aAAYA,GApFjBpB,EAAAA,EAAAA,OAAAA,EAAAA,WAALA,OAAAA","file":"puck.min.js","sourcesContent":["namespace puck.mat3 {\n    /// NOTE:\n    ///     Row-major order\n    ///     [m11, m12, m21, m22, x0, y0]\n    var FLOAT_EPSILON = 0.000001;\n\n    export function create(src?: number[]|Float32Array): Float32Array {\n        var dest = new Float32Array(6);\n\n        if (src) {\n            dest[0] = src[0];\n            dest[1] = src[1];\n            dest[2] = src[2];\n            dest[3] = src[3];\n            dest[4] = src[4];\n            dest[5] = src[5];\n        } else {\n            dest[0] = dest[1] = dest[2] = dest[3] = dest[4] = dest[5] = 0;\n        }\n\n        return dest;\n    }\n\n    export function copyTo(src: Float32Array, dest: Float32Array): Float32Array {\n        dest[0] = src[0];\n        dest[1] = src[1];\n        dest[2] = src[2];\n        dest[3] = src[3];\n        dest[4] = src[4];\n        dest[5] = src[5];\n        return dest;\n    }\n\n    export function init(dest: Float32Array, m11: number, m12: number, m21: number, m22: number, x0: number, y0: number): Float32Array {\n        dest[0] = m11;\n        dest[1] = m12;\n        dest[2] = m21;\n        dest[3] = m22;\n        dest[4] = x0;\n        dest[5] = y0;\n        return dest;\n    }\n\n    export function identity(dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        dest[0] = 1;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = 1;\n        dest[4] = 0;\n        dest[5] = 0;\n        return dest;\n    }\n\n    export function equal(a: Float32Array, b: Float32Array): boolean {\n        return a === b || (\n                Math.abs(a[0] - b[0]) < FLOAT_EPSILON &&\n                Math.abs(a[1] - b[1]) < FLOAT_EPSILON &&\n                Math.abs(a[2] - b[2]) < FLOAT_EPSILON &&\n                Math.abs(a[3] - b[3]) < FLOAT_EPSILON &&\n                Math.abs(a[4] - b[4]) < FLOAT_EPSILON &&\n                Math.abs(a[5] - b[5]) < FLOAT_EPSILON\n            );\n    }\n\n    export function multiply(a: Float32Array, b: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = a;\n        var a11 = a[0], a12 = a[1],\n            a21 = a[2], a22 = a[3],\n            ax0 = a[4], ay0 = a[5],\n            b11 = b[0], b12 = b[1],\n            b21 = b[2], b22 = b[3],\n            bx0 = b[4], by0 = b[5];\n\n        dest[0] = a11 * b11 + a12 * b21;\n        dest[1] = a11 * b12 + a12 * b22;\n\n        dest[2] = a21 * b11 + a22 * b21;\n        dest[3] = a21 * b12 + a22 * b22;\n\n        dest[4] = ax0 * b11 + ay0 * b21 + bx0;\n        dest[5] = ax0 * b12 + ay0 * b22 + by0;\n\n        return dest;\n    }\n\n    export function inverse(mat: Float32Array, dest?: Float32Array): Float32Array {\n        if (Math.abs(mat[1]) < FLOAT_EPSILON && Math.abs(mat[2]) < FLOAT_EPSILON) //Simple scaling/translation matrix\n            return simple_inverse(mat, dest);\n        else\n            return complex_inverse(mat, dest);\n    }\n\n    export function transformVec2(mat: Float32Array, vec: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = vec;\n        var x = vec[0],\n            y = vec[1];\n        dest[0] = (mat[0] * x) + (mat[2] * y) + mat[4];\n        dest[1] = (mat[1] * x) + (mat[3] * y) + mat[5];\n        return dest;\n    }\n\n    export function createTranslate(x: number, y: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        dest[0] = 1;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = 1;\n        dest[4] = x;\n        dest[5] = y;\n        return dest;\n    }\n\n    export function translate(mat: Float32Array, x: number, y: number): Float32Array {\n        mat[4] += x;\n        mat[5] += y;\n        return mat;\n    }\n\n    export function createScale(sx: number, sy: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        dest[0] = sx;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = sy;\n        dest[4] = 0;\n        dest[5] = 0;\n        return dest;\n    }\n\n    export function scale(mat: Float32Array, sx: number, sy: number): Float32Array {\n        mat[0] *= sx;\n        mat[2] *= sx;\n        mat[4] *= sx;\n\n        mat[1] *= sy;\n        mat[3] *= sy;\n        mat[5] *= sy;\n        return mat;\n    }\n\n    export function createRotate(angleRad: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        var c = Math.cos(angleRad);\n        var s = Math.sin(angleRad);\n        dest[0] = c;\n        dest[1] = s;\n        dest[2] = -s;\n        dest[3] = c;\n        dest[4] = 0;\n        dest[5] = 0;\n        return dest;\n    }\n\n    export function createSkew(angleRadX: number, angleRadY: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        dest[0] = 1;\n        dest[1] = Math.tan(angleRadY);\n        dest[2] = Math.tan(angleRadX);\n        dest[3] = 1;\n        dest[4] = 0;\n        dest[5] = 0;\n        return dest;\n    }\n\n    export function preapply(dest: Float32Array, mat: Float32Array): Float32Array {\n        return multiply(mat, dest, dest);\n    }\n\n    export function apply(dest: Float32Array, mat: Float32Array): Float32Array {\n        return multiply(dest, mat, dest);\n    }\n\n    function simple_inverse(mat: Float32Array, dest?: Float32Array): Float32Array {\n        var m11 = mat[0];\n        if (Math.abs(m11) < FLOAT_EPSILON)\n            return null;\n\n        var m22 = mat[3];\n        if (Math.abs(m22) < FLOAT_EPSILON)\n            return null;\n\n        if (!dest) {\n            dest = mat;\n        } else {\n            dest[1] = mat[1];\n            dest[2] = mat[2];\n        }\n\n        var x0 = -mat[4];\n        var y0 = -mat[5];\n        if (Math.abs(m11 - 1) > FLOAT_EPSILON) {\n            m11 = 1 / m11;\n            x0 *= m11;\n        }\n        if (Math.abs(m22 - 1) > FLOAT_EPSILON) {\n            m22 = 1 / m22;\n            y0 *= m22;\n        }\n\n        dest[0] = m11;\n        dest[3] = m22;\n        dest[4] = x0;\n        dest[5] = y0;\n        return dest;\n    }\n\n    function complex_inverse(mat: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = mat;\n\n        var m11 = mat[0], m12 = mat[1],\n            m21 = mat[2], m22 = mat[3];\n\n        //inv(A) = 1/det(A) * adj(A)\n        var det = m11 * m22 - m12 * m21;\n        if (det === 0 || !isFinite(det))\n            return null;\n        var id = 1 / det;\n\n        var x0 = mat[4], y0 = mat[5];\n\n        dest[0] = m22 * id;\n        dest[1] = -m12 * id;\n        dest[2] = -m21 * id;\n        dest[3] = m11 * id;\n        dest[4] = (m21 * y0 - m22 * x0) * id;\n        dest[5] = (m12 * x0 - m11 * y0) * id;\n        return dest;\n    }\n}","namespace puck.vec2 {\n    var EPSILON = 1e-10;\n\n    export function create(x: number, y: number): Float32Array {\n        var dest = new Float32Array(2);\n        dest[0] = x;\n        dest[1] = y;\n        return dest;\n    }\n\n    export function init(x: number, y: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = new Float32Array(2);\n        dest[0] = x;\n        dest[1] = y;\n        return dest;\n    }\n\n    export function clone(src: Float32Array, dest?: Float32Array): Float32Array {\n        return init(src[0], src[1], dest);\n    }\n\n    export function reverse(src: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = src;\n        dest[0] = -src[0];\n        dest[1] = -src[1];\n        return dest;\n    }\n\n    /// Equivalent of rotating 90 degrees clockwise (screen space)\n    export function orthogonal(src: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = src;\n        var x = src[0],\n            y = src[1];\n        dest[0] = -y;\n        dest[1] = x;\n        return dest;\n    }\n\n    export function normalize(src: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = src;\n        var x = src[0],\n            y = src[1];\n        var len = Math.sqrt(x * x + y * y);\n        dest[0] = x / len;\n        dest[1] = y / len;\n        return dest;\n    }\n\n    /// Rotates a vector(v) by angle(theta) clockwise(screen space) ...which is counter-clockwise in coordinate space\n    export function rotate(src: Float32Array, theta: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = src;\n        var c = Math.cos(theta);\n        var s = Math.sin(theta);\n        var x = src[0];\n        var y = src[1];\n        dest[0] = x * c - y * s;\n        dest[1] = x * s + y * c;\n        return dest;\n    }\n\n    /// Returns smallest angle (in radians) between 2 vectors\n    export function angleBetween(u: Float32Array, v: Float32Array): number {\n        var ux = u[0],\n            uy = u[1],\n            vx = v[0],\n            vy = v[1];\n        var num = ux * vx + uy * vy;\n        var den = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n        return Math.acos(num / den);\n    }\n\n    /// By rotating from vector(v1) to vector(v2), tests whether that angle is clockwise (screen space)\n    export function isClockwiseTo(v1: Float32Array, v2: Float32Array) {\n        var theta = angleBetween(v1, v2);\n        var nv1 = normalize(clone(v1));\n        var nv2 = normalize(clone(v2));\n        rotate(nv1, theta);\n        var nx = Math.abs(nv1[0] - nv2[0]);\n        var ny = Math.abs(nv1[1] - nv2[1]);\n        return nx < EPSILON\n            && ny < EPSILON;\n    }\n\n    /// Finds intersection of v1(s1 + t(d1)) and v2(s2 + t(d2))\n    export function intersection(s1: Float32Array, d1: Float32Array, s2: Float32Array, d2: Float32Array): Float32Array {\n        var x1 = s1[0];\n        var y1 = s1[1];\n        var x2 = x1 + d1[0];\n        var y2 = y1 + d1[1];\n\n        var x3 = s2[0];\n        var y3 = s2[1];\n        var x4 = x3 + d2[0];\n        var y4 = y3 + d2[1];\n\n        var det = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n        if (det === 0)\n            return null;\n\n        var xn = ((x1 * y2 - y1 * x2) * (x3 - x4)) - ((x1 - x2) * (x3 * y4 - y3 * x4));\n        var yn = ((x1 * y2 - y1 * x2) * (y3 - y4)) - ((y1 - y2) * (x3 * y4 - y3 * x4));\n        return vec2.create(xn / det, yn / det);\n    }\n}"],"sourceRoot":"/source/"}